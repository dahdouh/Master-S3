THERE_BE_DRAGONS_HERE

21 September 2018 7:59:32.957616 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a GLMRubricSmalltalkTextModel
		menuMorph: 	nil
		editor: 	a RubSmalltalkEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $]->$[ $}->${ )
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a GLMRubricSmalltalkTextModel
		menuMorph: 	nil
		editor: 	a RubSmalltalkEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $]->$[ $}->${ )
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	1
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	1
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(1049222656)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@31)
		owner: 	a TransformWithLayoutMorph(225623808)
		submorphs: 	an Array(a RubPrimarySelectionMorph(298558208) a RubCursor(919034624...etc...
		fullBounds: 	(0@0) corner: (580@31)
		color: 	Color transparent
		extension: 	a MorphExtension (441745152) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(680994048)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(919034624)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	(37@32)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(1049222656)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@31)
		owner: 	a TransformWithLayoutMorph(225623808)
		submorphs: 	an Array(a RubPrimarySelectionMorph(298558208) a RubCursor(919034624...etc...
		fullBounds: 	(0@0) corner: (580@31)
		color: 	Color transparent
		extension: 	a MorphExtension (441745152) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(680994048)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(919034624)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	(37@32)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(1049222656)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@31)
		owner: 	a TransformWithLayoutMorph(225623808)
		submorphs: 	an Array(a RubPrimarySelectionMorph(298558208) a RubCursor(919034624...etc...
		fullBounds: 	(0@0) corner: (580@31)
		color: 	Color transparent
		extension: 	a MorphExtension (441745152) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(680994048)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(919034624)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	(37@32)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(1049222656)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@31)
		owner: 	a TransformWithLayoutMorph(225623808)
		submorphs: 	an Array(a RubPrimarySelectionMorph(298558208) a RubCursor(919034624...etc...
		fullBounds: 	(0@0) corner: (580@31)
		color: 	Color transparent
		extension: 	a MorphExtension (441745152) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(680994048)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(919034624)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	(37@32)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(1049222656)
	Receiver's instance variables: 
		bounds: 	(211@101) corner: (227@117)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (1002097664)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(211@101) mouseOver 50709 nil]
		targetOffset: 	(25.0@17.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 50709 211 101 0 0 0 1)
		lastKeyScanCode: 	51
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(211@101) corner: (227@117)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (1002097664)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(211@101) mouseOver 50709 nil]
		targetOffset: 	(25.0@17.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 50709 211 101 0 0 0 1)
		lastKeyScanCode: 	51
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1855@962)
		hand: 	a HandMorph(58125568)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@962)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) an ImageMorph(342771456))
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (303216896) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1855@962)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	49022
		lastStepMessage: 	nil
		lastCycleTime: 	50711
		alarms: 	a Heap()
		lastAlarmTime: 	50711
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>viewBox:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1855@962)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@962)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) an ImageMorph(342771456))
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (303216896) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@962)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) an ImageMorph(342771456))
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (303216896) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	true
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	true
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	true
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2018-09-21T19:59:32.723334+02:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2018-09-21T19:59:32.723334+02:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2018-09-21T19:59:32.723334+02:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	49
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2018-09-21T19:59:32.723334+02:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	true
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2018-09-21T19:59:32.723334+02:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	true
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2018-09-21T19:59:32.723334+02:00


SessionManager>>snapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	true
		isImageStarting: 	true
		snapshotResult: 	true
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>snapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ ^ SessionManager default snapshot: save andQuit: quit ] in SmalltalkImage>>snapshot:andQuit:
CurrentExecutionEnvironment class>>activate:for:
DefaultExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment class>>beActiveDuring:
SmalltalkImage>>snapshot:andQuit:
WorldState class>>quitSession
WorldMorph(PasteUpMorph)>>windowEvent:
WorldMorph(Morph)>>handleWindowEvent:
WindowEvent>>sentTo:
WorldMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchWindowEvent:with:
MorphicEventDispatcher>>handleWindowEvent:
WindowEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
WorldMorph(Morph)>>processEvent:using:
WorldMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendEvent:focus:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of True did not understand #ifNotTrue:
21 September 2018 8:11:44.077757 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

True(Object)>>doesNotUnderstand: #ifNotTrue:
	Receiver: true
	Arguments and temporary variables: 
		aMessage: 	ifNotTrue: [ 1 ]
		exception: 	MessageNotUnderstood: True>>ifNotTrue:
		resumeValue: 	nil
	Receiver's instance variables: 
true

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	a ReadStream
		itsSelection: 	a Text for ''
		itsSelectionString: 	''
	Receiver's instance variables: 
		ast: 	DoIt
	^ nil isNil ifNotTrue: [ 1 ]
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(965228288)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | 
textMorph shoutStyler style: textMorph text.
GLMPrintPoppe...etc...
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(965228288)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(881852928)
		textModel: 	a GLMRubricSmalltalkTextModel


MorphicAlarm(MessageSend)>>value
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	731393
		numArgs: 	0


MorphicAlarm>>value:
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 
		anArgument: 	731408
		nArgs: 	0
	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	731393
		numArgs: 	0


WorldState>>triggerAlarmsBefore:
	Receiver: a WorldState
	Arguments and temporary variables: 
		nowTime: 	731408
		pending: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(984956416)))
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1855@962)
		canvas: 	a FormCanvas on: DisplayScreen(1855x962x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(776782080))(a SearchMorp...etc...
		lastStepTime: 	731386
		lastStepMessage: 	nil
		lastCycleTime: 	731408
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(984956416)))
		lastAlarmTime: 	731386
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>runLocalStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		now: 	731408
		morphToStep: 	nil
		stepTime: 	nil
		priorWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1855@962)
		canvas: 	a FormCanvas on: DisplayScreen(1855x962x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(776782080))(a SearchMorp...etc...
		lastStepTime: 	731386
		lastStepMessage: 	nil
		lastCycleTime: 	731408
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(984956416)))
		lastAlarmTime: 	731386
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	nil
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1855@962)
		canvas: 	a FormCanvas on: DisplayScreen(1855x962x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(776782080))(a SearchMorp...etc...
		lastStepTime: 	731386
		lastStepMessage: 	nil
		lastCycleTime: 	731408
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(984956416)))
		lastAlarmTime: 	731386
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@962)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(332586752) a Na...etc...
		fullBounds: 	(0@0) corner: (1855@962)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (303216896) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1855@962)
		canvas: 	a FormCanvas on: DisplayScreen(1855x962x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(776782080))(a SearchMorp...etc...
		lastStepTime: 	731386
		lastStepMessage: 	nil
		lastCycleTime: 	731408
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(984956416)))
		lastAlarmTime: 	731386
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1855@962)
		canvas: 	a FormCanvas on: DisplayScreen(1855x962x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(776782080))(a SearchMorp...etc...
		lastStepTime: 	731386
		lastStepMessage: 	nil
		lastCycleTime: 	731408
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(984956416)))
		lastAlarmTime: 	731386
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@962)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(332586752) a Na...etc...
		fullBounds: 	(0@0) corner: (1855@962)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (303216896) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
True(Object)>>doesNotUnderstand: #ifNotTrue:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
MorphicAlarm(MessageSend)>>value
MorphicAlarm>>value:
WorldState>>triggerAlarmsBefore:
WorldState>>runLocalStepMethodsIn:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

25 September 2018 7:05:44.731218 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a GLMRubricSmalltalkTextModel
		menuMorph: 	nil
		editor: 	a RubSmalltalkEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $]->$[ $}->${ )
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a GLMRubricSmalltalkTextModel
		menuMorph: 	nil
		editor: 	a RubSmalltalkEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $]->$[ $}->${ )
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	1
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	1
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(1049222656)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@31)
		owner: 	a TransformWithLayoutMorph(225623808)
		submorphs: 	an Array(a RubPrimarySelectionMorph(298558208) a RubCursor(919034624...etc...
		fullBounds: 	(0@0) corner: (580@31)
		color: 	Color transparent
		extension: 	a MorphExtension (441745152) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(680994048)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(919034624)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	(37@32)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(1049222656)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@31)
		owner: 	a TransformWithLayoutMorph(225623808)
		submorphs: 	an Array(a RubPrimarySelectionMorph(298558208) a RubCursor(919034624...etc...
		fullBounds: 	(0@0) corner: (580@31)
		color: 	Color transparent
		extension: 	a MorphExtension (441745152) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(680994048)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(919034624)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	(37@32)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(1049222656)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@31)
		owner: 	a TransformWithLayoutMorph(225623808)
		submorphs: 	an Array(a RubPrimarySelectionMorph(298558208) a RubCursor(919034624...etc...
		fullBounds: 	(0@0) corner: (580@31)
		color: 	Color transparent
		extension: 	a MorphExtension (441745152) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(680994048)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(919034624)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	(37@32)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(1049222656)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@31)
		owner: 	a TransformWithLayoutMorph(225623808)
		submorphs: 	an Array(a RubPrimarySelectionMorph(298558208) a RubCursor(919034624...etc...
		fullBounds: 	(0@0) corner: (580@31)
		color: 	Color transparent
		extension: 	a MorphExtension (441745152) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(680994048)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(919034624)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	(37@32)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(1049222656)
	Receiver's instance variables: 
		bounds: 	(211@101) corner: (227@117)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (1002097664)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(211@101) mouseOver 50709 nil]
		targetOffset: 	(25.0@17.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 50709 211 101 0 0 0 1)
		lastKeyScanCode: 	51
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(211@101) corner: (227@117)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (1002097664)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(211@101) mouseOver 50709 nil]
		targetOffset: 	(25.0@17.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 50709 211 101 0 0 0 1)
		lastKeyScanCode: 	51
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1855@962)
		hand: 	a HandMorph(58125568)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@962)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) an ImageMorph(342771456))
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (303216896) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1855@962)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	49022
		lastStepMessage: 	nil
		lastCycleTime: 	50711
		alarms: 	a Heap()
		lastAlarmTime: 	50711
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>viewBox:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1855@962)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@962)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) an ImageMorph(342771456))
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (303216896) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@962)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) an ImageMorph(342771456))
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (303216896) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	true
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	true
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	true
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2018-09-25T07:05:44.36784+02:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2018-09-25T07:05:44.36784+02:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2018-09-25T07:05:44.36784+02:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	49
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2018-09-25T07:05:44.36784+02:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	true
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2018-09-25T07:05:44.36784+02:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	true
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2018-09-25T07:05:44.36784+02:00


SessionManager>>snapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	true
		isImageStarting: 	true
		snapshotResult: 	true
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>snapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ ^ SessionManager default snapshot: save andQuit: quit ] in SmalltalkImage>>snapshot:andQuit:
CurrentExecutionEnvironment class>>activate:for:
DefaultExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment class>>beActiveDuring:
SmalltalkImage>>snapshot:andQuit:
WorldState class>>quitSession
WorldMorph(PasteUpMorph)>>windowEvent:
WorldMorph(Morph)>>handleWindowEvent:
WindowEvent>>sentTo:
WorldMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchWindowEvent:with:
MorphicEventDispatcher>>handleWindowEvent:
WindowEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
WorldMorph(Morph)>>processEvent:using:
WorldMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendEvent:focus:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

28 September 2018 9:54:37.149584 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a GLMRubricSmalltalkTextModel
		menuMorph: 	nil
		editor: 	a RubSmalltalkEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $]->$[ $}->${ )
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a GLMRubricSmalltalkTextModel
		menuMorph: 	nil
		editor: 	a RubSmalltalkEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $]->$[ $}->${ )
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	1
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	1
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(1049222656)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@31)
		owner: 	a TransformWithLayoutMorph(225623808)
		submorphs: 	an Array(a RubPrimarySelectionMorph(298558208) a RubCursor(919034624...etc...
		fullBounds: 	(0@0) corner: (580@31)
		color: 	Color transparent
		extension: 	a MorphExtension (441745152) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(680994048)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(919034624)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	(37@32)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(1049222656)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@31)
		owner: 	a TransformWithLayoutMorph(225623808)
		submorphs: 	an Array(a RubPrimarySelectionMorph(298558208) a RubCursor(919034624...etc...
		fullBounds: 	(0@0) corner: (580@31)
		color: 	Color transparent
		extension: 	a MorphExtension (441745152) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(680994048)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(919034624)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	(37@32)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(1049222656)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@31)
		owner: 	a TransformWithLayoutMorph(225623808)
		submorphs: 	an Array(a RubPrimarySelectionMorph(298558208) a RubCursor(919034624...etc...
		fullBounds: 	(0@0) corner: (580@31)
		color: 	Color transparent
		extension: 	a MorphExtension (441745152) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(680994048)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(919034624)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	(37@32)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(1049222656)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@31)
		owner: 	a TransformWithLayoutMorph(225623808)
		submorphs: 	an Array(a RubPrimarySelectionMorph(298558208) a RubCursor(919034624...etc...
		fullBounds: 	(0@0) corner: (580@31)
		color: 	Color transparent
		extension: 	a MorphExtension (441745152) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(680994048)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(919034624)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	(37@32)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(1049222656)
	Receiver's instance variables: 
		bounds: 	(211@101) corner: (227@117)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (1002097664)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(211@101) mouseOver 50709 nil]
		targetOffset: 	(25.0@17.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 50709 211 101 0 0 0 1)
		lastKeyScanCode: 	51
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(211@101) corner: (227@117)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (1002097664)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(211@101) mouseOver 50709 nil]
		targetOffset: 	(25.0@17.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 50709 211 101 0 0 0 1)
		lastKeyScanCode: 	51
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1848@962)
		hand: 	a HandMorph(58125568)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1848@962)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) an ImageMorph(342771456))
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (303216896) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1848@962)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	49022
		lastStepMessage: 	nil
		lastCycleTime: 	50711
		alarms: 	a Heap()
		lastAlarmTime: 	50711
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>viewBox:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1848@962)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1848@962)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) an ImageMorph(342771456))
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (303216896) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1848@962)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) an ImageMorph(342771456))
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (303216896) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	true
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	true
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	true
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2018-09-28T09:54:36.993284+02:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2018-09-28T09:54:36.993284+02:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2018-09-28T09:54:36.993284+02:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	49
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2018-09-28T09:54:36.993284+02:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	true
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2018-09-28T09:54:36.993284+02:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	true
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2018-09-28T09:54:36.993284+02:00


SessionManager>>snapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	true
		isImageStarting: 	true
		snapshotResult: 	true
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>snapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ ^ SessionManager default snapshot: save andQuit: quit ] in SmalltalkImage>>snapshot:andQuit:
CurrentExecutionEnvironment class>>activate:for:
DefaultExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment class>>beActiveDuring:
SmalltalkImage>>snapshot:andQuit:
WorldState class>>quitSession
WorldMorph(PasteUpMorph)>>windowEvent:
WorldMorph(Morph)>>handleWindowEvent:
WindowEvent>>sentTo:
WorldMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchWindowEvent:with:
MorphicEventDispatcher>>handleWindowEvent:
WindowEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
WorldMorph(Morph)>>processEvent:using:
WorldMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendEvent:focus:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
#superClass was sent to nil
28 September 2018 10:02:33.989807 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

UndefinedObject(Object)>>doesNotUnderstand: #superClass
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	superClass
		exception: 	MessageNotUnderstood: receiver of "superClass" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	a ReadStream
		itsSelection: 	a Text for ''
		itsSelectionString: 	''
	Receiver's instance variables: 
		ast: 	DoIt
	^ class superClass
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(472857600)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | 
textMorph shoutStyler style: textMorph text.
GLMPrintPoppe...etc...
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(472857600)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1006726912)
		textModel: 	a GLMRubricSmalltalkTextModel


MorphicAlarm(MessageSend)>>value
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	477419
		numArgs: 	0


MorphicAlarm>>value:
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 
		anArgument: 	477433
		nArgs: 	0
	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	477419
		numArgs: 	0


WorldState>>triggerAlarmsBefore:
	Receiver: a WorldState
	Arguments and temporary variables: 
		nowTime: 	477433
		pending: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(257787904)))
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1031)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1031x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(367625472))(a SearchMorp...etc...
		lastStepTime: 	477412
		lastStepMessage: 	nil
		lastCycleTime: 	477433
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(257787904)))
		lastAlarmTime: 	477412
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>runLocalStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		now: 	477433
		morphToStep: 	nil
		stepTime: 	nil
		priorWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1031)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1031x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(367625472))(a SearchMorp...etc...
		lastStepTime: 	477412
		lastStepMessage: 	nil
		lastCycleTime: 	477433
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(257787904)))
		lastAlarmTime: 	477412
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	nil
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1031)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1031x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(367625472))(a SearchMorp...etc...
		lastStepTime: 	477412
		lastStepMessage: 	nil
		lastCycleTime: 	477433
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(257787904)))
		lastAlarmTime: 	477412
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1031)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(54672896) a Nau...etc...
		fullBounds: 	(0@0) corner: (1920@1031)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (303216896) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1031)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1031x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(367625472))(a SearchMorp...etc...
		lastStepTime: 	477412
		lastStepMessage: 	nil
		lastCycleTime: 	477433
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(257787904)))
		lastAlarmTime: 	477412
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1031)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1031x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(367625472))(a SearchMorp...etc...
		lastStepTime: 	477412
		lastStepMessage: 	nil
		lastCycleTime: 	477433
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(257787904)))
		lastAlarmTime: 	477412
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1031)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(54672896) a Nau...etc...
		fullBounds: 	(0@0) corner: (1920@1031)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (303216896) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #superClass
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
MorphicAlarm(MessageSend)>>value
MorphicAlarm>>value:
WorldState>>triggerAlarmsBefore:
WorldState>>runLocalStepMethodsIn:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
#superclass was sent to nil
28 September 2018 10:02:38.793578 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

UndefinedObject(Object)>>doesNotUnderstand: #superclass
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	superclass
		exception: 	MessageNotUnderstood: receiver of "superclass" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	a ReadStream
		itsSelection: 	a Text for ''
		itsSelectionString: 	''
	Receiver's instance variables: 
		ast: 	DoIt
	^ class superclass
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(472857600)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | 
textMorph shoutStyler style: textMorph text.
GLMPrintPoppe...etc...
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(472857600)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1006726912)
		textModel: 	a GLMRubricSmalltalkTextModel


MorphicAlarm(MessageSend)>>value
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	482230
		numArgs: 	0


MorphicAlarm>>value:
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 
		anArgument: 	482248
		nArgs: 	0
	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	482230
		numArgs: 	0


WorldState>>triggerAlarmsBefore:
	Receiver: a WorldState
	Arguments and temporary variables: 
		nowTime: 	482248
		pending: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(257787904)))
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1031)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1031x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(460811264))(a DropList...etc...
		lastStepTime: 	482226
		lastStepMessage: 	nil
		lastCycleTime: 	482248
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(257787904)))
		lastAlarmTime: 	482226
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>runLocalStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		now: 	482248
		morphToStep: 	nil
		stepTime: 	nil
		priorWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1031)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1031x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(460811264))(a DropList...etc...
		lastStepTime: 	482226
		lastStepMessage: 	nil
		lastCycleTime: 	482248
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(257787904)))
		lastAlarmTime: 	482226
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	nil
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1031)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1031x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(460811264))(a DropList...etc...
		lastStepTime: 	482226
		lastStepMessage: 	nil
		lastCycleTime: 	482248
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(257787904)))
		lastAlarmTime: 	482226
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1031)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(54672896) a Nau...etc...
		fullBounds: 	(0@0) corner: (1920@1031)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (303216896) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1031)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1031x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(460811264))(a DropList...etc...
		lastStepTime: 	482226
		lastStepMessage: 	nil
		lastCycleTime: 	482248
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(257787904)))
		lastAlarmTime: 	482226
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1031)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1031x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(460811264))(a DropList...etc...
		lastStepTime: 	482226
		lastStepMessage: 	nil
		lastCycleTime: 	482248
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(257787904)))
		lastAlarmTime: 	482226
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1031)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(54672896) a Nau...etc...
		fullBounds: 	(0@0) corner: (1920@1031)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (303216896) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #superclass
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
MorphicAlarm(MessageSend)>>value
MorphicAlarm>>value:
WorldState>>triggerAlarmsBefore:
WorldState>>runLocalStepMethodsIn:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
#isTemp was sent to nil
28 September 2018 10:31:34.412654 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

UndefinedObject(Object)>>doesNotUnderstand: #isTemp
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	isTemp
		exception: 	MessageNotUnderstood: receiver of "isTemp" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

OCASTSemanticAnalyzer>>visitVariableNode:
	Receiver: an OCASTSemanticAnalyzer
	Arguments and temporary variables: 
		aVariableNode: 	RBVariableNode(IDM)
		var: 	nil
	Receiver's instance variables: 
		scope: 	an OCMethodScope 3
		blockcounter: 	nil
		compilationContext: 	a CompilationContext


RBVariableNode>>acceptVisitor:
	Receiver: RBVariableNode(IDM)
	Arguments and temporary variables: 
		aProgramNodeVisitor: 	an OCASTSemanticAnalyzer
	Receiver's instance variables: 
		parent: 	RBMessageNode(IDM
	subclass: #Objet
	instanceVariableNames: ''
	classVa...etc...
		properties: 	nil
		parentheses: 	nil
		name: 	#IDM
		start: 	1


OCASTSemanticAnalyzer(RBProgramNodeVisitor)>>visitNode:
	Receiver: an OCASTSemanticAnalyzer
	Arguments and temporary variables: 
		aNode: 	RBVariableNode(IDM)
	Receiver's instance variables: 
		scope: 	an OCMethodScope 3
		blockcounter: 	nil
		compilationContext: 	a CompilationContext


OCASTSemanticAnalyzer(RBProgramNodeVisitor)>>visitMessageNode:
	Receiver: an OCASTSemanticAnalyzer
	Arguments and temporary variables: 
		aMessageNode: 	RBMessageNode(IDM
	subclass: #Objet
	instanceVariableNames: ''
	c...etc...
	Receiver's instance variables: 
		scope: 	an OCMethodScope 3
		blockcounter: 	nil
		compilationContext: 	a CompilationContext


RBMessageNode>>acceptVisitor:
	Receiver: RBMessageNode(IDM
	subclass: #Objet
	instanceVariableNames: ''
	classVariableNames: ''
	pa...etc...
	Arguments and temporary variables: 
		aProgramNodeVisitor: 	an OCASTSemanticAnalyzer
	Receiver's instance variables: 
		parent: 	RBReturnNode(^ IDM
	subclass: #Objet
	instanceVariableNames: ''
	classV...etc...
		properties: 	nil
		parentheses: 	nil
		receiver: 	RBVariableNode(IDM)
		selector: 	#subclass:instanceVariableNames:classVariableNames:package:
		keywordsPositions: 	an IntegerArray(5 23 50 74)
		arguments: 	an OrderedCollection(RBLiteralValueNode(#Objet) RBLiteralValueNode('...etc...


OCASTSemanticAnalyzer(RBProgramNodeVisitor)>>visitNode:
	Receiver: an OCASTSemanticAnalyzer
	Arguments and temporary variables: 
		aNode: 	RBMessageNode(IDM
	subclass: #Objet
	instanceVariableNames: ''
	classVar...etc...
	Receiver's instance variables: 
		scope: 	an OCMethodScope 3
		blockcounter: 	nil
		compilationContext: 	a CompilationContext


OCASTSemanticAnalyzer(RBProgramNodeVisitor)>>visitReturnNode:
	Receiver: an OCASTSemanticAnalyzer
	Arguments and temporary variables: 
		aReturnNode: 	RBReturnNode(^ IDM
	subclass: #Objet
	instanceVariableNames: ''
	c...etc...
	Receiver's instance variables: 
		scope: 	an OCMethodScope 3
		blockcounter: 	nil
		compilationContext: 	a CompilationContext


RBReturnNode>>acceptVisitor:
	Receiver: RBReturnNode(^ IDM
	subclass: #Objet
	instanceVariableNames: ''
	classVariableNames: ''
	p...etc...
	Arguments and temporary variables: 
		aProgramNodeVisitor: 	an OCASTSemanticAnalyzer
	Receiver's instance variables: 
		parent: 	RBSequenceNode(^ IDM
	subclass: #Objet
	instanceVariableNames: ''
	clas...etc...
		properties: 	nil
		return: 	1
		value: 	RBMessageNode(IDM
	subclass: #Objet
	instanceVariableNames: ''
	classVar...etc...


OCASTSemanticAnalyzer(RBProgramNodeVisitor)>>visitNode:
	Receiver: an OCASTSemanticAnalyzer
	Arguments and temporary variables: 
		aNode: 	RBReturnNode(^ IDM
	subclass: #Objet
	instanceVariableNames: ''
	classVa...etc...
	Receiver's instance variables: 
		scope: 	an OCMethodScope 3
		blockcounter: 	nil
		compilationContext: 	a CompilationContext


[ :each | self visitNode: each ] in OCASTSemanticAnalyzer>>visitSequenceNode:
	Receiver: an OCASTSemanticAnalyzer
	Arguments and temporary variables: 
		aSequenceNode: 	RBSequenceNode(^ IDM
	subclass: #Objet
	instanceVariableNames: '...etc...
		each: 	RBReturnNode(^ IDM
	subclass: #Objet
	instanceVariableNames: ''
	classVar...etc...
	Receiver's instance variables: 
		scope: 	an OCMethodScope 3
		blockcounter: 	nil
		compilationContext: 	a CompilationContext


Array(SequenceableCollection)>>do:
	Receiver: an Array(RBReturnNode(^ IDM
	subclass: #Objet
	instanceVariableNames: ''
	classVariableNam...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | self visitNode: each ]
		index: 	1
	Receiver's instance variables: 
an Array(RBReturnNode(^ IDM
	subclass: #Objet
	instanceVariableNames: ''
	classVariableNam...etc...

OCASTSemanticAnalyzer>>visitSequenceNode:
	Receiver: an OCASTSemanticAnalyzer
	Arguments and temporary variables: 
		aSequenceNode: 	RBSequenceNode(^ IDM
	subclass: #Objet
	instanceVariableNames: '...etc...
	Receiver's instance variables: 
		scope: 	an OCMethodScope 3
		blockcounter: 	nil
		compilationContext: 	a CompilationContext


RBSequenceNode>>acceptVisitor:
	Receiver: RBSequenceNode(^ IDM
	subclass: #Objet
	instanceVariableNames: ''
	classVariableNames: ''
...etc...
	Arguments and temporary variables: 
		aProgramNodeVisitor: 	an OCASTSemanticAnalyzer
	Receiver's instance variables: 
		parent: 	DoIt
	^ IDM
		subclass: #Objet
		instanceVariableNames: ''
		classVaria...etc...
		properties: 	nil
		leftBar: 	nil
		rightBar: 	nil
		statements: 	an Array(RBReturnNode(^ IDM
	subclass: #Objet
	instanceVariableName...etc...
		periods: 	#()
		temporaries: 	#()


OCASTSemanticAnalyzer(RBProgramNodeVisitor)>>visitNode:
	Receiver: an OCASTSemanticAnalyzer
	Arguments and temporary variables: 
		aNode: 	RBSequenceNode(^ IDM
	subclass: #Objet
	instanceVariableNames: ''
	class...etc...
	Receiver's instance variables: 
		scope: 	an OCMethodScope 3
		blockcounter: 	nil
		compilationContext: 	a CompilationContext


OCASTSemanticAnalyzer>>visitMethodNode:
	Receiver: an OCASTSemanticAnalyzer
	Arguments and temporary variables: 
		aMethodNode: 	DoIt
	^ IDM
		subclass: #Objet
		instanceVariableNames: ''
		class...etc...
	Receiver's instance variables: 
		scope: 	an OCMethodScope 3
		blockcounter: 	nil
		compilationContext: 	a CompilationContext


RBMethodNode>>acceptVisitor:
	Receiver: DoIt
	^ IDM
		subclass: #Objet
		instanceVariableNames: ''
		classVariableNames: ''
		pack...etc...
	Arguments and temporary variables: 
		aProgramNodeVisitor: 	an OCASTSemanticAnalyzer
	Receiver's instance variables: 
		parent: 	nil
		properties: 	nil
		scope: 	an OCMethodScope 3
		selector: 	#DoIt
		keywordsPositions: 	nil
		body: 	RBSequenceNode(^ IDM
	subclass: #Objet
	instanceVariableNames: ''
	classV...etc...
		source: 	nil
		arguments: 	#()
		pragmas: 	nil
		replacements: 	a SortedCollection()
		nodeReplacements: 	an IdentityDictionary()
		compilationContext: 	a CompilationContext


OCASTSemanticAnalyzer(RBProgramNodeVisitor)>>visitNode:
	Receiver: an OCASTSemanticAnalyzer
	Arguments and temporary variables: 
		aNode: 	DoIt
	^ IDM
		subclass: #Objet
		instanceVariableNames: ''
		classVariab...etc...
	Receiver's instance variables: 
		scope: 	an OCMethodScope 3
		blockcounter: 	nil
		compilationContext: 	a CompilationContext


OCASTSemanticAnalyzer>>analyze:
	Receiver: an OCASTSemanticAnalyzer
	Arguments and temporary variables: 
		aNode: 	DoIt
	^ IDM
		subclass: #Objet
		instanceVariableNames: ''
		classVariab...etc...
	Receiver's instance variables: 
		scope: 	an OCMethodScope 3
		blockcounter: 	nil
		compilationContext: 	a CompilationContext


RBMethodNode>>doSemanticAnalysis
	Receiver: DoIt
	^ IDM
		subclass: #Objet
		instanceVariableNames: ''
		classVariableNames: ''
		pack...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		parent: 	nil
		properties: 	nil
		scope: 	an OCMethodScope 3
		selector: 	#DoIt
		keywordsPositions: 	nil
		body: 	RBSequenceNode(^ IDM
	subclass: #Objet
	instanceVariableNames: ''
	classV...etc...
		source: 	nil
		arguments: 	#()
		pragmas: 	nil
		replacements: 	a SortedCollection()
		nodeReplacements: 	an IdentityDictionary()
		compilationContext: 	a CompilationContext


RBMethodNode>>doSemanticAnalysisInContext:
	Receiver: DoIt
	^ IDM
		subclass: #Objet
		instanceVariableNames: ''
		classVariableNames: ''
		pack...etc...
	Arguments and temporary variables: 
		aCompilationContext: 	a CompilationContext
	Receiver's instance variables: 
		parent: 	nil
		properties: 	nil
		scope: 	an OCMethodScope 3
		selector: 	#DoIt
		keywordsPositions: 	nil
		body: 	RBSequenceNode(^ IDM
	subclass: #Objet
	instanceVariableNames: ''
	classV...etc...
		source: 	nil
		arguments: 	#()
		pragmas: 	nil
		replacements: 	a SortedCollection()
		nodeReplacements: 	an IdentityDictionary()
		compilationContext: 	a CompilationContext


[ ast doSemanticAnalysisInContext: self compilationContext ] in OpalCompiler>>doSemanticAnalysis
	Receiver: an OpalCompiler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		ast: 	DoIt
	^ IDM
		subclass: #Objet
		instanceVariableNames: ''
		classVariable...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


BlockClosure>>on:do:
	Receiver: [ ast doSemanticAnalysisInContext: self compilationContext ]
	Arguments and temporary variables: 
		exception: 	OCSemanticError
		handlerAction: 	[ :ex | 
ex defaultAction.
^ self compilationContext failBlock v...etc...
	Receiver's instance variables: 
		outerContext: 	OpalCompiler>>doSemanticAnalysis
		startpc: 	77
		numArgs: 	0


OpalCompiler>>doSemanticAnalysis
	Receiver: an OpalCompiler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		ast: 	DoIt
	^ IDM
		subclass: #Objet
		instanceVariableNames: ''
		classVariable...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


[ ast := self parse.
self doSemanticAnalysis.
self callPlugins ] in [ [ ast := self parse.
self doSemanticAnalysis.
self callPlugins ]
	on: OCSourceCodeChanged
	do: [ :notification | 
		self source: notification newSourceCode.
		notification retry ].
cm := ast generate: self compilationContext compiledMethodTrailer ] in OpalCompiler>>compile
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		cm: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	^ IDM
		subclass: #Objet
		instanceVariableNames: ''
		classVariable...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


BlockClosure>>on:do:
	Receiver: [ ast := self parse.
self doSemanticAnalysis.
self callPlugins ]
	Arguments and temporary variables: 
		exception: 	OCSourceCodeChanged
		handlerAction: 	[ :notification | 
self source: notification newSourceCode.
noti...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ ast := self parse.
self doSemanticAnalysis.
self callPlugins ...etc...
		startpc: 	213
		numArgs: 	0


[ [ ast := self parse.
self doSemanticAnalysis.
self callPlugins ]
	on: OCSourceCodeChanged
	do: [ :notification | 
		self source: notification newSourceCode.
		notification retry ].
cm := ast generate: self compilationContext compiledMethodTrailer ] in OpalCompiler>>compile
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		cm: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	^ IDM
		subclass: #Objet
		instanceVariableNames: ''
		classVariable...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


BlockClosure>>on:do:
	Receiver: [ [ ast := self parse.
self doSemanticAnalysis.
self callPlugins ]
	on: OCSourceCodeChange...etc...
	Arguments and temporary variables: 
		exception: 	SyntaxErrorNotification
		handlerAction: 	[ :exception | 
self compilationContext requestor
	ifNotNil: [ s...etc...
	Receiver's instance variables: 
		outerContext: 	OpalCompiler>>compile
		startpc: 	209
		numArgs: 	0


OpalCompiler>>compile
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		cm: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	^ IDM
		subclass: #Objet
		instanceVariableNames: ''
		classVariable...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


[ self compile ] in OpalCompiler>>translate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		ast: 	DoIt
	^ IDM
		subclass: #Objet
		instanceVariableNames: ''
		classVariable...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


BlockClosure>>on:do:
	Receiver: [ self compile ]
	Arguments and temporary variables: 
		exception: 	ReparseAfterSourceEditing
		handlerAction: 	[ :ex | 
self source: ex newSource readStream.
self compile ]
	Receiver's instance variables: 
		outerContext: 	OpalCompiler>>translate
		startpc: 	77
		numArgs: 	0


OpalCompiler>>translate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		ast: 	DoIt
	^ IDM
		subclass: #Objet
		instanceVariableNames: ''
		classVariable...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	a ReadStream
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	^ IDM
		subclass: #Objet
		instanceVariableNames: ''
		classVariable...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


NautilusUI(AbstractTool)>>compileANewClassFrom:notifying:startingFrom:
	Receiver: a NautilusUI
	Arguments and temporary variables: 
		aString: 	'IDM subclass: #Objet
	instanceVariableNames: ''''
	classVariableNames...etc...
		aController: 	a RubScrolledTextMorph(954945792)
		aClass: 	Pile
		oldClass: 	Object
		class: 	nil
		newClassName: 	'Objet'
		defTokens: 	an OrderedCollection('IDM' 'subclass:' '#Objet' 'instanceVariableNam...etc...
		keywdIx: 	2
		envt: 	a SystemDictionary(lots of globals)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		announceur: 	nil
		model: 	a Nautilus
		window: 	a NautilusWindow(901653248)
		sourceCodePanel: 	a PanelMorph(558378496)
		fullDisplayedComment: 	false
		sourceCodeContainer: 	a PanelMorph(166798336)
		shouldUpdateTitle: 	true
		contentSelection: 	a Text for ''
		acceptor: 	a ClassOrMethodDefinitionAcceptor
		commentWidget: 	nil
		sourceTextWidget: 	a RubScrolledTextMorph(954945792)
		sourceCodeSelectionInterval: 	(93 to: 92)
		sourceTextModel: 	a RubScrolledTextModel
		methodClassifier: 	nil
		commentTextModel: 	a RubScrolledTextModel
		instanceButtonWidget: 	a PluggableToggleButtonMorph(452645888)
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageWidget
		packagePatternString: 	'MetaProg'
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(367625472)


NautilusUI(AbstractNautilusUI)>>compileAClassFrom:notifying:
	Receiver: a NautilusUI
	Arguments and temporary variables: 
		aString: 	'IDM subclass: #Objet
	instanceVariableNames: ''''
	classVariableNames...etc...
		aController: 	a RubScrolledTextMorph(954945792)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		announceur: 	nil
		model: 	a Nautilus
		window: 	a NautilusWindow(901653248)
		sourceCodePanel: 	a PanelMorph(558378496)
		fullDisplayedComment: 	false
		sourceCodeContainer: 	a PanelMorph(166798336)
		shouldUpdateTitle: 	true
		contentSelection: 	a Text for ''
		acceptor: 	a ClassOrMethodDefinitionAcceptor
		commentWidget: 	nil
		sourceTextWidget: 	a RubScrolledTextMorph(954945792)
		sourceCodeSelectionInterval: 	(93 to: 92)
		sourceTextModel: 	a RubScrolledTextModel
		methodClassifier: 	nil
		commentTextModel: 	a RubScrolledTextModel
		instanceButtonWidget: 	a PluggableToggleButtonMorph(452645888)
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageWidget
		packagePatternString: 	'MetaProg'
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(367625472)


ClassOrMethodDefinitionAcceptor>>acceptInstanceSide:notifying:
	Receiver: a ClassOrMethodDefinitionAcceptor
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		model: 	a NautilusUI


ClassOrMethodDefinitionAcceptor>>accept:notifying:
	Receiver: a ClassOrMethodDefinitionAcceptor
	Arguments and temporary variables: 
		source: 	'IDM subclass: #Objet
	instanceVariableNames: ''''
	classVariableNames:...etc...
		aController: 	a RubScrolledTextMorph(954945792)
	Receiver's instance variables: 
		model: 	a NautilusUI


NautilusUI>>compileSource:notifying:
	Receiver: a NautilusUI
	Arguments and temporary variables: 
		aText: 	'IDM subclass: #Objet
	instanceVariableNames: ''''
	classVariableNames: ...etc...
		aController: 	a RubScrolledTextMorph(954945792)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		announceur: 	nil
		model: 	a Nautilus
		window: 	a NautilusWindow(901653248)
		sourceCodePanel: 	a PanelMorph(558378496)
		fullDisplayedComment: 	false
		sourceCodeContainer: 	a PanelMorph(166798336)
		shouldUpdateTitle: 	true
		contentSelection: 	a Text for ''
		acceptor: 	a ClassOrMethodDefinitionAcceptor
		commentWidget: 	nil
		sourceTextWidget: 	a RubScrolledTextMorph(954945792)
		sourceCodeSelectionInterval: 	(93 to: 92)
		sourceTextModel: 	a RubScrolledTextModel
		methodClassifier: 	nil
		commentTextModel: 	a RubScrolledTextModel
		instanceButtonWidget: 	a PluggableToggleButtonMorph(452645888)
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageWidget
		packagePatternString: 	'MetaProg'
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(367625472)


NautilusUI(AbstractNautilusUI)>>whenTextAcceptedInView:
	Receiver: a NautilusUI
	Arguments and temporary variables: 
		anAnnouncement: 	a RubTextAccepted
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		announceur: 	nil
		model: 	a Nautilus
		window: 	a NautilusWindow(901653248)
		sourceCodePanel: 	a PanelMorph(558378496)
		fullDisplayedComment: 	false
		sourceCodeContainer: 	a PanelMorph(166798336)
		shouldUpdateTitle: 	true
		contentSelection: 	a Text for ''
		acceptor: 	a ClassOrMethodDefinitionAcceptor
		commentWidget: 	nil
		sourceTextWidget: 	a RubScrolledTextMorph(954945792)
		sourceCodeSelectionInterval: 	(93 to: 92)
		sourceTextModel: 	a RubScrolledTextModel
		methodClassifier: 	nil
		commentTextModel: 	a RubScrolledTextModel
		instanceButtonWidget: 	a PluggableToggleButtonMorph(452645888)
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageWidget
		packagePatternString: 	'MetaProg'
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(367625472)



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #isTemp
OCASTSemanticAnalyzer>>visitVariableNode:
RBVariableNode>>acceptVisitor:
OCASTSemanticAnalyzer(RBProgramNodeVisitor)>>visitNode:
OCASTSemanticAnalyzer(RBProgramNodeVisitor)>>visitMessageNode:
RBMessageNode>>acceptVisitor:
OCASTSemanticAnalyzer(RBProgramNodeVisitor)>>visitNode:
OCASTSemanticAnalyzer(RBProgramNodeVisitor)>>visitReturnNode:
RBReturnNode>>acceptVisitor:
OCASTSemanticAnalyzer(RBProgramNodeVisitor)>>visitNode:
[ :each | self visitNode: each ] in OCASTSemanticAnalyzer>>visitSequenceNode:
Array(SequenceableCollection)>>do:
OCASTSemanticAnalyzer>>visitSequenceNode:
RBSequenceNode>>acceptVisitor:
OCASTSemanticAnalyzer(RBProgramNodeVisitor)>>visitNode:
OCASTSemanticAnalyzer>>visitMethodNode:
RBMethodNode>>acceptVisitor:
OCASTSemanticAnalyzer(RBProgramNodeVisitor)>>visitNode:
OCASTSemanticAnalyzer>>analyze:
RBMethodNode>>doSemanticAnalysis
RBMethodNode>>doSemanticAnalysisInContext:
[ ast doSemanticAnalysisInContext: self compilationContext ] in OpalCompiler>>doSemanticAnalysis
BlockClosure>>on:do:
OpalCompiler>>doSemanticAnalysis
[ ast := self parse.
self doSemanticAnalysis.
self callPlugins ] in [ [ ast := self parse.
self doSemanticAnalysis.
self callPlugins ]
	on: OCSourceCodeChanged
	do: [ :notification | 
		self source: notification newSourceCode.
		notification retry ].
cm := ast generate: self compilationContext compiledMethodTrailer ] in OpalCompiler>>compile
BlockClosure>>on:do:
[ [ ast := self parse.
self doSemanticAnalysis.
self callPlugins ]
	on: OCSourceCodeChanged
	do: [ :notification | 
		self source: notification newSourceCode.
		notification retry ].
cm := ast generate: self compilationContext compiledMethodTrailer ] in OpalCompiler>>compile
BlockClosure>>on:do:
OpalCompiler>>compile
[ self compile ] in OpalCompiler>>translate
BlockClosure>>on:do:
OpalCompiler>>translate
OpalCompiler>>evaluate
NautilusUI(AbstractTool)>>compileANewClassFrom:notifying:startingFrom:
NautilusUI(AbstractNautilusUI)>>compileAClassFrom:notifying:
ClassOrMethodDefinitionAcceptor>>acceptInstanceSide:notifying:
ClassOrMethodDefinitionAcceptor>>accept:notifying:
NautilusUI>>compileSource:notifying:
NautilusUI(AbstractNautilusUI)>>whenTextAcceptedInView:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
MessageSend>>value:
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubScrolledTextMorph>>acceptContents
RubScrolledTextMorph>>whenTextAcceptRequest:
MessageSend>>value:
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(RubAbstractTextArea)>>announce:
RubEditingArea(RubAbstractTextArea)>>acceptContents
RubSmalltalkEditor(RubTextEditor)>>accept
[ :target | target editor accept ] in RubTextEditor class>>buildShortcutsOn:
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryBinding>>completeMatch:buffer:
[ :l | l completeMatch: self buffer: aBuffer ] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andDo: aBlock ] in KMCategory>>onMatchWith:notify:andDo:
Set>>do:
KMCategory>>onMatchWith:notify:andDo:
KMCategoryBinding>>verifyMatchWith:notifying:thenDoing:
[ :aTarget | 
"nice hack to stop in the first listener"
aTarget
	verifyMatchWith: anEventBuffer
	notifying: self
	thenDoing: [ ^ self ] ] in KMDispatcher>>dispatch:
OrderedCollection>>do:
KMDispatcher>>dispatch:
KMTarget>>dispatch:
[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstance buffer copy.
aKeyboardEvent wasHandled
	ifTrue: [ ^ self ] ] in KMDispatchChain>>dispatch:
KMDispatchChain>>do:
KMDispatchChain>>dispatch:
KMDispatcher>>dispatchKeystroke:
RubEditingArea(Morph)>>dispatchKeystrokeForEvent:
RubEditingArea(RubAbstractTextArea)>>handleKeystroke:
KeyboardEvent>>sentTo:
RubEditingArea(Morph)>>handleEvent:
RubEditingArea(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Warning
28 September 2018 10:32:08.133596 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

[ InvalidGlobalName
	signal: 'Global names should be symbols'
	for: aName ] in SlotClassBuilder>>name:
	Receiver: a SlotClassBuilder
	Arguments and temporary variables: 
		aName: 	IDM
	Receiver's instance variables: 
		installer: 	a PharoClassInstaller
		oldClasses: 	an OrderedCollection()
		newClasses: 	an OrderedCollection()
		classSlots: 	#()
		category: 	nil
		superclass: 	Object
		name: 	nil
		layoutClass: 	nil
		slots: 	#()
		traitComposition: 	{}
		classTraitComposition: 	{}
		result: 	nil
		sharedPoolsString: 	''
		sharedVariables: 	#()
		comment: 	nil
		commentStamp: 	nil


BlockClosure>>cull:
	Receiver: [ InvalidGlobalName
	signal: 'Global names should be symbols'
	for: aName ]
	Arguments and temporary variables: 
		anArg: 	MessageNotUnderstood: IDM class>>asSymbol
	Receiver's instance variables: 
		outerContext: 	SlotClassBuilder>>name:
		startpc: 	118
		numArgs: 	0


Context>>evaluateSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	MessageNotUnderstood: IDM class>>asSymbol
		value: 	nil
	Receiver's instance variables: 
		sender: 	SlotClassBuilder>>name:
		pc: 	30
		stackp: 	2
		method: 	BlockClosure>>#on:do:
		closureOrNil: 	nil
		receiver: 	[ name := aName asSymbol ]


Context>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	MessageNotUnderstood: IDM class>>asSymbol
	Receiver's instance variables: 
		sender: 	SlotClassBuilder>>name:
		pc: 	30
		stackp: 	2
		method: 	BlockClosure>>#on:do:
		closureOrNil: 	nil
		receiver: 	[ name := aName asSymbol ]


MessageNotUnderstood(Exception)>>signal
	Receiver: MessageNotUnderstood: IDM class>>asSymbol
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	IDM
		signalContext: 	MessageNotUnderstood(Exception)>>signal
		handlerContext: 	BlockClosure>>on:do:
		outerContext: 	nil
		message: 	asSymbol
		receiver: 	IDM
		reachedDefaultHandler: 	false


IDM class(Object)>>doesNotUnderstand: #asSymbol
	Receiver: IDM
	Arguments and temporary variables: 
		aMessage: 	asSymbol
		exception: 	MessageNotUnderstood: IDM class>>asSymbol
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	0
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#IDM
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#MetaProg
		traitComposition: 	{}
		localSelectors: 	nil


[ name := aName asSymbol ] in SlotClassBuilder>>name:
	Receiver: a SlotClassBuilder
	Arguments and temporary variables: 
		aName: 	IDM
	Receiver's instance variables: 
		installer: 	a PharoClassInstaller
		oldClasses: 	an OrderedCollection()
		newClasses: 	an OrderedCollection()
		classSlots: 	#()
		category: 	nil
		superclass: 	Object
		name: 	nil
		layoutClass: 	nil
		slots: 	#()
		traitComposition: 	{}
		classTraitComposition: 	{}
		result: 	nil
		sharedPoolsString: 	''
		sharedVariables: 	#()
		comment: 	nil
		commentStamp: 	nil


BlockClosure>>on:do:
	Receiver: [ name := aName asSymbol ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ InvalidGlobalName
	signal: 'Global names should be symbols'
	f...etc...
	Receiver's instance variables: 
		outerContext: 	SlotClassBuilder>>name:
		startpc: 	107
		numArgs: 	0


SlotClassBuilder>>name:
	Receiver: a SlotClassBuilder
	Arguments and temporary variables: 
		aName: 	IDM
	Receiver's instance variables: 
		installer: 	a PharoClassInstaller
		oldClasses: 	an OrderedCollection()
		newClasses: 	an OrderedCollection()
		classSlots: 	#()
		category: 	nil
		superclass: 	Object
		name: 	nil
		layoutClass: 	nil
		slots: 	#()
		traitComposition: 	{}
		classTraitComposition: 	{}
		result: 	nil
		sharedPoolsString: 	''
		sharedVariables: 	#()
		comment: 	nil
		commentStamp: 	nil


[ :builder | 
builder
	superclass: self;
	name: t;
	layoutClass: self classLayout class;
	slots: f asSlotCollection;
	sharedVariablesFromString: d;
	sharedPools: s;
	category: cat;
	environment: self environment;
	copyClassSlotsFromExistingClass ] in Object class(Class)>>private_subclass:instanceVariableNames:classVariableNames:poolDictionaries:category:
	Receiver: Object
	Arguments and temporary variables: 
		t: 	IDM
		f: 	''
		d: 	''
		s: 	''
		cat: 	'MetaProg'
		builder: 	a SlotClassBuilder
	Receiver's instance variables: 
		superclass: 	ProtoObject
		methodDict: 	a MethodDictionary(size 408)
		format: 	0
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{BalloonState. UndefinedObject. Boolean. FillStyle. ConnectionQueue...etc...
		name: 	#Object
		classPool: 	a Dictionary(#DependentsFields->a WeakIdentityKeyDictionary(TextStyl...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Objects'
		traitComposition: 	{}
		localSelectors: 	nil


PharoClassInstaller class(AbstractClassInstaller class)>>make:
	Receiver: PharoClassInstaller
	Arguments and temporary variables: 
		aBlock: 	[ :builder | 
builder
	superclass: self;
	name: t;
	layoutClass: self c...etc...
		builder: 	a SlotClassBuilder
	Receiver's instance variables: 
		superclass: 	AbstractClassInstaller
		methodDict: 	a MethodDictionary(#basicClassDefinitionChangedFrom:to:using:->Phar...etc...
		format: 	65540
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#PharoClassInstaller
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Slot-ClassBuilder'
		traitComposition: 	{}
		localSelectors: 	nil


Object class(Class)>>private_subclass:instanceVariableNames:classVariableNames:poolDictionaries:category:
	Receiver: Object
	Arguments and temporary variables: 
		t: 	IDM
		f: 	''
		d: 	''
		s: 	''
		cat: 	'MetaProg'
	Receiver's instance variables: 
		superclass: 	ProtoObject
		methodDict: 	a MethodDictionary(size 408)
		format: 	0
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{BalloonState. UndefinedObject. Boolean. FillStyle. ConnectionQueue...etc...
		name: 	#Object
		classPool: 	a Dictionary(#DependentsFields->a WeakIdentityKeyDictionary(TextStyl...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Objects'
		traitComposition: 	{}
		localSelectors: 	nil


[ self
	private_subclass: aName
	instanceVariableNames: someInstanceVariableNames
	classVariableNames: someClassVariableNames
	poolDictionaries: someSharedPoolNames
	category: aCategory ] in Object class(Class)>>subclass:uses:instanceVariableNames:classVariableNames:poolDictionaries:package:
	Receiver: Object
	Arguments and temporary variables: 
		aName: 	IDM
		aTraitCompositionOrArray: 	#()
		someInstanceVariableNames: 	''
		someClassVariableNames: 	''
		someSharedPoolNames: 	''
		aCategory: 	'MetaProg'
	Receiver's instance variables: 
		superclass: 	ProtoObject
		methodDict: 	a MethodDictionary(size 408)
		format: 	0
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{BalloonState. UndefinedObject. Boolean. FillStyle. ConnectionQueue...etc...
		name: 	#Object
		classPool: 	a Dictionary(#DependentsFields->a WeakIdentityKeyDictionary(TextStyl...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Objects'
		traitComposition: 	{}
		localSelectors: 	nil


[ | newClass |
"Create the class and set the trait composition"
newClass := aBlock value.
newClass setTraitComposition: aTraitComposition asTraitComposition.
SystemAnnouncer uniqueInstance classModificationAppliedTo: newClass.
newClass ] in Object class(Class)>>subclass:uses:with:
	Receiver: Object
	Arguments and temporary variables: 
		aName: 	IDM
		aTraitComposition: 	#()
		aBlock: 	[ self
	private_subclass: aName
	instanceVariableNames: someInstanceVar...etc...
		newClass: 	nil
	Receiver's instance variables: 
		superclass: 	ProtoObject
		methodDict: 	a MethodDictionary(size 408)
		format: 	0
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{BalloonState. UndefinedObject. Boolean. FillStyle. ConnectionQueue...etc...
		name: 	#Object
		classPool: 	a Dictionary(#DependentsFields->a WeakIdentityKeyDictionary(TextStyl...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Objects'
		traitComposition: 	{}
		localSelectors: 	nil


SystemDictionary(Dictionary)>>at:ifPresent:ifAbsent:
	Receiver: a SystemDictionary(lots of globals)
	Arguments and temporary variables: 
		key: 	IDM
		aPresentBlock: 	[ :old | 
| copyOfOld newClass |
copyOfOld := old copy.

"Modify...etc...
		anAbsentBlock: 	[ | newClass |
"Create the class and set the trait composition"
...etc...
	Receiver's instance variables: 
		tally: 	6620
		array: 	an Array(#UTF8InvalidText->UTF8InvalidText #GTSpotterDebuggingExceptionH...etc...
		cachedClassNames: 	an OrderedCollection(#AColorSelectorMorph #AGroupContentHasBe...etc...
		cachedNonClassNames: 	an OrderedCollection(#ActiveEvent #ActiveHand #ActiveWorld...etc...


Object class(Class)>>subclass:uses:with:
	Receiver: Object
	Arguments and temporary variables: 
		aName: 	IDM
		aTraitComposition: 	#()
		aBlock: 	[ self
	private_subclass: aName
	instanceVariableNames: someInstanceVar...etc...
	Receiver's instance variables: 
		superclass: 	ProtoObject
		methodDict: 	a MethodDictionary(size 408)
		format: 	0
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{BalloonState. UndefinedObject. Boolean. FillStyle. ConnectionQueue...etc...
		name: 	#Object
		classPool: 	a Dictionary(#DependentsFields->a WeakIdentityKeyDictionary(TextStyl...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Objects'
		traitComposition: 	{}
		localSelectors: 	nil


Object class(Class)>>subclass:uses:instanceVariableNames:classVariableNames:poolDictionaries:package:
	Receiver: Object
	Arguments and temporary variables: 
		aName: 	IDM
		aTraitCompositionOrArray: 	#()
		someInstanceVariableNames: 	''
		someClassVariableNames: 	''
		someSharedPoolNames: 	''
		aCategory: 	'MetaProg'
	Receiver's instance variables: 
		superclass: 	ProtoObject
		methodDict: 	a MethodDictionary(size 408)
		format: 	0
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{BalloonState. UndefinedObject. Boolean. FillStyle. ConnectionQueue...etc...
		name: 	#Object
		classPool: 	a Dictionary(#DependentsFields->a WeakIdentityKeyDictionary(TextStyl...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Objects'
		traitComposition: 	{}
		localSelectors: 	nil


Object class(Class)>>subclass:instanceVariableNames:classVariableNames:poolDictionaries:package:
	Receiver: Object
	Arguments and temporary variables: 
		t: 	IDM
		f: 	''
		d: 	''
		s: 	''
		cat: 	'MetaProg'
	Receiver's instance variables: 
		superclass: 	ProtoObject
		methodDict: 	a MethodDictionary(size 408)
		format: 	0
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{BalloonState. UndefinedObject. Boolean. FillStyle. ConnectionQueue...etc...
		name: 	#Object
		classPool: 	a Dictionary(#DependentsFields->a WeakIdentityKeyDictionary(TextStyl...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Objects'
		traitComposition: 	{}
		localSelectors: 	nil


Object class(Class)>>subclass:instanceVariableNames:classVariableNames:package:
	Receiver: Object
	Arguments and temporary variables: 
		aSubclassSymbol: 	IDM
		instVarNames: 	''
		classVarNames: 	''
		aPackageSymbol: 	'MetaProg'
	Receiver's instance variables: 
		superclass: 	ProtoObject
		methodDict: 	a MethodDictionary(size 408)
		format: 	0
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{BalloonState. UndefinedObject. Boolean. FillStyle. ConnectionQueue...etc...
		name: 	#Object
		classPool: 	a Dictionary(#DependentsFields->a WeakIdentityKeyDictionary(TextStyl...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Objects'
		traitComposition: 	{}
		localSelectors: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	a ReadStream
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	^ Object
		subclass: IDM
		instanceVariableNames: ''
		classVariable...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


NautilusUI(AbstractTool)>>compileANewClassFrom:notifying:startingFrom:
	Receiver: a NautilusUI
	Arguments and temporary variables: 
		aString: 	'Object subclass: IDM
	instanceVariableNames: ''''
	classVariableNames...etc...
		aController: 	a RubScrolledTextMorph(537463296)
		aClass: 	IDM
		oldClass: 	Object
		class: 	nil
		newClassName: 	'IDM'
		defTokens: 	an OrderedCollection('Object' 'subclass:' 'IDM' 'instanceVariableNam...etc...
		keywdIx: 	2
		envt: 	a SystemDictionary(lots of globals)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		announceur: 	nil
		model: 	a Nautilus
		window: 	a NautilusWindow(1021156352)
		sourceCodePanel: 	a PanelMorph(832888064)
		fullDisplayedComment: 	false
		sourceCodeContainer: 	a PanelMorph(1054231808)
		shouldUpdateTitle: 	true
		contentSelection: 	a Text for ''
		acceptor: 	a ClassOrMethodDefinitionAcceptor
		commentWidget: 	nil
		sourceTextWidget: 	a RubScrolledTextMorph(537463296)
		sourceCodeSelectionInterval: 	(18 to: 17)
		sourceTextModel: 	a RubScrolledTextModel
		methodClassifier: 	nil
		commentTextModel: 	a RubScrolledTextModel
		instanceButtonWidget: 	a PluggableToggleButtonMorph(1068761344)
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageWidget
		packagePatternString: 	'MetaProg'
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(669064448)


NautilusUI(AbstractNautilusUI)>>compileAClassFrom:notifying:
	Receiver: a NautilusUI
	Arguments and temporary variables: 
		aString: 	'Object subclass: IDM
	instanceVariableNames: ''''
	classVariableNames...etc...
		aController: 	a RubScrolledTextMorph(537463296)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		announceur: 	nil
		model: 	a Nautilus
		window: 	a NautilusWindow(1021156352)
		sourceCodePanel: 	a PanelMorph(832888064)
		fullDisplayedComment: 	false
		sourceCodeContainer: 	a PanelMorph(1054231808)
		shouldUpdateTitle: 	true
		contentSelection: 	a Text for ''
		acceptor: 	a ClassOrMethodDefinitionAcceptor
		commentWidget: 	nil
		sourceTextWidget: 	a RubScrolledTextMorph(537463296)
		sourceCodeSelectionInterval: 	(18 to: 17)
		sourceTextModel: 	a RubScrolledTextModel
		methodClassifier: 	nil
		commentTextModel: 	a RubScrolledTextModel
		instanceButtonWidget: 	a PluggableToggleButtonMorph(1068761344)
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageWidget
		packagePatternString: 	'MetaProg'
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(669064448)


ClassOrMethodDefinitionAcceptor>>acceptInstanceSide:notifying:
	Receiver: a ClassOrMethodDefinitionAcceptor
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		model: 	a NautilusUI


ClassOrMethodDefinitionAcceptor>>accept:notifying:
	Receiver: a ClassOrMethodDefinitionAcceptor
	Arguments and temporary variables: 
		source: 	'Object subclass: IDM
	instanceVariableNames: ''''
	classVariableNames:...etc...
		aController: 	a RubScrolledTextMorph(537463296)
	Receiver's instance variables: 
		model: 	a NautilusUI


NautilusUI>>compileSource:notifying:
	Receiver: a NautilusUI
	Arguments and temporary variables: 
		aText: 	'Object subclass: IDM
	instanceVariableNames: ''''
	classVariableNames: ...etc...
		aController: 	a RubScrolledTextMorph(537463296)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		announceur: 	nil
		model: 	a Nautilus
		window: 	a NautilusWindow(1021156352)
		sourceCodePanel: 	a PanelMorph(832888064)
		fullDisplayedComment: 	false
		sourceCodeContainer: 	a PanelMorph(1054231808)
		shouldUpdateTitle: 	true
		contentSelection: 	a Text for ''
		acceptor: 	a ClassOrMethodDefinitionAcceptor
		commentWidget: 	nil
		sourceTextWidget: 	a RubScrolledTextMorph(537463296)
		sourceCodeSelectionInterval: 	(18 to: 17)
		sourceTextModel: 	a RubScrolledTextModel
		methodClassifier: 	nil
		commentTextModel: 	a RubScrolledTextModel
		instanceButtonWidget: 	a PluggableToggleButtonMorph(1068761344)
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageWidget
		packagePatternString: 	'MetaProg'
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(669064448)


NautilusUI(AbstractNautilusUI)>>whenTextAcceptedInView:
	Receiver: a NautilusUI
	Arguments and temporary variables: 
		anAnnouncement: 	a RubTextAccepted
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		announceur: 	nil
		model: 	a Nautilus
		window: 	a NautilusWindow(1021156352)
		sourceCodePanel: 	a PanelMorph(832888064)
		fullDisplayedComment: 	false
		sourceCodeContainer: 	a PanelMorph(1054231808)
		shouldUpdateTitle: 	true
		contentSelection: 	a Text for ''
		acceptor: 	a ClassOrMethodDefinitionAcceptor
		commentWidget: 	nil
		sourceTextWidget: 	a RubScrolledTextMorph(537463296)
		sourceCodeSelectionInterval: 	(18 to: 17)
		sourceTextModel: 	a RubScrolledTextModel
		methodClassifier: 	nil
		commentTextModel: 	a RubScrolledTextModel
		instanceButtonWidget: 	a PluggableToggleButtonMorph(1068761344)
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageWidget
		packagePatternString: 	'MetaProg'
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(669064448)


MessageSend>>value:
	Receiver: MessageSend(#whenTextAcceptedInView: -> a NautilusUI)
	Arguments and temporary variables: 
		anObject: 	a RubTextAccepted
	Receiver's instance variables: 
		receiver: 	a NautilusUI
		selector: 	#whenTextAcceptedInView:
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#whenTextAcceptedInView: -> a NautilusUI)
	Arguments and temporary variables: 
		arg: 	a RubTextAccepted
	Receiver's instance variables: 
		receiver: 	a NautilusUI
		selector: 	#whenTextAcceptedInView:
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#whenTextAcceptedInView: -> a NautilusUI)
	Arguments and temporary variables: 
		arg1: 	a RubTextAccepted
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NautilusUI
		selector: 	#whenTextAcceptedInView:
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a RubTextAccepted
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	RubTextAccepted
		subscriber: 	a NautilusUI
		action: 	MessageSend(#whenTextAcceptedInView: -> a NautilusUI)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a RubTextAccepted
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	RubTextAccepted
		subscriber: 	a NautilusUI
		action: 	MessageSend(#whenTextAcceptedInView: -> a NautilusUI)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a RubTextAccepted
		subs: 	an Array(an AnnouncementSubscription)
		startIndex: 	1
		index: 	1
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a RubTextAccepted
		subs: 	an Array(an AnnouncementSubscription)
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	1
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a RubTextAccepted
		subs: 	an Array(an AnnouncementSubscription)
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription)
		anAnnouncement: 	a RubTextAccepted
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()



--- The full stack ---
[ InvalidGlobalName
	signal: 'Global names should be symbols'
	for: aName ] in SlotClassBuilder>>name:
BlockClosure>>cull:
Context>>evaluateSignal:
Context>>handleSignal:
MessageNotUnderstood(Exception)>>signal
IDM class(Object)>>doesNotUnderstand: #asSymbol
[ name := aName asSymbol ] in SlotClassBuilder>>name:
BlockClosure>>on:do:
SlotClassBuilder>>name:
[ :builder | 
builder
	superclass: self;
	name: t;
	layoutClass: self classLayout class;
	slots: f asSlotCollection;
	sharedVariablesFromString: d;
	sharedPools: s;
	category: cat;
	environment: self environment;
	copyClassSlotsFromExistingClass ] in Object class(Class)>>private_subclass:instanceVariableNames:classVariableNames:poolDictionaries:category:
PharoClassInstaller class(AbstractClassInstaller class)>>make:
Object class(Class)>>private_subclass:instanceVariableNames:classVariableNames:poolDictionaries:category:
[ self
	private_subclass: aName
	instanceVariableNames: someInstanceVariableNames
	classVariableNames: someClassVariableNames
	poolDictionaries: someSharedPoolNames
	category: aCategory ] in Object class(Class)>>subclass:uses:instanceVariableNames:classVariableNames:poolDictionaries:package:
[ | newClass |
"Create the class and set the trait composition"
newClass := aBlock value.
newClass setTraitComposition: aTraitComposition asTraitComposition.
SystemAnnouncer uniqueInstance classModificationAppliedTo: newClass.
newClass ] in Object class(Class)>>subclass:uses:with:
SystemDictionary(Dictionary)>>at:ifPresent:ifAbsent:
Object class(Class)>>subclass:uses:with:
Object class(Class)>>subclass:uses:instanceVariableNames:classVariableNames:poolDictionaries:package:
Object class(Class)>>subclass:instanceVariableNames:classVariableNames:poolDictionaries:package:
Object class(Class)>>subclass:instanceVariableNames:classVariableNames:package:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
NautilusUI(AbstractTool)>>compileANewClassFrom:notifying:startingFrom:
NautilusUI(AbstractNautilusUI)>>compileAClassFrom:notifying:
ClassOrMethodDefinitionAcceptor>>acceptInstanceSide:notifying:
ClassOrMethodDefinitionAcceptor>>accept:notifying:
NautilusUI>>compileSource:notifying:
NautilusUI(AbstractNautilusUI)>>whenTextAcceptedInView:
MessageSend>>value:
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
Announcer>>announce:
RubScrolledTextMorph>>acceptContents
RubScrolledTextMorph>>whenTextAcceptRequest:
MessageSend>>value:
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(RubAbstractTextArea)>>announce:
RubEditingArea(RubAbstractTextArea)>>acceptContents
RubSmalltalkEditor(RubTextEditor)>>accept
[ :target | target editor accept ] in RubTextEditor class>>buildShortcutsOn:
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryBinding>>completeMatch:buffer:
[ :l | l completeMatch: self buffer: aBuffer ] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andDo: aBlock ] in KMCategory>>onMatchWith:notify:andDo:
Set>>do:
KMCategory>>onMatchWith:notify:andDo:
KMCategoryBinding>>verifyMatchWith:notifying:thenDoing:
[ :aTarget | 
"nice hack to stop in the first listener"
aTarget
	verifyMatchWith: anEventBuffer
	notifying: self
	thenDoing: [ ^ self ] ] in KMDispatcher>>dispatch:
OrderedCollection>>do:
KMDispatcher>>dispatch:
KMTarget>>dispatch:
[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstance buffer copy.
aKeyboardEvent wasHandled
	ifTrue: [ ^ self ] ] in KMDispatchChain>>dispatch:
KMDispatchChain>>do:
KMDispatchChain>>dispatch:
KMDispatcher>>dispatchKeystroke:
RubEditingArea(Morph)>>dispatchKeystrokeForEvent:
RubEditingArea(RubAbstractTextArea)>>handleKeystroke:
KeyboardEvent>>sentTo:
RubEditingArea(Morph)>>handleEvent:
RubEditingArea(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
#newSubclass was sent to nil
28 September 2018 10:38:33.516632 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

UndefinedObject(Object)>>doesNotUnderstand: #newSubclass
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	newSubclass
		exception: 	MessageNotUnderstood: receiver of "newSubclass" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	a ReadStream
		itsSelection: 	a Text for ''
		itsSelectionString: 	''
	Receiver's instance variables: 
		ast: 	DoIt
	^ class newSubclass
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(472857600)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(472857600)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1006726912)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(472857600)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@69)
		owner: 	a TransformWithLayoutMorph(735591936)
		submorphs: 	an Array(a RubPrimarySelectionMorph(320139264) a RubCursor(257787904...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (63825664) [other:  (announcer -> an Announcer) (km...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(368110336)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(257787904)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(52810496))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(370.0@99.0)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1006726912)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1031)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1031x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(669064448))(a SearchMorp...etc...
		lastStepTime: 	2636947
		lastStepMessage: 	nil
		lastCycleTime: 	2636969
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(257787904)))
		lastAlarmTime: 	2636947
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1031)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(54672896) a Nau...etc...
		fullBounds: 	(0@0) corner: (1920@1031)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (303216896) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1031)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1031x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(669064448))(a SearchMorp...etc...
		lastStepTime: 	2636947
		lastStepMessage: 	nil
		lastCycleTime: 	2636969
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(257787904)))
		lastAlarmTime: 	2636947
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1031)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1031x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(669064448))(a SearchMorp...etc...
		lastStepTime: 	2636947
		lastStepMessage: 	nil
		lastCycleTime: 	2636969
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(257787904)))
		lastAlarmTime: 	2636947
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1031)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(54672896) a Nau...etc...
		fullBounds: 	(0@0) corner: (1920@1031)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (303216896) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #newSubclass
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
#newSubclass was sent to nil
28 September 2018 10:38:38.538721 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

UndefinedObject(Object)>>doesNotUnderstand: #newSubclass
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	newSubclass
		exception: 	MessageNotUnderstood: receiver of "newSubclass" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	a ReadStream
		itsSelection: 	a Text for ''
		itsSelectionString: 	''
	Receiver's instance variables: 
		ast: 	DoIt
	^ class newSubclass
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(472857600)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(472857600)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1006726912)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(472857600)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@69)
		owner: 	a TransformWithLayoutMorph(735591936)
		submorphs: 	an Array(a RubPrimarySelectionMorph(320139264) a RubCursor(257787904...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (63825664) [other:  (announcer -> an Announcer) (km...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(368110336)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(257787904)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(260236032))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(370.0@99.0)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1006726912)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1031)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1031x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(367625472))(a SearchMorp...etc...
		lastStepTime: 	2641969
		lastStepMessage: 	nil
		lastCycleTime: 	2641993
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(257787904)))
		lastAlarmTime: 	2641969
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1031)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(54672896) a Nau...etc...
		fullBounds: 	(0@0) corner: (1920@1031)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (303216896) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1031)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1031x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(367625472))(a SearchMorp...etc...
		lastStepTime: 	2641969
		lastStepMessage: 	nil
		lastCycleTime: 	2641993
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(257787904)))
		lastAlarmTime: 	2641969
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1031)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1031x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(367625472))(a SearchMorp...etc...
		lastStepTime: 	2641969
		lastStepMessage: 	nil
		lastCycleTime: 	2641993
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(257787904)))
		lastAlarmTime: 	2641969
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1031)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(54672896) a Nau...etc...
		fullBounds: 	(0@0) corner: (1920@1031)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (303216896) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #newSubclass
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of Metaclass did not understand #newSubclass
28 September 2018 10:38:45.450583 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

Metaclass(Object)>>doesNotUnderstand: #newSubclass
	Receiver: String class
	Arguments and temporary variables: 
		aMessage: 	newSubclass
		exception: 	MessageNotUnderstood: Metaclass>>newSubclass
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	ArrayedCollection class
		methodDict: 	a MethodDictionary(#asExternalTypeOn:->String class>>#asExternalTyp...etc...
		format: 	65550
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		thisClass: 	String
		traitComposition: 	{}
		localSelectors: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	a ReadStream
		itsSelection: 	a Text for ''
		itsSelectionString: 	''
	Receiver's instance variables: 
		ast: 	DoIt
	^ String class newSubclass
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(472857600)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | 
textMorph shoutStyler style: textMorph text.
GLMPrintPoppe...etc...
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(472857600)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1006726912)
		textModel: 	a GLMRubricSmalltalkTextModel


MorphicAlarm(MessageSend)>>value
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	2648890
		numArgs: 	0


MorphicAlarm>>value:
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 
		anArgument: 	2648905
		nArgs: 	0
	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	2648890
		numArgs: 	0


WorldState>>triggerAlarmsBefore:
	Receiver: a WorldState
	Arguments and temporary variables: 
		nowTime: 	2648905
		pending: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(257787904)))
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1031)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1031x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(367625472))(a SearchMorp...etc...
		lastStepTime: 	2648884
		lastStepMessage: 	nil
		lastCycleTime: 	2648905
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(257787904)))
		lastAlarmTime: 	2648884
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>runLocalStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		now: 	2648905
		morphToStep: 	nil
		stepTime: 	nil
		priorWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1031)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1031x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(367625472))(a SearchMorp...etc...
		lastStepTime: 	2648884
		lastStepMessage: 	nil
		lastCycleTime: 	2648905
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(257787904)))
		lastAlarmTime: 	2648884
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	nil
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1031)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1031x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(367625472))(a SearchMorp...etc...
		lastStepTime: 	2648884
		lastStepMessage: 	nil
		lastCycleTime: 	2648905
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(257787904)))
		lastAlarmTime: 	2648884
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1031)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(54672896) a Nau...etc...
		fullBounds: 	(0@0) corner: (1920@1031)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (303216896) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1031)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1031x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(367625472))(a SearchMorp...etc...
		lastStepTime: 	2648884
		lastStepMessage: 	nil
		lastCycleTime: 	2648905
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(257787904)))
		lastAlarmTime: 	2648884
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1031)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1031x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(367625472))(a SearchMorp...etc...
		lastStepTime: 	2648884
		lastStepMessage: 	nil
		lastCycleTime: 	2648905
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(257787904)))
		lastAlarmTime: 	2648884
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1031)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(54672896) a Nau...etc...
		fullBounds: 	(0@0) corner: (1920@1031)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (303216896) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
Metaclass(Object)>>doesNotUnderstand: #newSubclass
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
MorphicAlarm(MessageSend)>>value
MorphicAlarm>>value:
WorldState>>triggerAlarmsBefore:
WorldState>>runLocalStepMethodsIn:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
#newSubclass was sent to nil
28 September 2018 10:38:51.151153 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

UndefinedObject(Object)>>doesNotUnderstand: #newSubclass
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	newSubclass
		exception: 	MessageNotUnderstood: receiver of "newSubclass" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	a ReadStream
		itsSelection: 	a Text for ''
		itsSelectionString: 	''
	Receiver's instance variables: 
		ast: 	DoIt
	^ class newSubclass
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(472857600)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | 
textMorph shoutStyler style: textMorph text.
GLMPrintPoppe...etc...
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(472857600)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1006726912)
		textModel: 	a GLMRubricSmalltalkTextModel


MorphicAlarm(MessageSend)>>value
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	2654592
		numArgs: 	0


MorphicAlarm>>value:
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 
		anArgument: 	2654608
		nArgs: 	0
	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	2654592
		numArgs: 	0


WorldState>>triggerAlarmsBefore:
	Receiver: a WorldState
	Arguments and temporary variables: 
		nowTime: 	2654608
		pending: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(257787904)))
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1031)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1031x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(669064448))(a SearchMorp...etc...
		lastStepTime: 	2654587
		lastStepMessage: 	nil
		lastCycleTime: 	2654608
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(257787904)))
		lastAlarmTime: 	2654587
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>runLocalStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		now: 	2654608
		morphToStep: 	nil
		stepTime: 	nil
		priorWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1031)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1031x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(669064448))(a SearchMorp...etc...
		lastStepTime: 	2654587
		lastStepMessage: 	nil
		lastCycleTime: 	2654608
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(257787904)))
		lastAlarmTime: 	2654587
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	nil
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1031)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1031x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(669064448))(a SearchMorp...etc...
		lastStepTime: 	2654587
		lastStepMessage: 	nil
		lastCycleTime: 	2654608
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(257787904)))
		lastAlarmTime: 	2654587
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1031)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(54672896) a Nau...etc...
		fullBounds: 	(0@0) corner: (1920@1031)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (303216896) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1031)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1031x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(669064448))(a SearchMorp...etc...
		lastStepTime: 	2654587
		lastStepMessage: 	nil
		lastCycleTime: 	2654608
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(257787904)))
		lastAlarmTime: 	2654587
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1031)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1031x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(669064448))(a SearchMorp...etc...
		lastStepTime: 	2654587
		lastStepMessage: 	nil
		lastCycleTime: 	2654608
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(257787904)))
		lastAlarmTime: 	2654587
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1031)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(54672896) a Nau...etc...
		fullBounds: 	(0@0) corner: (1920@1031)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (303216896) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #newSubclass
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
MorphicAlarm(MessageSend)>>value
MorphicAlarm>>value:
WorldState>>triggerAlarmsBefore:
WorldState>>runLocalStepMethodsIn:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of Metaclass did not understand #grow
28 September 2018 10:47:44.99616 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

Metaclass(Object)>>doesNotUnderstand: #grow
	Receiver: Pile class
	Arguments and temporary variables: 
		aMessage: 	grow
		exception: 	MessageNotUnderstood: Metaclass>>grow
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	Object class
		methodDict: 	a MethodDictionary(#example->Pile class>>#example #initialize->Pile...etc...
		format: 	65550
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		thisClass: 	Pile
		traitComposition: 	{}
		localSelectors: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	a ReadStream
		itsSelection: 	a Text for ''
		itsSelectionString: 	''
	Receiver's instance variables: 
		ast: 	DoIt
	^ Pile class grow
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(472857600)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | 
textMorph shoutStyler style: textMorph text.
GLMPrintPoppe...etc...
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(472857600)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1006726912)
		textModel: 	a GLMRubricSmalltalkTextModel


MorphicAlarm(MessageSend)>>value
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	3188421
		numArgs: 	0


MorphicAlarm>>value:
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 
		anArgument: 	3188436
		nArgs: 	0
	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	3188421
		numArgs: 	0


WorldState>>triggerAlarmsBefore:
	Receiver: a WorldState
	Arguments and temporary variables: 
		nowTime: 	3188436
		pending: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(257787904)))
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1031)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1031x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(367625472))(a SearchMorp...etc...
		lastStepTime: 	3188414
		lastStepMessage: 	nil
		lastCycleTime: 	3188436
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(257787904)))
		lastAlarmTime: 	3188414
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>runLocalStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		now: 	3188436
		morphToStep: 	nil
		stepTime: 	nil
		priorWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1031)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1031x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(367625472))(a SearchMorp...etc...
		lastStepTime: 	3188414
		lastStepMessage: 	nil
		lastCycleTime: 	3188436
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(257787904)))
		lastAlarmTime: 	3188414
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	nil
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1031)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1031x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(367625472))(a SearchMorp...etc...
		lastStepTime: 	3188414
		lastStepMessage: 	nil
		lastCycleTime: 	3188436
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(257787904)))
		lastAlarmTime: 	3188414
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1031)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(54672896) a Nau...etc...
		fullBounds: 	(0@0) corner: (1920@1031)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (303216896) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1031)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1031x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(367625472))(a SearchMorp...etc...
		lastStepTime: 	3188414
		lastStepMessage: 	nil
		lastCycleTime: 	3188436
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(257787904)))
		lastAlarmTime: 	3188414
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1031)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1031x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(367625472))(a SearchMorp...etc...
		lastStepTime: 	3188414
		lastStepMessage: 	nil
		lastCycleTime: 	3188436
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(257787904)))
		lastAlarmTime: 	3188414
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1031)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(54672896) a Nau...etc...
		fullBounds: 	(0@0) corner: (1920@1031)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (303216896) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
Metaclass(Object)>>doesNotUnderstand: #grow
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
MorphicAlarm(MessageSend)>>value
MorphicAlarm>>value:
WorldState>>triggerAlarmsBefore:
WorldState>>runLocalStepMethodsIn:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of Pile class did not understand #grow
28 September 2018 10:50:22.821371 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

Pile class(Object)>>doesNotUnderstand: #grow
	Receiver: Pile
	Arguments and temporary variables: 
		aMessage: 	grow
		exception: 	MessageNotUnderstood: Pile class>>grow
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#capacity->Pile>>#capacity #do:->Pile>>#do: #gro...etc...
		format: 	65539
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{PileTypee}
		name: 	#Pile
		classPool: 	a Dictionary(#tailleDefaut->5 )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#MetaProg
		traitComposition: 	{}
		localSelectors: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	a ReadStream
		itsSelection: 	a Text for ''
		itsSelectionString: 	''
	Receiver's instance variables: 
		ast: 	DoIt
	^ Pile grow
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(472857600)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | 
textMorph shoutStyler style: textMorph text.
GLMPrintPoppe...etc...
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(472857600)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1006726912)
		textModel: 	a GLMRubricSmalltalkTextModel


MorphicAlarm(MessageSend)>>value
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	3346262
		numArgs: 	0


MorphicAlarm>>value:
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 
		anArgument: 	3346278
		nArgs: 	0
	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	3346262
		numArgs: 	0


WorldState>>triggerAlarmsBefore:
	Receiver: a WorldState
	Arguments and temporary variables: 
		nowTime: 	3346278
		pending: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(257787904)))
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1031)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1031x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(425781760))(a DropList...etc...
		lastStepTime: 	3346254
		lastStepMessage: 	nil
		lastCycleTime: 	3346278
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(257787904)))
		lastAlarmTime: 	3346254
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>runLocalStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		now: 	3346278
		morphToStep: 	nil
		stepTime: 	nil
		priorWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1031)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1031x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(425781760))(a DropList...etc...
		lastStepTime: 	3346254
		lastStepMessage: 	nil
		lastCycleTime: 	3346278
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(257787904)))
		lastAlarmTime: 	3346254
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	nil
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1031)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1031x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(425781760))(a DropList...etc...
		lastStepTime: 	3346254
		lastStepMessage: 	nil
		lastCycleTime: 	3346278
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(257787904)))
		lastAlarmTime: 	3346254
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1031)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(54672896) a Nau...etc...
		fullBounds: 	(0@0) corner: (1920@1031)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (303216896) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1031)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1031x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(425781760))(a DropList...etc...
		lastStepTime: 	3346254
		lastStepMessage: 	nil
		lastCycleTime: 	3346278
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(257787904)))
		lastAlarmTime: 	3346254
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1031)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1031x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(425781760))(a DropList...etc...
		lastStepTime: 	3346254
		lastStepMessage: 	nil
		lastCycleTime: 	3346278
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(257787904)))
		lastAlarmTime: 	3346254
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1031)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(54672896) a Nau...etc...
		fullBounds: 	(0@0) corner: (1920@1031)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (303216896) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
Pile class(Object)>>doesNotUnderstand: #grow
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
MorphicAlarm(MessageSend)>>value
MorphicAlarm>>value:
WorldState>>triggerAlarmsBefore:
WorldState>>runLocalStepMethodsIn:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of Pile class did not understand #grow
28 September 2018 10:50:25.423769 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

Pile class(Object)>>doesNotUnderstand: #grow
	Receiver: Pile
	Arguments and temporary variables: 
		aMessage: 	grow
		exception: 	MessageNotUnderstood: Pile class>>grow
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#capacity->Pile>>#capacity #do:->Pile>>#do: #gro...etc...
		format: 	65539
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{PileTypee}
		name: 	#Pile
		classPool: 	a Dictionary(#tailleDefaut->5 )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#MetaProg
		traitComposition: 	{}
		localSelectors: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	a ReadStream
		itsSelection: 	a Text for ''
		itsSelectionString: 	''
	Receiver's instance variables: 
		ast: 	DoIt
	^ Pile grow
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(472857600)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | 
textMorph shoutStyler style: textMorph text.
GLMPrintPoppe...etc...
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(472857600)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1006726912)
		textModel: 	a GLMRubricSmalltalkTextModel


MorphicAlarm(MessageSend)>>value
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	3348865
		numArgs: 	0


MorphicAlarm>>value:
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 
		anArgument: 	3348878
		nArgs: 	0
	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	3348865
		numArgs: 	0


WorldState>>triggerAlarmsBefore:
	Receiver: a WorldState
	Arguments and temporary variables: 
		nowTime: 	3348878
		pending: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(257787904)))
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1031)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1031x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(425781760))(a DropList...etc...
		lastStepTime: 	3348857
		lastStepMessage: 	nil
		lastCycleTime: 	3348878
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(257787904)))
		lastAlarmTime: 	3348857
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>runLocalStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		now: 	3348878
		morphToStep: 	nil
		stepTime: 	nil
		priorWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1031)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1031x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(425781760))(a DropList...etc...
		lastStepTime: 	3348857
		lastStepMessage: 	nil
		lastCycleTime: 	3348878
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(257787904)))
		lastAlarmTime: 	3348857
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	nil
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1031)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1031x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(425781760))(a DropList...etc...
		lastStepTime: 	3348857
		lastStepMessage: 	nil
		lastCycleTime: 	3348878
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(257787904)))
		lastAlarmTime: 	3348857
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1031)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(54672896) a Nau...etc...
		fullBounds: 	(0@0) corner: (1920@1031)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (303216896) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1031)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1031x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(425781760))(a DropList...etc...
		lastStepTime: 	3348857
		lastStepMessage: 	nil
		lastCycleTime: 	3348878
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(257787904)))
		lastAlarmTime: 	3348857
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1031)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1031x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(425781760))(a DropList...etc...
		lastStepTime: 	3348857
		lastStepMessage: 	nil
		lastCycleTime: 	3348878
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(257787904)))
		lastAlarmTime: 	3348857
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1031)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(54672896) a Nau...etc...
		fullBounds: 	(0@0) corner: (1920@1031)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (303216896) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
Pile class(Object)>>doesNotUnderstand: #grow
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
MorphicAlarm(MessageSend)>>value
MorphicAlarm>>value:
WorldState>>triggerAlarmsBefore:
WorldState>>runLocalStepMethodsIn:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of Pile class did not understand #grow
28 September 2018 10:50:29.899461 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

Pile class(Object)>>doesNotUnderstand: #grow
	Receiver: Pile
	Arguments and temporary variables: 
		aMessage: 	grow
		exception: 	MessageNotUnderstood: Pile class>>grow
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#capacity->Pile>>#capacity #do:->Pile>>#do: #gro...etc...
		format: 	65539
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{PileTypee}
		name: 	#Pile
		classPool: 	a Dictionary(#tailleDefaut->5 )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#MetaProg
		traitComposition: 	{}
		localSelectors: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	a ReadStream
		itsSelection: 	a Text for ''
		itsSelectionString: 	''
	Receiver's instance variables: 
		ast: 	DoIt
	^ p grow
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(472857600)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | 
textMorph shoutStyler style: textMorph text.
GLMPrintPoppe...etc...
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(472857600)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1006726912)
		textModel: 	a GLMRubricSmalltalkTextModel


MorphicAlarm(MessageSend)>>value
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	3353340
		numArgs: 	0


MorphicAlarm>>value:
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 
		anArgument: 	3353356
		nArgs: 	0
	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	3353340
		numArgs: 	0


WorldState>>triggerAlarmsBefore:
	Receiver: a WorldState
	Arguments and temporary variables: 
		nowTime: 	3353356
		pending: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(257787904)))
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1031)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1031x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(367625472))(a SearchMorp...etc...
		lastStepTime: 	3353332
		lastStepMessage: 	nil
		lastCycleTime: 	3353356
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(257787904)))
		lastAlarmTime: 	3353332
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>runLocalStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		now: 	3353356
		morphToStep: 	nil
		stepTime: 	nil
		priorWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1031)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1031x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(367625472))(a SearchMorp...etc...
		lastStepTime: 	3353332
		lastStepMessage: 	nil
		lastCycleTime: 	3353356
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(257787904)))
		lastAlarmTime: 	3353332
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	nil
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1031)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1031x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(367625472))(a SearchMorp...etc...
		lastStepTime: 	3353332
		lastStepMessage: 	nil
		lastCycleTime: 	3353356
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(257787904)))
		lastAlarmTime: 	3353332
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1031)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(54672896) a Nau...etc...
		fullBounds: 	(0@0) corner: (1920@1031)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (303216896) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1031)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1031x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(367625472))(a SearchMorp...etc...
		lastStepTime: 	3353332
		lastStepMessage: 	nil
		lastCycleTime: 	3353356
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(257787904)))
		lastAlarmTime: 	3353332
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1031)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1031x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(367625472))(a SearchMorp...etc...
		lastStepTime: 	3353332
		lastStepMessage: 	nil
		lastCycleTime: 	3353356
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(257787904)))
		lastAlarmTime: 	3353332
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1031)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(54672896) a Nau...etc...
		fullBounds: 	(0@0) corner: (1920@1031)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (303216896) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
Pile class(Object)>>doesNotUnderstand: #grow
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
MorphicAlarm(MessageSend)>>value
MorphicAlarm>>value:
WorldState>>triggerAlarmsBefore:
WorldState>>runLocalStepMethodsIn:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of Pile class did not understand #grow
28 September 2018 10:51:20.290882 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

Pile class(Object)>>doesNotUnderstand: #grow
	Receiver: Pile
	Arguments and temporary variables: 
		aMessage: 	grow
		exception: 	MessageNotUnderstood: Pile class>>grow
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#capacity->Pile>>#capacity #do:->Pile>>#do: #gro...etc...
		format: 	65539
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{PileTypee}
		name: 	#Pile
		classPool: 	a Dictionary(#tailleDefaut->5 )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#MetaProg
		traitComposition: 	{}
		localSelectors: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	a ReadStream
		itsSelection: 	a Text for ''
		itsSelectionString: 	''
	Receiver's instance variables: 
		ast: 	DoIt
	^ p grow
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(472857600)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | 
textMorph shoutStyler style: textMorph text.
GLMPrintPoppe...etc...
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(472857600)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1006726912)
		textModel: 	a GLMRubricSmalltalkTextModel


MorphicAlarm(MessageSend)>>value
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	3403732
		numArgs: 	0


MorphicAlarm>>value:
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 
		anArgument: 	3403743
		nArgs: 	0
	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	3403732
		numArgs: 	0


WorldState>>triggerAlarmsBefore:
	Receiver: a WorldState
	Arguments and temporary variables: 
		nowTime: 	3403743
		pending: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(257787904)))
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1031)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1031x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(97266688))(a DropListM...etc...
		lastStepTime: 	3403722
		lastStepMessage: 	nil
		lastCycleTime: 	3403743
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(257787904)))
		lastAlarmTime: 	3403722
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>runLocalStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		now: 	3403743
		morphToStep: 	nil
		stepTime: 	nil
		priorWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1031)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1031x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(97266688))(a DropListM...etc...
		lastStepTime: 	3403722
		lastStepMessage: 	nil
		lastCycleTime: 	3403743
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(257787904)))
		lastAlarmTime: 	3403722
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	nil
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1031)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1031x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(97266688))(a DropListM...etc...
		lastStepTime: 	3403722
		lastStepMessage: 	nil
		lastCycleTime: 	3403743
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(257787904)))
		lastAlarmTime: 	3403722
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1031)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(54672896) a Nau...etc...
		fullBounds: 	(0@0) corner: (1920@1031)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (303216896) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1031)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1031x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(97266688))(a DropListM...etc...
		lastStepTime: 	3403722
		lastStepMessage: 	nil
		lastCycleTime: 	3403743
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(257787904)))
		lastAlarmTime: 	3403722
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1031)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1031x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(97266688))(a DropListM...etc...
		lastStepTime: 	3403722
		lastStepMessage: 	nil
		lastCycleTime: 	3403743
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(257787904)))
		lastAlarmTime: 	3403722
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1031)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(54672896) a Nau...etc...
		fullBounds: 	(0@0) corner: (1920@1031)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (303216896) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
Pile class(Object)>>doesNotUnderstand: #grow
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
MorphicAlarm(MessageSend)>>value
MorphicAlarm>>value:
WorldState>>triggerAlarmsBefore:
WorldState>>runLocalStepMethodsIn:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of Pile class did not understand #grow
28 September 2018 10:51:34.186853 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

Pile class(Object)>>doesNotUnderstand: #grow
	Receiver: Pile
	Arguments and temporary variables: 
		aMessage: 	grow
		exception: 	MessageNotUnderstood: Pile class>>grow
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#capacity->Pile>>#capacity #do:->Pile>>#do: #gro...etc...
		format: 	65539
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{PileTypee}
		name: 	#Pile
		classPool: 	a Dictionary(#tailleDefaut->5 )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#MetaProg
		traitComposition: 	{}
		localSelectors: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	a ReadStream
		itsSelection: 	a Text for ''
		itsSelectionString: 	''
	Receiver's instance variables: 
		ast: 	DoIt
	^ p grow
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(472857600)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | 
textMorph shoutStyler style: textMorph text.
GLMPrintPoppe...etc...
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(472857600)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1006726912)
		textModel: 	a GLMRubricSmalltalkTextModel


MorphicAlarm(MessageSend)>>value
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	3417626
		numArgs: 	0


MorphicAlarm>>value:
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 
		anArgument: 	3417642
		nArgs: 	0
	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	3417626
		numArgs: 	0


WorldState>>triggerAlarmsBefore:
	Receiver: a WorldState
	Arguments and temporary variables: 
		nowTime: 	3417642
		pending: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(257787904)))
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1031)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1031x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(669064448))(a SearchMorp...etc...
		lastStepTime: 	3417621
		lastStepMessage: 	nil
		lastCycleTime: 	3417642
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(257787904)))
		lastAlarmTime: 	3417621
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>runLocalStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		now: 	3417642
		morphToStep: 	nil
		stepTime: 	nil
		priorWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1031)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1031x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(669064448))(a SearchMorp...etc...
		lastStepTime: 	3417621
		lastStepMessage: 	nil
		lastCycleTime: 	3417642
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(257787904)))
		lastAlarmTime: 	3417621
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	nil
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1031)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1031x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(669064448))(a SearchMorp...etc...
		lastStepTime: 	3417621
		lastStepMessage: 	nil
		lastCycleTime: 	3417642
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(257787904)))
		lastAlarmTime: 	3417621
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1031)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(54672896) a Nau...etc...
		fullBounds: 	(0@0) corner: (1920@1031)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (303216896) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1031)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1031x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(669064448))(a SearchMorp...etc...
		lastStepTime: 	3417621
		lastStepMessage: 	nil
		lastCycleTime: 	3417642
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(257787904)))
		lastAlarmTime: 	3417621
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1031)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1031x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(669064448))(a SearchMorp...etc...
		lastStepTime: 	3417621
		lastStepMessage: 	nil
		lastCycleTime: 	3417642
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(257787904)))
		lastAlarmTime: 	3417621
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1031)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(54672896) a Nau...etc...
		fullBounds: 	(0@0) corner: (1920@1031)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (303216896) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
Pile class(Object)>>doesNotUnderstand: #grow
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
MorphicAlarm(MessageSend)>>value
MorphicAlarm>>value:
WorldState>>triggerAlarmsBefore:
WorldState>>runLocalStepMethodsIn:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of Pile class did not understand #grow
28 September 2018 10:51:37.273144 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

Pile class(Object)>>doesNotUnderstand: #grow
	Receiver: Pile
	Arguments and temporary variables: 
		aMessage: 	grow
		exception: 	MessageNotUnderstood: Pile class>>grow
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#capacity->Pile>>#capacity #do:->Pile>>#do: #gro...etc...
		format: 	65539
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{PileTypee}
		name: 	#Pile
		classPool: 	a Dictionary(#tailleDefaut->5 )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#MetaProg
		traitComposition: 	{}
		localSelectors: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	a ReadStream
		itsSelection: 	a Text for ''
		itsSelectionString: 	''
	Receiver's instance variables: 
		ast: 	DoIt
	^ p grow
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(472857600)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | 
textMorph shoutStyler style: textMorph text.
GLMPrintPoppe...etc...
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(472857600)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1006726912)
		textModel: 	a GLMRubricSmalltalkTextModel


MorphicAlarm(MessageSend)>>value
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	3420710
		numArgs: 	0


MorphicAlarm>>value:
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 
		anArgument: 	3420728
		nArgs: 	0
	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	3420710
		numArgs: 	0


WorldState>>triggerAlarmsBefore:
	Receiver: a WorldState
	Arguments and temporary variables: 
		nowTime: 	3420728
		pending: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(257787904)))
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1031)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1031x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(669064448))(a SearchMorp...etc...
		lastStepTime: 	3420705
		lastStepMessage: 	nil
		lastCycleTime: 	3420728
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(257787904)))
		lastAlarmTime: 	3420705
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>runLocalStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		now: 	3420728
		morphToStep: 	nil
		stepTime: 	nil
		priorWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1031)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1031x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(669064448))(a SearchMorp...etc...
		lastStepTime: 	3420705
		lastStepMessage: 	nil
		lastCycleTime: 	3420728
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(257787904)))
		lastAlarmTime: 	3420705
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	nil
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1031)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1031x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(669064448))(a SearchMorp...etc...
		lastStepTime: 	3420705
		lastStepMessage: 	nil
		lastCycleTime: 	3420728
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(257787904)))
		lastAlarmTime: 	3420705
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1031)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(54672896) a Nau...etc...
		fullBounds: 	(0@0) corner: (1920@1031)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (303216896) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1031)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1031x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(669064448))(a SearchMorp...etc...
		lastStepTime: 	3420705
		lastStepMessage: 	nil
		lastCycleTime: 	3420728
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(257787904)))
		lastAlarmTime: 	3420705
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1031)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1031x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(669064448))(a SearchMorp...etc...
		lastStepTime: 	3420705
		lastStepMessage: 	nil
		lastCycleTime: 	3420728
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(257787904)))
		lastAlarmTime: 	3420705
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1031)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(54672896) a Nau...etc...
		fullBounds: 	(0@0) corner: (1920@1031)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (303216896) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
Pile class(Object)>>doesNotUnderstand: #grow
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
MorphicAlarm(MessageSend)>>value
MorphicAlarm>>value:
WorldState>>triggerAlarmsBefore:
WorldState>>runLocalStepMethodsIn:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
SubscriptOutOfBounds: 0
28 September 2018 10:51:45.130145 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

Array(Object)>>errorSubscriptBounds:
	Receiver: #(nil nil nil nil nil)
	Arguments and temporary variables: 
		index: 	0
	Receiver's instance variables: 
#(nil nil nil nil nil)

Array(Object)>>at:
	Receiver: #(nil nil nil nil nil)
	Arguments and temporary variables: 
		index: 	0
	Receiver's instance variables: 
#(nil nil nil nil nil)

Pile>>grow
	Receiver: une Pile, de taille: 10 contenant: 0 objets : (nil nil nil nil nil nil nil nil nil nil )
	Arguments and temporary variables: 
		nb: 	0
		oldc: 	#(nil nil nil nil nil)
		i: 	0
	Receiver's instance variables: 
		contenu: 	#(nil nil nil nil nil nil nil nil nil nil)
		index: 	0
		capacite: 	10


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	a ReadStream
		itsSelection: 	a Text for ''
		itsSelectionString: 	''
	Receiver's instance variables: 
		ast: 	DoIt
	^ p grow
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(472857600)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(472857600)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1006726912)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(472857600)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@50)
		owner: 	a TransformWithLayoutMorph(735591936)
		submorphs: 	an Array(a RubPrimarySelectionMorph(664724736) a RubCursor(257787904...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (63825664) [other:  (announcer -> an Announcer) (km...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(368110336)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(257787904)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(821658880))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1006726912)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1031)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1031x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(230693376))(a SearchMorp...etc...
		lastStepTime: 	3428559
		lastStepMessage: 	nil
		lastCycleTime: 	3428580
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(257787904)))
		lastAlarmTime: 	3428559
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1031)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(54672896) a Nau...etc...
		fullBounds: 	(0@0) corner: (1920@1031)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (303216896) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1031)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1031x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(230693376))(a SearchMorp...etc...
		lastStepTime: 	3428559
		lastStepMessage: 	nil
		lastCycleTime: 	3428580
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(257787904)))
		lastAlarmTime: 	3428559
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1031)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1031x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(230693376))(a SearchMorp...etc...
		lastStepTime: 	3428559
		lastStepMessage: 	nil
		lastCycleTime: 	3428580
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(257787904)))
		lastAlarmTime: 	3428559
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1031)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(54672896) a Nau...etc...
		fullBounds: 	(0@0) corner: (1920@1031)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (303216896) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
Array(Object)>>errorSubscriptBounds:
Array(Object)>>at:
Pile>>grow
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
SubscriptOutOfBounds: 0
28 September 2018 10:51:51.085095 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

Array(Object)>>errorSubscriptBounds:
	Receiver: #(nil nil nil nil nil nil nil nil nil nil)
	Arguments and temporary variables: 
		index: 	0
	Receiver's instance variables: 
#(nil nil nil nil nil nil nil nil nil nil)

Array(Object)>>at:
	Receiver: #(nil nil nil nil nil nil nil nil nil nil)
	Arguments and temporary variables: 
		index: 	0
	Receiver's instance variables: 
#(nil nil nil nil nil nil nil nil nil nil)

Pile>>grow
	Receiver: une Pile, de taille: 20 contenant: 0 objets : (nil nil nil nil nil nil nil nil nil nil nil...etc...
	Arguments and temporary variables: 
		nb: 	0
		oldc: 	#(nil nil nil nil nil nil nil nil nil nil)
		i: 	0
	Receiver's instance variables: 
		contenu: 	#(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil ...etc...
		index: 	0
		capacite: 	20


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	a ReadStream
		itsSelection: 	a Text for ''
		itsSelectionString: 	''
	Receiver's instance variables: 
		ast: 	DoIt
	^ p grow
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(472857600)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(472857600)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1006726912)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(472857600)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@50)
		owner: 	a TransformWithLayoutMorph(735591936)
		submorphs: 	an Array(a RubPrimarySelectionMorph(664724736) a RubCursor(257787904...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (63825664) [other:  (announcer -> an Announcer) (km...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(368110336)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(257787904)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(491038976))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1006726912)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1031)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1031x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(230693376))(a SearchMorp...etc...
		lastStepTime: 	3434516
		lastStepMessage: 	nil
		lastCycleTime: 	3434537
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(257787904)))
		lastAlarmTime: 	3434516
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1031)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(54672896) a Nau...etc...
		fullBounds: 	(0@0) corner: (1920@1031)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (303216896) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1031)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1031x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(230693376))(a SearchMorp...etc...
		lastStepTime: 	3434516
		lastStepMessage: 	nil
		lastCycleTime: 	3434537
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(257787904)))
		lastAlarmTime: 	3434516
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1031)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1031x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(230693376))(a SearchMorp...etc...
		lastStepTime: 	3434516
		lastStepMessage: 	nil
		lastCycleTime: 	3434537
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(257787904)))
		lastAlarmTime: 	3434516
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1031)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(54672896) a Nau...etc...
		fullBounds: 	(0@0) corner: (1920@1031)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (303216896) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
Array(Object)>>errorSubscriptBounds:
Array(Object)>>at:
Pile>>grow
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of IDM did not understand #CreateStuff
28 September 2018 10:54:30.548745 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

IDM(Object)>>doesNotUnderstand: #CreateStuff
	Receiver: an IDM
	Arguments and temporary variables: 
		aMessage: 	CreateStuff
		exception: 	MessageNotUnderstood: IDM>>CreateStuff
		resumeValue: 	nil
	Receiver's instance variables: 
an IDM

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	a ReadStream
		itsSelection: 	a Text for ''
		itsSelectionString: 	''
	Receiver's instance variables: 
		ast: 	DoIt
	^ i CreateStuff
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(472857600)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | 
textMorph shoutStyler style: textMorph text.
GLMPrintPoppe...etc...
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(472857600)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1006726912)
		textModel: 	a GLMRubricSmalltalkTextModel


MorphicAlarm(MessageSend)>>value
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	3593989
		numArgs: 	0


MorphicAlarm>>value:
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 
		anArgument: 	3594004
		nArgs: 	0
	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	3593989
		numArgs: 	0


WorldState>>triggerAlarmsBefore:
	Receiver: a WorldState
	Arguments and temporary variables: 
		nowTime: 	3594004
		pending: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(257787904)))
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1031)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1031x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(367625472))(a SearchMorp...etc...
		lastStepTime: 	3593983
		lastStepMessage: 	nil
		lastCycleTime: 	3594004
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(257787904)))
		lastAlarmTime: 	3593983
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>runLocalStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		now: 	3594004
		morphToStep: 	nil
		stepTime: 	nil
		priorWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1031)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1031x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(367625472))(a SearchMorp...etc...
		lastStepTime: 	3593983
		lastStepMessage: 	nil
		lastCycleTime: 	3594004
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(257787904)))
		lastAlarmTime: 	3593983
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	nil
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1031)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1031x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(367625472))(a SearchMorp...etc...
		lastStepTime: 	3593983
		lastStepMessage: 	nil
		lastCycleTime: 	3594004
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(257787904)))
		lastAlarmTime: 	3593983
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1031)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(54672896) a Nau...etc...
		fullBounds: 	(0@0) corner: (1920@1031)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (303216896) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1031)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1031x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(367625472))(a SearchMorp...etc...
		lastStepTime: 	3593983
		lastStepMessage: 	nil
		lastCycleTime: 	3594004
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(257787904)))
		lastAlarmTime: 	3593983
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1031)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1031x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(367625472))(a SearchMorp...etc...
		lastStepTime: 	3593983
		lastStepMessage: 	nil
		lastCycleTime: 	3594004
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(257787904)))
		lastAlarmTime: 	3593983
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1031)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(54672896) a Nau...etc...
		fullBounds: 	(0@0) corner: (1920@1031)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (303216896) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
IDM(Object)>>doesNotUnderstand: #CreateStuff
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
MorphicAlarm(MessageSend)>>value
MorphicAlarm>>value:
WorldState>>triggerAlarmsBefore:
WorldState>>runLocalStepMethodsIn:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of IDM did not understand #CreateStuff
28 September 2018 11:23:10.828753 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

IDM(Object)>>doesNotUnderstand: #CreateStuff
	Receiver: an IDM
	Arguments and temporary variables: 
		aMessage: 	CreateStuff
		exception: 	MessageNotUnderstood: IDM>>CreateStuff
		resumeValue: 	nil
	Receiver's instance variables: 
an IDM

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	a ReadStream
		itsSelection: 	a Text for ''
		itsSelectionString: 	''
	Receiver's instance variables: 
		ast: 	DoIt
	^ i CreateStuff
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(472857600)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(472857600)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1006726912)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(472857600)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@126)
		owner: 	a TransformWithLayoutMorph(735591936)
		submorphs: 	an Array(a RubPrimarySelectionMorph(271440640) a RubCursor(257787904...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (63825664) [other:  (announcer -> an Announcer) (km...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(368110336)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(257787904)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(851063808))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1006726912)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1031)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1031x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(367625472))(a SearchMorp...etc...
		lastStepTime: 	5314237
		lastStepMessage: 	nil
		lastCycleTime: 	5314258
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(257787904)))
		lastAlarmTime: 	5314237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1031)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(54672896) a Nau...etc...
		fullBounds: 	(0@0) corner: (1920@1031)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (303216896) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1031)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1031x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(367625472))(a SearchMorp...etc...
		lastStepTime: 	5314237
		lastStepMessage: 	nil
		lastCycleTime: 	5314258
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(257787904)))
		lastAlarmTime: 	5314237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1031)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1031x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(367625472))(a SearchMorp...etc...
		lastStepTime: 	5314237
		lastStepMessage: 	nil
		lastCycleTime: 	5314258
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(257787904)))
		lastAlarmTime: 	5314237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1031)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(54672896) a Nau...etc...
		fullBounds: 	(0@0) corner: (1920@1031)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (303216896) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
IDM(Object)>>doesNotUnderstand: #CreateStuff
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of IDM did not understand #CreateStuff
28 September 2018 11:23:15.193596 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

IDM(Object)>>doesNotUnderstand: #CreateStuff
	Receiver: an IDM
	Arguments and temporary variables: 
		aMessage: 	CreateStuff
		exception: 	MessageNotUnderstood: IDM>>CreateStuff
		resumeValue: 	nil
	Receiver's instance variables: 
an IDM

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	a ReadStream
		itsSelection: 	a Text for ''
		itsSelectionString: 	''
	Receiver's instance variables: 
		ast: 	DoIt
	^ i CreateStuff
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(472857600)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(472857600)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1006726912)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(472857600)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@126)
		owner: 	a TransformWithLayoutMorph(735591936)
		submorphs: 	an Array(a RubPrimarySelectionMorph(271440640) a RubCursor(257787904...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (63825664) [other:  (announcer -> an Announcer) (km...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(368110336)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(257787904)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(751438336))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1006726912)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1031)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1031x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(367625472))(a SearchMorp...etc...
		lastStepTime: 	5318622
		lastStepMessage: 	nil
		lastCycleTime: 	5318643
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(257787904)))
		lastAlarmTime: 	5318622
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1031)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(54672896) a Nau...etc...
		fullBounds: 	(0@0) corner: (1920@1031)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (303216896) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1031)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1031x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(367625472))(a SearchMorp...etc...
		lastStepTime: 	5318622
		lastStepMessage: 	nil
		lastCycleTime: 	5318643
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(257787904)))
		lastAlarmTime: 	5318622
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1031)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1031x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(367625472))(a SearchMorp...etc...
		lastStepTime: 	5318622
		lastStepMessage: 	nil
		lastCycleTime: 	5318643
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(257787904)))
		lastAlarmTime: 	5318622
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1031)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(54672896) a Nau...etc...
		fullBounds: 	(0@0) corner: (1920@1031)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (303216896) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
IDM(Object)>>doesNotUnderstand: #CreateStuff
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of ByteSymbol did not understand #addSelector:withMethod:
28 September 2018 11:23:35.425112 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

ByteSymbol(Object)>>doesNotUnderstand: #addSelector:withMethod:
	Receiver: #PileGrossissante
	Arguments and temporary variables: 
		aMessage: 	addSelector: #grow withMethod: Pile>>#grow
		exception: 	MessageNotUnderstood: ByteSymbol>>addSelector:withMethod:
		resumeValue: 	nil
	Receiver's instance variables: 
#PileGrossissante

IDM>>idmPile
	Receiver: an IDM
	Arguments and temporary variables: 

	Receiver's instance variables: 
an IDM

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'i:=IDM new.
i idmPile.'
		itsSelection: 	a Text for 'i:=IDM new.
i idmPile.'
		itsSelectionString: 	'i:=IDM new.
i idmPile.'
	Receiver's instance variables: 
		ast: 	DoIt
	i := IDM new.
	^ i idmPile
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(472857600)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(472857600)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1006726912)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(472857600)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@126)
		owner: 	a TransformWithLayoutMorph(735591936)
		submorphs: 	an Array(a RubPrimarySelectionMorph(839548928) a RubCursor(257787904...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (63825664) [other:  (announcer -> an Announcer) (km...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(368110336)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(257787904)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(261019392))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1006726912)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1031)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1031x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(870633728))(a DropList...etc...
		lastStepTime: 	5338848
		lastStepMessage: 	nil
		lastCycleTime: 	5338870
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(257787904)))
		lastAlarmTime: 	5338848
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1031)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(54672896) a Nau...etc...
		fullBounds: 	(0@0) corner: (1920@1031)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (303216896) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1031)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1031x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(870633728))(a DropList...etc...
		lastStepTime: 	5338848
		lastStepMessage: 	nil
		lastCycleTime: 	5338870
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(257787904)))
		lastAlarmTime: 	5338848
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1031)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1031x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(870633728))(a DropList...etc...
		lastStepTime: 	5338848
		lastStepMessage: 	nil
		lastCycleTime: 	5338870
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(257787904)))
		lastAlarmTime: 	5338848
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1031)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(54672896) a Nau...etc...
		fullBounds: 	(0@0) corner: (1920@1031)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (303216896) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
ByteSymbol(Object)>>doesNotUnderstand: #addSelector:withMethod:
IDM>>idmPile
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: Invalid definition string
28 September 2018 11:23:58.729639 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

RBAddClassChange class(Object)>>error:
	Receiver: RBAddClassChange
	Arguments and temporary variables: 
		aString: 	'Invalid definition string'
	Receiver's instance variables: 
		superclass: 	RBRefactoryDefinitionChange
		methodDict: 	a MethodDictionary(#asUndoOperation->RBAddClassChange>>#asUndoOpera...etc...
		format: 	65547
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#RBAddClassChange
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Refactoring-Changes'
		traitComposition: 	{}
		localSelectors: 	nil


RBAddClassChange class(RBRefactoryDefinitionChange class)>>definition:for:
	Receiver: RBAddClassChange
	Arguments and temporary variables: 
		aString: 	'Pile immediateSubclass: #PileGrossissante
	instanceVariableNames: '''...etc...
		aController: 	nil
		parseTree: 	RBMessageNode(Pile
	immediateSubclass: #PileGrossissante
	instanceVa...etc...
		context: 	a SmallDictionary()
	Receiver's instance variables: 
		superclass: 	RBRefactoryDefinitionChange
		methodDict: 	a MethodDictionary(#asUndoOperation->RBAddClassChange>>#asUndoOpera...etc...
		format: 	65547
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#RBAddClassChange
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Refactoring-Changes'
		traitComposition: 	{}
		localSelectors: 	nil


RBAddClassChange class(RBRefactoryDefinitionChange class)>>definition:
	Receiver: RBAddClassChange
	Arguments and temporary variables: 
		aString: 	'Pile immediateSubclass: #PileGrossissante
	instanceVariableNames: '''...etc...
	Receiver's instance variables: 
		superclass: 	RBRefactoryDefinitionChange
		methodDict: 	a MethodDictionary(#asUndoOperation->RBAddClassChange>>#asUndoOpera...etc...
		format: 	65547
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#RBAddClassChange
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Refactoring-Changes'
		traitComposition: 	{}
		localSelectors: 	nil


RBCompositeRefactoryChange>>defineClass:
	Receiver: a RBCompositeRefactoryChange
	Arguments and temporary variables: 
		aString: 	'Pile immediateSubclass: #PileGrossissante
	instanceVariableNames: '''...etc...
	Receiver's instance variables: 
		name: 	nil
		changes: 	an OrderedCollection()


[ :each | 
classChanges defineClass: each definition.
each class instVarNames
	do:
		[ :varName | classChanges addInstanceVariable: varName to: each class ].
each selectors
	do:
		[ :selector | classChanges compile: (each sourceCodeAt: selector) in: each ].
each class selectors
	do: [ :selector | 
		classChanges
			compile: (each class sourceCodeAt: selector)
			in: each class ] ] in RBRemoveClassChange>>asUndoOperation
	Receiver: PileGrossissante removeFromSystem!
	Arguments and temporary variables: 
		classChanges: 	a RBCompositeRefactoryChange
		each: 	PileGrossissante
	Receiver's instance variables: 
		name: 	nil
		className: 	#PileGrossissante
		isMeta: 	false


OrderedCollection>>do:
	Receiver: an OrderedCollection(PileGrossissante)
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
classChanges defineClass: each definition.
each class instVa...etc...
		index: 	1
	Receiver's instance variables: 
		array: 	{PileGrossissante}
		firstIndex: 	1
		lastIndex: 	1


RBRemoveClassChange>>asUndoOperation
	Receiver: PileGrossissante removeFromSystem!
	Arguments and temporary variables: 
		classChanges: 	a RBCompositeRefactoryChange
	Receiver's instance variables: 
		name: 	nil
		className: 	#PileGrossissante
		isMeta: 	false


RBRemoveClassChange(RBRefactoryClassChange)>>executeNotifying:
	Receiver: PileGrossissante removeFromSystem!
	Arguments and temporary variables: 
		aBlock: 	[  ]
		undo: 	nil
	Receiver's instance variables: 
		name: 	nil
		className: 	#PileGrossissante
		isMeta: 	false


RBRemoveClassChange(RBRefactoryChange)>>execute
	Receiver: PileGrossissante removeFromSystem!
	Arguments and temporary variables: 

	Receiver's instance variables: 
		name: 	nil
		className: 	#PileGrossissante
		isMeta: 	false


[ self addUndo: aRefactoringChange execute ] in RBRefactoryChangeManager>>performChange:
	Receiver: a RBRefactoryChangeManager
	Arguments and temporary variables: 
		aRefactoringChange: 	PileGrossissante removeFromSystem!
	Receiver's instance variables: 
		undo: 	an OrderedCollection(Remove Metaclass1 Remove Metaclass2 Remove Metaclass...etc...
		redo: 	an OrderedCollection()
		isPerformingRefactoring: 	true


BlockClosure>>ensure:
	Receiver: [ self addUndo: aRefactoringChange execute ]
	Arguments and temporary variables: 
		aBlock: 	[ isPerformingRefactoring := false ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	RBRefactoryChangeManager>>performChange:
		startpc: 	55
		numArgs: 	0


RBRefactoryChangeManager>>ignoreChangesWhile:
	Receiver: a RBRefactoryChangeManager
	Arguments and temporary variables: 
		aBlock: 	[ self addUndo: aRefactoringChange execute ]
	Receiver's instance variables: 
		undo: 	an OrderedCollection(Remove Metaclass1 Remove Metaclass2 Remove Metaclass...etc...
		redo: 	an OrderedCollection()
		isPerformingRefactoring: 	true


RBRefactoryChangeManager>>performChange:
	Receiver: a RBRefactoryChangeManager
	Arguments and temporary variables: 
		aRefactoringChange: 	PileGrossissante removeFromSystem!
	Receiver's instance variables: 
		undo: 	an OrderedCollection(Remove Metaclass1 Remove Metaclass2 Remove Metaclass...etc...
		redo: 	an OrderedCollection()
		isPerformingRefactoring: 	true


[ :change | RBRefactoryChangeManager instance performChange: change ] in [ self pickedChanges
	do: [ :change | RBRefactoryChangeManager instance performChange: change ] ] in ChangesBrowser>>accept
	Receiver: a ChangesBrowser
	Arguments and temporary variables: 
		change: 	PileGrossissante removeFromSystem!
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicContainerAdapter a MorphicContainerAdapt...etc...
		announceur: 	nil
		focusOrder: 	an OrderedCollection(a TreeModel a TextModel an OkCancelToolbar)
		owner: 	nil
		window: 	a NewValueHolder[ a DialogWindowModel ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary(Character escape->[ self cancel ] Meta + s-...etc...
		announcer: 	an Announcer
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'Changes Browser' ]
		textArea: 	a TextModel
		scopeChooser: 	nil
		changesTree: 	a TreeModel
		changes: 	an Array(a RBRemoveClassRefactoring)


OrderedCollection>>do:
	Receiver: an OrderedCollection(PileGrossissante removeFromSystem!)
	Arguments and temporary variables: 
		aBlock: 	[ :change | RBRefactoryChangeManager instance performChange: change ]
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(PileGrossissante removeFromSystem! nil nil nil nil nil nil nil ...etc...
		firstIndex: 	1
		lastIndex: 	1


[ self pickedChanges
	do: [ :change | RBRefactoryChangeManager instance performChange: change ] ] in ChangesBrowser>>accept
	Receiver: a ChangesBrowser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicContainerAdapter a MorphicContainerAdapt...etc...
		announceur: 	nil
		focusOrder: 	an OrderedCollection(a TreeModel a TextModel an OkCancelToolbar)
		owner: 	nil
		window: 	a NewValueHolder[ a DialogWindowModel ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary(Character escape->[ self cancel ] Meta + s-...etc...
		announcer: 	an Announcer
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'Changes Browser' ]
		textArea: 	a TextModel
		scopeChooser: 	nil
		changesTree: 	a TreeModel
		changes: 	an Array(a RBRemoveClassRefactoring)


BlockClosure>>cull:
	Receiver: [ self pickedChanges
	do: [ :change | RBRefactoryChangeManager instance performChange: cha...etc...
	Arguments and temporary variables: 
		anArg: 	a Job
	Receiver's instance variables: 
		outerContext: 	ChangesBrowser>>accept
		startpc: 	122
		numArgs: 	0


[ ^ block cull: self ] in [ self prepareForRunning.
CurrentJob value: self during: [ ^ block cull: self ] ] in Job>>run
	Receiver: a Job
	Arguments and temporary variables: 

	Receiver's instance variables: 
		block: 	[ self pickedChanges
	do: [ :change | RBRefactoryChangeManager instance ...etc...
		currentValue: 	0
		min: 	0
		max: 	100
		title: 	'Refactoring'
		children: 	an OrderedCollection()
		isRunning: 	true
		parent: 	nil
		process: 	a Process in nil


[ activeProcess psValueAt: index put: anObject.
aBlock value ] in CurrentJob(DynamicVariable)>>value:during:
	Receiver: a CurrentJob
	Arguments and temporary variables: 
		anObject: 	a Job
		aBlock: 	[ ^ block cull: self ]
		activeProcess: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	8


BlockClosure>>ensure:
	Receiver: [ activeProcess psValueAt: index put: anObject.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ activeProcess psValueAt: index put: oldValue ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentJob(DynamicVariable)>>value:during:
		startpc: 	79
		numArgs: 	0


CurrentJob(DynamicVariable)>>value:during:
	Receiver: a CurrentJob
	Arguments and temporary variables: 
		anObject: 	a Job
		aBlock: 	[ ^ block cull: self ]
		activeProcess: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	8


CurrentJob class(DynamicVariable class)>>value:during:
	Receiver: CurrentJob
	Arguments and temporary variables: 
		anObject: 	a Job
		aBlock: 	[ ^ block cull: self ]
	Receiver's instance variables: 
		superclass: 	DynamicVariable
		methodDict: 	a MethodDictionary()
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentJob
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Jobs-Base'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentJob


[ self prepareForRunning.
CurrentJob value: self during: [ ^ block cull: self ] ] in Job>>run
	Receiver: a Job
	Arguments and temporary variables: 

	Receiver's instance variables: 
		block: 	[ self pickedChanges
	do: [ :change | RBRefactoryChangeManager instance ...etc...
		currentValue: 	0
		min: 	0
		max: 	100
		title: 	'Refactoring'
		children: 	an OrderedCollection()
		isRunning: 	true
		parent: 	nil
		process: 	a Process in nil


BlockClosure>>ensure:
	Receiver: [ self prepareForRunning.
CurrentJob value: self during: [ ^ block cull: self ] ]
	Arguments and temporary variables: 
		aBlock: 	[ self cleanupAfterRunning ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	Job>>run
		startpc: 	77
		numArgs: 	0


Job>>run
	Receiver: a Job
	Arguments and temporary variables: 

	Receiver's instance variables: 
		block: 	[ self pickedChanges
	do: [ :change | RBRefactoryChangeManager instance ...etc...
		currentValue: 	0
		min: 	0
		max: 	100
		title: 	'Refactoring'
		children: 	an OrderedCollection()
		isRunning: 	true
		parent: 	nil
		process: 	a Process in nil


ChangesBrowser>>accept
	Receiver: a ChangesBrowser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicContainerAdapter a MorphicContainerAdapt...etc...
		announceur: 	nil
		focusOrder: 	an OrderedCollection(a TreeModel a TextModel an OkCancelToolbar)
		owner: 	nil
		window: 	a NewValueHolder[ a DialogWindowModel ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary(Character escape->[ self cancel ] Meta + s-...etc...
		announcer: 	an Announcer
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'Changes Browser' ]
		textArea: 	a TextModel
		scopeChooser: 	nil
		changesTree: 	a TreeModel
		changes: 	an Array(a RBRemoveClassRefactoring)


[ self accept ] in ChangesBrowser>>open
	Receiver: a ChangesBrowser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicContainerAdapter a MorphicContainerAdapt...etc...
		announceur: 	nil
		focusOrder: 	an OrderedCollection(a TreeModel a TextModel an OkCancelToolbar)
		owner: 	nil
		window: 	a NewValueHolder[ a DialogWindowModel ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary(Character escape->[ self cancel ] Meta + s-...etc...
		announcer: 	an Announcer
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'Changes Browser' ]
		textArea: 	a TextModel
		scopeChooser: 	nil
		changesTree: 	a TreeModel
		changes: 	an Array(a RBRemoveClassRefactoring)


[ okAction value value == false
	ifFalse: [ owner ifNil: [ self delete ] ifNotNil: [ owner delete ] ] ] in OkCancelToolbar(OkToolbar)>>okActionBlock
	Receiver: an OkCancelToolbar
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicContainerAdapter)
		announceur: 	nil
		focusOrder: 	an OrderedCollection(a ButtonModel a ButtonModel a DialogWindowMode...etc...
		owner: 	a SpecDialogWindow(273618688)
		window: 	a NewValueHolder[ nil ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary()
		announcer: 	an Announcer
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'Ok Cancel' ]
		okButton: 	a ButtonModel
		okAction: 	a NewValueHolder[ [ self accept ] ]
		cancelButton: 	a ButtonModel
		cancelAction: 	a NewValueHolder[ [ self cancel ] ]
		cancelled: 	a NewValueHolder[ false ]


ButtonModel>>performAction
	Receiver: a ButtonModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicButtonAdapter)
		announceur: 	nil
		focusOrder: 	nil
		owner: 	an OkCancelToolbar
		window: 	a NewValueHolder[ nil ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary(Character space->[ self action ] )
		announcer: 	an Announcer
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'Button' ]
		helpHolder: 	a NewValueHolder[ nil ]
		borderWidth: 	a NewValueHolder[ 0 ]
		borderColor: 	a NewValueHolder[ Color transparent ]
		enabledHolder: 	a NewValueHolder[ true ]
		dragEnabled: 	a NewValueHolder[ false ]
		dropEnabled: 	a NewValueHolder[ false ]
		dragTransformationBlock: 	THERE_BE_DRAGONS_HERE
Error: Invalid definition string
28 September 2018 11:24:01.964522 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

RBAddClassChange class(Object)>>error:
	Receiver: RBAddClassChange
	Arguments and temporary variables: 
		aString: 	'Invalid definition string'
	Receiver's instance variables: 
		superclass: 	RBRefactoryDefinitionChange
		methodDict: 	a MethodDictionary(#asUndoOperation->RBAddClassChange>>#asUndoOpera...etc...
		format: 	65547
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#RBAddClassChange
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Refactoring-Changes'
		traitComposition: 	{}
		localSelectors: 	nil


RBAddClassChange class(RBRefactoryDefinitionChange class)>>definition:for:
	Receiver: RBAddClassChange
	Arguments and temporary variables: 
		aString: 	'Pile immediateSubclass: #PileGrossissante
	instanceVariableNames: '''...etc...
		aController: 	nil
		parseTree: 	RBMessageNode(Pile
	immediateSubclass: #PileGrossissante
	instanceVa...etc...
		context: 	a SmallDictionary()
	Receiver's instance variables: 
		superclass: 	RBRefactoryDefinitionChange
		methodDict: 	a MethodDictionary(#asUndoOperation->RBAddClassChange>>#asUndoOpera...etc...
		format: 	65547
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#RBAddClassChange
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Refactoring-Changes'
		traitComposition: 	{}
		localSelectors: 	nil


RBAddClassChange class(RBRefactoryDefinitionChange class)>>definition:
	Receiver: RBAddClassChange
	Arguments and temporary variables: 
		aString: 	'Pile immediateSubclass: #PileGrossissante
	instanceVariableNames: '''...etc...
	Receiver's instance variables: 
		superclass: 	RBRefactoryDefinitionChange
		methodDict: 	a MethodDictionary(#asUndoOperation->RBAddClassChange>>#asUndoOpera...etc...
		format: 	65547
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#RBAddClassChange
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Refactoring-Changes'
		traitComposition: 	{}
		localSelectors: 	nil


RBCompositeRefactoryChange>>defineClass:
	Receiver: a RBCompositeRefactoryChange
	Arguments and temporary variables: 
		aString: 	'Pile immediateSubclass: #PileGrossissante
	instanceVariableNames: '''...etc...
	Receiver's instance variables: 
		name: 	nil
		changes: 	an OrderedCollection()


[ :each | 
classChanges defineClass: each definition.
each class instVarNames
	do:
		[ :varName | classChanges addInstanceVariable: varName to: each class ].
each selectors
	do:
		[ :selector | classChanges compile: (each sourceCodeAt: selector) in: each ].
each class selectors
	do: [ :selector | 
		classChanges
			compile: (each class sourceCodeAt: selector)
			in: each class ] ] in RBRemoveClassChange>>asUndoOperation
	Receiver: PileGrossissante removeFromSystem!
	Arguments and temporary variables: 
		classChanges: 	a RBCompositeRefactoryChange
		each: 	PileGrossissante
	Receiver's instance variables: 
		name: 	nil
		className: 	#PileGrossissante
		isMeta: 	false


OrderedCollection>>do:
	Receiver: an OrderedCollection(PileGrossissante)
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
classChanges defineClass: each definition.
each class instVa...etc...
		index: 	1
	Receiver's instance variables: 
		array: 	{PileGrossissante}
		firstIndex: 	1
		lastIndex: 	1


RBRemoveClassChange>>asUndoOperation
	Receiver: PileGrossissante removeFromSystem!
	Arguments and temporary variables: 
		classChanges: 	a RBCompositeRefactoryChange
	Receiver's instance variables: 
		name: 	nil
		className: 	#PileGrossissante
		isMeta: 	false


RBRemoveClassChange(RBRefactoryClassChange)>>executeNotifying:
	Receiver: PileGrossissante removeFromSystem!
	Arguments and temporary variables: 
		aBlock: 	[  ]
		undo: 	nil
	Receiver's instance variables: 
		name: 	nil
		className: 	#PileGrossissante
		isMeta: 	false


RBRemoveClassChange(RBRefactoryChange)>>execute
	Receiver: PileGrossissante removeFromSystem!
	Arguments and temporary variables: 

	Receiver's instance variables: 
		name: 	nil
		className: 	#PileGrossissante
		isMeta: 	false


[ self addUndo: aRefactoringChange execute ] in RBRefactoryChangeManager>>performChange:
	Receiver: a RBRefactoryChangeManager
	Arguments and temporary variables: 
		aRefactoringChange: 	PileGrossissante removeFromSystem!
	Receiver's instance variables: 
		undo: 	an OrderedCollection(Remove Metaclass1 Remove Metaclass2 Remove Metaclass...etc...
		redo: 	an OrderedCollection()
		isPerformingRefactoring: 	true


BlockClosure>>ensure:
	Receiver: [ self addUndo: aRefactoringChange execute ]
	Arguments and temporary variables: 
		aBlock: 	[ isPerformingRefactoring := false ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	RBRefactoryChangeManager>>performChange:
		startpc: 	55
		numArgs: 	0


RBRefactoryChangeManager>>ignoreChangesWhile:
	Receiver: a RBRefactoryChangeManager
	Arguments and temporary variables: 
		aBlock: 	[ self addUndo: aRefactoringChange execute ]
	Receiver's instance variables: 
		undo: 	an OrderedCollection(Remove Metaclass1 Remove Metaclass2 Remove Metaclass...etc...
		redo: 	an OrderedCollection()
		isPerformingRefactoring: 	true


RBRefactoryChangeManager>>performChange:
	Receiver: a RBRefactoryChangeManager
	Arguments and temporary variables: 
		aRefactoringChange: 	PileGrossissante removeFromSystem!
	Receiver's instance variables: 
		undo: 	an OrderedCollection(Remove Metaclass1 Remove Metaclass2 Remove Metaclass...etc...
		redo: 	an OrderedCollection()
		isPerformingRefactoring: 	true


[ :change | RBRefactoryChangeManager instance performChange: change ] in [ self pickedChanges
	do: [ :change | RBRefactoryChangeManager instance performChange: change ] ] in ChangesBrowser>>accept
	Receiver: a ChangesBrowser
	Arguments and temporary variables: 
		change: 	PileGrossissante removeFromSystem!
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicContainerAdapter a MorphicContainerAdapt...etc...
		announceur: 	nil
		focusOrder: 	an OrderedCollection(a TreeModel a TextModel an OkCancelToolbar)
		owner: 	nil
		window: 	a NewValueHolder[ a DialogWindowModel ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary(Character escape->[ self cancel ] Meta + s-...etc...
		announcer: 	an Announcer
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'Changes Browser' ]
		textArea: 	a TextModel
		scopeChooser: 	nil
		changesTree: 	a TreeModel
		changes: 	an Array(a RBRemoveClassRefactoring)


OrderedCollection>>do:
	Receiver: an OrderedCollection(PileGrossissante removeFromSystem!)
	Arguments and temporary variables: 
		aBlock: 	[ :change | RBRefactoryChangeManager instance performChange: change ]
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(PileGrossissante removeFromSystem! nil nil nil nil nil nil nil ...etc...
		firstIndex: 	1
		lastIndex: 	1


[ self pickedChanges
	do: [ :change | RBRefactoryChangeManager instance performChange: change ] ] in ChangesBrowser>>accept
	Receiver: a ChangesBrowser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicContainerAdapter a MorphicContainerAdapt...etc...
		announceur: 	nil
		focusOrder: 	an OrderedCollection(a TreeModel a TextModel an OkCancelToolbar)
		owner: 	nil
		window: 	a NewValueHolder[ a DialogWindowModel ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary(Character escape->[ self cancel ] Meta + s-...etc...
		announcer: 	an Announcer
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'Changes Browser' ]
		textArea: 	a TextModel
		scopeChooser: 	nil
		changesTree: 	a TreeModel
		changes: 	an Array(a RBRemoveClassRefactoring)


BlockClosure>>cull:
	Receiver: [ self pickedChanges
	do: [ :change | RBRefactoryChangeManager instance performChange: cha...etc...
	Arguments and temporary variables: 
		anArg: 	a Job
	Receiver's instance variables: 
		outerContext: 	ChangesBrowser>>accept
		startpc: 	122
		numArgs: 	0


[ ^ block cull: self ] in [ self prepareForRunning.
CurrentJob value: self during: [ ^ block cull: self ] ] in Job>>run
	Receiver: a Job
	Arguments and temporary variables: 

	Receiver's instance variables: 
		block: 	[ self pickedChanges
	do: [ :change | RBRefactoryChangeManager instance ...etc...
		currentValue: 	0
		min: 	0
		max: 	100
		title: 	'Refactoring'
		children: 	an OrderedCollection()
		isRunning: 	true
		parent: 	nil
		process: 	a Process in nil


[ activeProcess psValueAt: index put: anObject.
aBlock value ] in CurrentJob(DynamicVariable)>>value:during:
	Receiver: a CurrentJob
	Arguments and temporary variables: 
		anObject: 	a Job
		aBlock: 	[ ^ block cull: self ]
		activeProcess: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	8


BlockClosure>>ensure:
	Receiver: [ activeProcess psValueAt: index put: anObject.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ activeProcess psValueAt: index put: oldValue ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentJob(DynamicVariable)>>value:during:
		startpc: 	79
		numArgs: 	0


CurrentJob(DynamicVariable)>>value:during:
	Receiver: a CurrentJob
	Arguments and temporary variables: 
		anObject: 	a Job
		aBlock: 	[ ^ block cull: self ]
		activeProcess: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	8


CurrentJob class(DynamicVariable class)>>value:during:
	Receiver: CurrentJob
	Arguments and temporary variables: 
		anObject: 	a Job
		aBlock: 	[ ^ block cull: self ]
	Receiver's instance variables: 
		superclass: 	DynamicVariable
		methodDict: 	a MethodDictionary()
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentJob
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Jobs-Base'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentJob


[ self prepareForRunning.
CurrentJob value: self during: [ ^ block cull: self ] ] in Job>>run
	Receiver: a Job
	Arguments and temporary variables: 

	Receiver's instance variables: 
		block: 	[ self pickedChanges
	do: [ :change | RBRefactoryChangeManager instance ...etc...
		currentValue: 	0
		min: 	0
		max: 	100
		title: 	'Refactoring'
		children: 	an OrderedCollection()
		isRunning: 	true
		parent: 	nil
		process: 	a Process in nil


BlockClosure>>ensure:
	Receiver: [ self prepareForRunning.
CurrentJob value: self during: [ ^ block cull: self ] ]
	Arguments and temporary variables: 
		aBlock: 	[ self cleanupAfterRunning ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	Job>>run
		startpc: 	77
		numArgs: 	0


Job>>run
	Receiver: a Job
	Arguments and temporary variables: 

	Receiver's instance variables: 
		block: 	[ self pickedChanges
	do: [ :change | RBRefactoryChangeManager instance ...etc...
		currentValue: 	0
		min: 	0
		max: 	100
		title: 	'Refactoring'
		children: 	an OrderedCollection()
		isRunning: 	true
		parent: 	nil
		process: 	a Process in nil


ChangesBrowser>>accept
	Receiver: a ChangesBrowser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicContainerAdapter a MorphicContainerAdapt...etc...
		announceur: 	nil
		focusOrder: 	an OrderedCollection(a TreeModel a TextModel an OkCancelToolbar)
		owner: 	nil
		window: 	a NewValueHolder[ a DialogWindowModel ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary(Character escape->[ self cancel ] Meta + s-...etc...
		announcer: 	an Announcer
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'Changes Browser' ]
		textArea: 	a TextModel
		scopeChooser: 	nil
		changesTree: 	a TreeModel
		changes: 	an Array(a RBRemoveClassRefactoring)


[ self accept ] in ChangesBrowser>>open
	Receiver: a ChangesBrowser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicContainerAdapter a MorphicContainerAdapt...etc...
		announceur: 	nil
		focusOrder: 	an OrderedCollection(a TreeModel a TextModel an OkCancelToolbar)
		owner: 	nil
		window: 	a NewValueHolder[ a DialogWindowModel ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary(Character escape->[ self cancel ] Meta + s-...etc...
		announcer: 	an Announcer
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'Changes Browser' ]
		textArea: 	a TextModel
		scopeChooser: 	nil
		changesTree: 	a TreeModel
		changes: 	an Array(a RBRemoveClassRefactoring)


[ okAction value value == false
	ifFalse: [ owner ifNil: [ self delete ] ifNotNil: [ owner delete ] ] ] in OkCancelToolbar(OkToolbar)>>okActionBlock
	Receiver: an OkCancelToolbar
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicContainerAdapter)
		announceur: 	nil
		focusOrder: 	an OrderedCollection(a ButtonModel a ButtonModel a DialogWindowMode...etc...
		owner: 	a SpecDialogWindow(273618688)
		window: 	a NewValueHolder[ nil ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary()
		announcer: 	an Announcer
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'Ok Cancel' ]
		okButton: 	a ButtonModel
		okAction: 	a NewValueHolder[ [ self accept ] ]
		cancelButton: 	a ButtonModel
		cancelAction: 	a NewValueHolder[ [ self cancel ] ]
		cancelled: 	a NewValueHolder[ false ]


ButtonModel>>performAction
	Receiver: a ButtonModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicButtonAdapter)
		announceur: 	nil
		focusOrder: 	nil
		owner: 	an OkCancelToolbar
		window: 	a NewValueHolder[ nil ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary(Character space->[ self action ] )
		announcer: 	an Announcer
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'Button' ]
		helpHolder: 	a NewValueHolder[ nil ]
		borderWidth: 	a NewValueHolder[ 0 ]
		borderColor: 	a NewValueHolder[ Color transparent ]
		enabledHolder: 	a NewValueHolder[ true ]
		dragEnabled: 	a NewValueHolder[ false ]
		dropEnabled: 	a NewValueHolder[ false ]
		dragTransformationBlock: 	a NewValueHolder[ [ :item :source | item ] ]
		wantDropBlock: 	a NewValueHolder[ [ :draggedItem :event :source | self dropEnabl...etc...
		acceptDropBlock: 	a NewValueHolder[ [ :draggedItem :event :source |  ] ]
		transferBlock: 	a NewValueHolder[ [ :passenger :source | self transferFor: passe...etc...
		color: 	a NewValueHolder[ (Color r: 0.13 g: 0.13 b: 0.13 alpha: 1.0) ]
		actionHolder: 	a NewValueHolder[ [ okAction value value == false
	ifFalse: [ own...etc...
		labelHolder: 	a CollectionValueHolder[ 'Ok' ]
		fontHolder: 	a NewValueHolder[ nil ]
		stateHolder: 	a NewValueHolder[ false ]
		actionPerformedHolder: 	a NewValueHolder[ nil ]
		askBeforeChangingHolder: 	a NewValueHolder[ false ]
		iconHolder: 	a NewValueHolder[ nil ]
		menuHolder: 	a NewValueHolder[ a MenuModel ]
		shortcutHolder: 	a NewValueHolder[ nil ]


MorphicButtonAdapter>>action
	Receiver: a MorphicButtonAdapter
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a PluggableButtonMorph(994008576))
		announceur: 	nil
		model: 	a ButtonModel
		widget: 	a PluggableButtonMorph(994008576)
		selector: 	nil


PluggableButtonMorph>>performAction:
	Receiver: a PluggableButtonMorph(994008576)
	Arguments and temporary variables: 
		event: 	[(1174@691) mouseUp 5365393 nil]
	Receiver's instance variables: 
		bounds: 	(1146.0@666.0) corner: (1218.0@694.0)
		owner: 	a PanelMorph(1030334720)
		submorphs: 	an Array(an AlignmentMorph(436903424))
		fullBounds: 	nil
		color: 	(Color r: 0.29 g: 0.28800000000000003 b: 0.28800000000000003 alpha: 1.0)...etc...
		extension: 	a MorphExtension (658030848) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	a Text for 'Ok'
		icon: 	nil
		getIconSelector: 	nil
		getStateSelector: 	#state
		actionSelector: 	#action
		font: 	nil
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	false
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		getFontSelector: 	#font
		lastColor: 	nil
		labelMorph: 	a TextMorph(1060374784)
		iconMorph: 	nil
		iconPosition: 	#left
		lastState: 	false


[ :m | 
(m containsPoint: evt cursorPoint)
	ifTrue: [ m enabled
			ifTrue: [ m performAction: evt ] ] ] in PluggableButtonMorph>>mouseUp:
	Receiver: a PluggableButtonMorph(994008576)
	Arguments and temporary variables: 
		evt: 	[(1174@691) mouseUp 5365393 nil]
		all: 	an Array(a PluggableButtonMorph(1066966784) a PluggableButtonMorph(9940085...etc...
		m: 	a PluggableButtonMorph(994008576)
	Receiver's instance variables: 
		bounds: 	(1146.0@666.0) corner: (1218.0@694.0)
		owner: 	a PanelMorph(1030334720)
		submorphs: 	an Array(an AlignmentMorph(436903424))
		fullBounds: 	nil
		color: 	(Color r: 0.29 g: 0.28800000000000003 b: 0.28800000000000003 alpha: 1.0)...etc...
		extension: 	a MorphExtension (658030848) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	a Text for 'Ok'
		icon: 	nil
		getIconSelector: 	nil
		getStateSelector: 	#state
		actionSelector: 	#action
		font: 	nil
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	false
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		getFontSelector: 	#font
		lastColor: 	nil
		labelMorph: 	a TextMorph(1060374784)
		iconMorph: 	nil
		iconPosition: 	#left
		lastState: 	false


Array(SequenceableCollection)>>do:
	Receiver: an Array(a PluggableButtonMorph(1066966784) a PluggableButtonMorph(994008576))
	Arguments and temporary variables: 
		aBlock: 	[ :m | 
(m containsPoint: evt cursorPoint)
	ifTrue: [ m enabled
			ifTr...etc...
		index: 	2
	Receiver's instance variables: 
an Array(a PluggableButtonMorph(1066966784) a PluggableButtonMorph(994008576))

PluggableButtonMorph>>mouseUp:
	Receiver: a PluggableButtonMorph(994008576)
	Arguments and temporary variables: 
		evt: 	[(1174@691) mouseUp 5365393 nil]
		all: 	an Array(a PluggableButtonMorph(1066966784) a PluggableButtonMorph(9940085...etc...
	Receiver's instance variables: 
		bounds: 	(1146.0@666.0) corner: (1218.0@694.0)
		owner: 	a PanelMorph(1030334720)
		submorphs: 	an Array(an AlignmentMorph(436903424))
		fullBounds: 	nil
		color: 	(Color r: 0.29 g: 0.28800000000000003 b: 0.28800000000000003 alpha: 1.0)...etc...
		extension: 	a MorphExtension (658030848) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	a Text for 'Ok'
		icon: 	nil
		getIconSelector: 	nil
		getStateSelector: 	#state
		actionSelector: 	#action
		font: 	nil
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	false
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		getFontSelector: 	#font
		lastColor: 	nil
		labelMorph: 	a TextMorph(1060374784)
		iconMorph: 	nil
		iconPosition: 	#left
		lastState: 	false


PluggableButtonMorph(Morph)>>handleMouseUp:
	Receiver: a PluggableButtonMorph(994008576)
	Arguments and temporary variables: 
		anEvent: 	[(1174@691) mouseUp 5365393 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(1146.0@666.0) corner: (1218.0@694.0)
		owner: 	a PanelMorph(1030334720)
		submorphs: 	an Array(an AlignmentMorph(436903424))
		fullBounds: 	nil
		color: 	(Color r: 0.29 g: 0.28800000000000003 b: 0.28800000000000003 alpha: 1.0)...etc...
		extension: 	a MorphExtension (658030848) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	a Text for 'Ok'
		icon: 	nil
		getIconSelector: 	nil
		getStateSelector: 	#state
		actionSelector: 	#action
		font: 	nil
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	false
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		getFontSelector: 	#font
		lastColor: 	nil
		labelMorph: 	a TextMorph(1060374784)
		iconMorph: 	nil
		iconPosition: 	#left
		lastState: 	false


MouseButtonEvent>>sentTo:
	Receiver: [(1174@691) mouseUp 5365393 nil]
	Arguments and temporary variables: 
		anObject: 	a PluggableButtonMorph(994008576)
	Receiver's instance variables: 
		timeStamp: 	5365393
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(1174@691)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


PluggableButtonMorph(Morph)>>handleEvent:
	Receiver: a PluggableButtonMorph(994008576)
	Arguments and temporary variables: 
		anEvent: 	[(1174@691) mouseUp 5365393 nil]
	Receiver's instance variables: 
		bounds: 	(1146.0@666.0) corner: (1218.0@694.0)
		owner: 	a PanelMorph(1030334720)
		submorphs: 	an Array(an AlignmentMorph(436903424))
		fullBounds: 	nil
		color: 	(Color r: 0.29 g: 0.28800000000000003 b: 0.28800000000000003 alpha: 1.0)...etc...
		extension: 	a MorphExtension (658030848) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	a Text for 'Ok'
		icon: 	nil
		getIconSelector: 	nil
		getStateSelector: 	#state
		actionSelector: 	#action
		font: 	nil
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	false
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		getFontSelector: 	#font
		lastColor: 	nil
		labelMorph: 	a TextMorph(1060374784)
		iconMorph: 	nil
		iconPosition: 	#left
		lastState: 	false


PluggableButtonMorph(Morph)>>handleFocusEvent:
	Receiver: a PluggableButtonMorph(994008576)
	Arguments and temporary variables: 
		anEvent: 	[(1174@691) mouseUp 5365393 nil]
	Receiver's instance variables: 
		bounds: 	(1146.0@666.0) corner: (1218.0@694.0)
		owner: 	a PanelMorph(1030334720)
		submorphs: 	an Array(an AlignmentMorph(436903424))
		fullBounds: 	nil
		color: 	(Color r: 0.29 g: 0.28800000000000003 b: 0.28800000000000003 alpha: 1.0)...etc...
		extension: 	a MorphExtension (658030848) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	a Text for 'Ok'
		icon: 	nil
		getIconSelector: 	nil
		getStateSelector: 	#state
		actionSelector: 	#action
		font: 	nil
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	false
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		getFontSelector: 	#font
		lastColor: 	nil
		labelMorph: 	a TextMorph(1060374784)
		iconMorph: 	nil
		iconPosition: 	#left
		lastState: 	false


[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(1174@691) mouseUp 5365393 nil]
		focusHolder: 	a PluggableButtonMorph(994008576)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(562956288) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(1174@691.0) corner: (1190@707.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(1174@691.0) corner: (1190@707.0)
		color: 	Color blue
		extension: 	a MorphExtension (1002097664)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(994008576)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1174@691) mouseUp 5365393 nil]
		targetOffset: 	(28.0@25.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 5365393 1174 691 0 0 0 1)
		lastKeyScanCode: 	8
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0



--- The full stack ---
RBAddClassChange class(Object)>>error:
RBAddClassChange class(RBRefactoryDefinitionChange class)>>definition:for:
RBAddClassChange class(RBRefactoryDefinitionChange class)>>definition:
RBCompositeRefactoryChange>>defineClass:
[ :each | 
classChanges defineClass: each definition.
each class instVarNames
	do:
		[ :varName | classChanges addInstanceVariable: varName to: each class ].
each selectors
	do:
		[ :selector | classChanges compile: (each sourceCodeAt: selector) in: each ].
each class selectors
	do: [ :selector | 
		classChanges
			compile: (each class sourceCodeAt: selector)
			in: each class ] ] in RBRemoveClassChange>>asUndoOperation
OrderedCollection>>do:
RBRemoveClassChange>>asUndoOperation
RBRemoveClassChange(RBRefactoryClassChange)>>executeNotifying:
RBRemoveClassChange(RBRefactoryChange)>>execute
[ self addUndo: aRefactoringChange execute ] in RBRefactoryChangeManager>>performChange:
BlockClosure>>ensure:
RBRefactoryChangeManager>>ignoreChangesWhile:
RBRefactoryChangeManager>>performChange:
[ :change | RBRefactoryChangeManager instance performChange: change ] in [ self pickedChanges
	do: [ :change | RBRefactoryChangeManager instance performChange: change ] ] in ChangesBrowser>>accept
OrderedCollection>>do:
[ self pickedChanges
	do: [ :change | RBRefactoryChangeManager instance performChange: change ] ] in ChangesBrowser>>accept
BlockClosure>>cull:
[ ^ block cull: self ] in [ self prepareForRunning.
CurrentJob value: self during: [ ^ block cull: self ] ] in Job>>run
[ activeProcess psValueAt: index put: anObject.
aBlock value ] in CurrentJob(DynamicVariable)>>value:during:
BlockClosure>>ensure:
CurrentJob(DynamicVariable)>>value:during:
CurrentJob class(DynamicVariable class)>>value:during:
[ self prepareForRunning.
CurrentJob value: self during: [ ^ block cull: self ] ] in Job>>run
BlockClosure>>ensure:
Job>>run
ChangesBrowser>>accept
[ self accept ] in ChangesBrowser>>open
[ okAction value value == false
	ifFalse: [ owner ifNil: [ self delete ] ifNotNil: [ owner delete ] ] ] in OkCancelToolbar(OkToolbar)>>okActionBlock
ButtonModel>>performAction
MorphicButtonAdapter>>action
PluggableButtonMorph>>performAction:
[ :m | 
(m containsPoint: evt cursorPoint)
	ifTrue: [ m enabled
			ifTrue: [ m performAction: evt ] ] ] in PluggableButtonMorph>>mouseUp:
Array(SequenceableCollection)>>do:
PluggableButtonMorph>>mouseUp:
PluggableButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableButtonMorph(Morph)>>handleEvent:
PluggableButtonMorph(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of BlockClosure did not understand #methodClass:
28 September 2018 11:31:43.026184 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

BlockClosure(Object)>>doesNotUnderstand: #methodClass:
	Receiver: [  ]
	Arguments and temporary variables: 
		aMessage: 	methodClass: Pile
		exception: 	MessageNotUnderstood: BlockClosure>>methodClass:
		resumeValue: 	nil
	Receiver's instance variables: 
		outerContext: 	IDM>>idmPile
		startpc: 	130
		numArgs: 	0


Pile class(Behavior)>>basicAddSelector:withMethod:
	Receiver: Pile
	Arguments and temporary variables: 
		selector: 	#grow
		compiledMethod: 	[  ]
		oldMethodOrNil: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#capacity->Pile>>#capacity #do:->Pile>>#do: #gro...etc...
		format: 	65539
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{PileTypee. PileGrossissante}
		name: 	#Pile
		classPool: 	a Dictionary(#tailleDefaut->5 )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#MetaProg
		traitComposition: 	{}
		localSelectors: 	nil


Pile class(Behavior)>>addSelectorSilently:withMethod:
	Receiver: Pile
	Arguments and temporary variables: 
		selector: 	#grow
		compiledMethod: 	[  ]
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#capacity->Pile>>#capacity #do:->Pile>>#do: #gro...etc...
		format: 	65539
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{PileTypee. PileGrossissante}
		name: 	#Pile
		classPool: 	a Dictionary(#tailleDefaut->5 )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#MetaProg
		traitComposition: 	{}
		localSelectors: 	nil


Pile class(ClassDescription)>>addSelectorSilently:withMethod:
	Receiver: Pile
	Arguments and temporary variables: 
		selector: 	#grow
		compiledMethod: 	[  ]
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#capacity->Pile>>#capacity #do:->Pile>>#do: #gro...etc...
		format: 	65539
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{PileTypee. PileGrossissante}
		name: 	#Pile
		classPool: 	a Dictionary(#tailleDefaut->5 )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#MetaProg
		traitComposition: 	{}
		localSelectors: 	nil


Pile class(ClassDescription)>>addSelector:withMethod:notifying:
	Receiver: Pile
	Arguments and temporary variables: 
		selector: 	#grow
		compiledMethod: 	[  ]
		requestor: 	nil
		priorMethodOrNil: 	nil
		oldProtocol: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#capacity->Pile>>#capacity #do:->Pile>>#do: #gro...etc...
		format: 	65539
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{PileTypee. PileGrossissante}
		name: 	#Pile
		classPool: 	a Dictionary(#tailleDefaut->5 )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#MetaProg
		traitComposition: 	{}
		localSelectors: 	nil


Pile class(Behavior)>>addSelector:withMethod:
	Receiver: Pile
	Arguments and temporary variables: 
		selector: 	#grow
		compiledMethod: 	[  ]
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#capacity->Pile>>#capacity #do:->Pile>>#do: #gro...etc...
		format: 	65539
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{PileTypee. PileGrossissante}
		name: 	#Pile
		classPool: 	a Dictionary(#tailleDefaut->5 )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#MetaProg
		traitComposition: 	{}
		localSelectors: 	nil


IDM>>idmPile
	Receiver: an IDM
	Arguments and temporary variables: 

	Receiver's instance variables: 
an IDM

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'i:=IDM new.
i idmPile.'
		itsSelection: 	a Text for 'i:=IDM new.
i idmPile.'
		itsSelectionString: 	'i:=IDM new.
i idmPile.'
	Receiver's instance variables: 
		ast: 	DoIt
	i := IDM new.
	^ i idmPile
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(472857600)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(472857600)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1006726912)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(472857600)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@126)
		owner: 	a TransformWithLayoutMorph(735591936)
		submorphs: 	an Array(a RubPrimarySelectionMorph(839548928) a RubCursor(257787904...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (63825664) [other:  (announcer -> an Announcer) (km...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(368110336)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(257787904)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(509460224))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1006726912)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1031)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1031x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(669064448))(a SearchMorp...etc...
		lastStepTime: 	5826421
		lastStepMessage: 	nil
		lastCycleTime: 	5826442
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(257787904)))
		lastAlarmTime: 	5826421
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1031)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(54672896) a Nau...etc...
		fullBounds: 	(0@0) corner: (1920@1031)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (303216896) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1031)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1031x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(669064448))(a SearchMorp...etc...
		lastStepTime: 	5826421
		lastStepMessage: 	nil
		lastCycleTime: 	5826442
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(257787904)))
		lastAlarmTime: 	5826421
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1031)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1031x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(669064448))(a SearchMorp...etc...
		lastStepTime: 	5826421
		lastStepMessage: 	nil
		lastCycleTime: 	5826442
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(257787904)))
		lastAlarmTime: 	5826421
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1031)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(54672896) a Nau...etc...
		fullBounds: 	(0@0) corner: (1920@1031)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (303216896) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
BlockClosure(Object)>>doesNotUnderstand: #methodClass:
Pile class(Behavior)>>basicAddSelector:withMethod:
Pile class(Behavior)>>addSelectorSilently:withMethod:
Pile class(ClassDescription)>>addSelectorSilently:withMethod:
Pile class(ClassDescription)>>addSelector:withMethod:notifying:
Pile class(Behavior)>>addSelector:withMethod:
IDM>>idmPile
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of BlockClosure did not understand #sendsSelector:
28 September 2018 11:32:19.293241 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

BlockClosure(Object)>>doesNotUnderstand: #sendsSelector:
	Receiver: [  ]
	Arguments and temporary variables: 
		aMessage: 	sendsSelector: #subclassResponsibility
		exception: 	MessageNotUnderstood: BlockClosure>>sendsSelector:
		resumeValue: 	nil
	Receiver's instance variables: 
		outerContext: 	IDM>>idmPile
		startpc: 	130
		numArgs: 	0


[ :cm | cm sendsSelector: #subclassResponsibility ] in Pile class(Behavior)>>hasAbstractMethods
	Receiver: Pile
	Arguments and temporary variables: 
		cm: 	[  ]
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#capacity->Pile>>#capacity #do:->Pile>>#do: #gro...etc...
		format: 	65539
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{PileTypee. PileGrossissante}
		name: 	#Pile
		classPool: 	a Dictionary(#tailleDefaut->5 )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#MetaProg
		traitComposition: 	{}
		localSelectors: 	nil


[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in Array(Collection)>>anySatisfy:
	Receiver: an Array(Pile>>#size Pile>>#push: [  ] Pile>>#isFull Pile>>#do: Pile>>#initialize: Pile>>#...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :cm | cm sendsSelector: #subclassResponsibility ]
		each: 	[  ]
	Receiver's instance variables: 
an Array(Pile>>#size Pile>>#push: [  ] Pile>>#isFull Pile>>#do: Pile>>#initialize: Pile>>#...etc...

Array(SequenceableCollection)>>do:
	Receiver: an Array(Pile>>#size Pile>>#push: [  ] Pile>>#isFull Pile>>#do: Pile>>#initialize: Pile>>#...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ]
		index: 	3
	Receiver's instance variables: 
an Array(Pile>>#size Pile>>#push: [  ] Pile>>#isFull Pile>>#do: Pile>>#initialize: Pile>>#...etc...

Array(Collection)>>anySatisfy:
	Receiver: an Array(Pile>>#size Pile>>#push: [  ] Pile>>#isFull Pile>>#do: Pile>>#initialize: Pile>>#...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :cm | cm sendsSelector: #subclassResponsibility ]
	Receiver's instance variables: 
an Array(Pile>>#size Pile>>#push: [  ] Pile>>#isFull Pile>>#do: Pile>>#initialize: Pile>>#...etc...

Pile class(Behavior)>>hasAbstractMethods
	Receiver: Pile
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#capacity->Pile>>#capacity #do:->Pile>>#do: #gro...etc...
		format: 	65539
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{PileTypee. PileGrossissante}
		name: 	#Pile
		classPool: 	a Dictionary(#tailleDefaut->5 )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#MetaProg
		traitComposition: 	{}
		localSelectors: 	nil


Pile class(Class)>>hasAbstractMethods
	Receiver: Pile
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#capacity->Pile>>#capacity #do:->Pile>>#do: #gro...etc...
		format: 	65539
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{PileTypee. PileGrossissante}
		name: 	#Pile
		classPool: 	a Dictionary(#tailleDefaut->5 )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#MetaProg
		traitComposition: 	{}
		localSelectors: 	nil


ClassWidget>>buildTabbedNameOf:
	Receiver: a ClassWidget
	Arguments and temporary variables: 
		anElement: 	Pile
		tab: 	'   '
		size: 	0
		stringMorph: 	a StringMorph(971748352)#Pile
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a FTPluggableIconListMorphAdaptor(649379328))
		announceur: 	nil
		model: 	a NautilusUI
		classesList: 	a FTPluggableIconListMorphAdaptor(649379328)
		classesSelection: 	a Dictionary()
		classesListElements: 	an OrderedCollection(IDM Pile PileGrossissante PileTypee T...etc...
		cachedHierarchy: 	a SortHierarchically
		showHierarchy: 	false


ClassWidget>>classWrapper:
	Receiver: a ClassWidget
	Arguments and temporary variables: 
		anElement: 	Pile
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a FTPluggableIconListMorphAdaptor(649379328))
		announceur: 	nil
		model: 	a NautilusUI
		classesList: 	a FTPluggableIconListMorphAdaptor(649379328)
		classesSelection: 	a Dictionary()
		classesListElements: 	an OrderedCollection(IDM Pile PileGrossissante PileTypee T...etc...
		cachedHierarchy: 	a SortHierarchically
		showHierarchy: 	false


FTPluggableIconListMorphAdaptorDataSource>>elementWrapped:
	Receiver: a FTPluggableIconListMorphAdaptorDataSource
	Arguments and temporary variables: 
		object: 	Pile
		selector: 	#classWrapper:
	Receiver's instance variables: 
		table: 	a FTPluggableIconListMorphAdaptor(649379328)
		model: 	a ClassWidget
		getListSelector: 	nil
		getListElementSelector: 	#getClassItem:
		wrapSelector: 	#classWrapper:
		getIconSelector: 	#classIconFor:
		getListSizeSelector: 	#classListSize
		getMenuSelector: 	#classesMenu:shifted:
		dropItemSelector: 	#dropInClass:inARow:
		wantsDropSelector: 	nil


FTPluggableIconListMorphAdaptorDataSource>>cellColumn:row:
	Receiver: a FTPluggableIconListMorphAdaptorDataSource
	Arguments and temporary variables: 
		column: 	a FTColumn
		rowIndex: 	2
		object: 	Pile
		text: 	nil
		icon: 	Form(16x16x32)
	Receiver's instance variables: 
		table: 	a FTPluggableIconListMorphAdaptor(649379328)
		model: 	a ClassWidget
		getListSelector: 	nil
		getListElementSelector: 	#getClassItem:
		wrapSelector: 	#classWrapper:
		getIconSelector: 	#classIconFor:
		getListSizeSelector: 	#classListSize
		getMenuSelector: 	#classesMenu:shifted:
		dropItemSelector: 	#dropInClass:inARow:
		wantsDropSelector: 	nil


FTTableContainerMorph>>updateExposedRows
	Receiver: a FTTableContainerMorph(882312192)
	Arguments and temporary variables: 
		visibleRows: 	11
		numberOfColumns: 	1
		columns: 	an Array(a FTColumn)
		columnWidths: 	#(233.0)
		startIndex: 	1
		rowIndex: 	2
		row: 	a FTTableRowMorph(603706624)
		columnIndex: 	1
		cell: 	nil
	Receiver's instance variables: 
		bounds: 	(1059.0@455.0) corner: (1292.0@676.0)
		owner: 	a FTPluggableIconListMorphAdaptor(649379328)
		submorphs: 	an Array(a FTTableRowMorph(688675584) a FTTableRowMorph(713692416) a...etc...
		fullBounds: 	(1059@455) corner: (1292@676)
		color: 	Color transparent
		extension: 	a MorphExtension (262015488) [other:  (errorOnDraw -> true) (drawErr...etc...
		needsRefreshExposedRows: 	true
		headerRow: 	nil
		exposedRows: 	a SmallDictionary(1->a FTTableRowMorph(282044416))


FTPluggableIconListMorphAdaptor(FTTableMorph)>>resetPosition
	Receiver: a FTPluggableIconListMorphAdaptor(649379328)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1059.0@455.0) corner: (1292.0@676.0)
		owner: 	a PanelMorph(609962240)
		submorphs: 	an Array(a FTTableContainerMorph(882312192))
		fullBounds: 	(1059@455) corner: (1292@676)
		color: 	(Color r: 0.13 g: 0.13 b: 0.13 alpha: 1.0)
		extension: 	a MorphExtension (292717568) [other:  (announcer -> an Announcer) (k...etc...
		container: 	a FTTableContainerMorph(882312192)
		verticalScrollBar: 	a ScrollBar(895827456)
		selectionColor: 	nil
		showIndex: 	1
		dataSource: 	a FTPluggableIconListMorphAdaptorDataSource
		intercellSpacing: 	nil
		rowHeight: 	20.333333333333336
		selectedRowIndexes: 	#()
		highlightedRowIndexes: 	#()
		selectionStrategy: 	a FTMultipleSelection
		columns: 	an Array(a FTColumn)
		secondarySelectionColor: 	nil
		headerColor: 	nil
		showColumnHeaders: 	false
		allowsDeselection: 	true
		needToggleAtMouseUp: 	false
		function: 	a FTSearchFunction
		resizable: 	false
		setSelectionListSelector: 	#classSelectionAt:put:
		getSelectionListSelector: 	#classSelectionAt:
		setIndexSelector: 	#selectedClassIndex:
		getIndexSelector: 	#selectedClassIndex
		keystrokeSelector: 	#keyPressedOnList:shifted:
		resetListSelector: 	#resetClassSelection
		doubleClickSelector: 	#doubleClick:
		keystrokeActionSelector: 	nil


FTPluggableIconListMorphAdaptor>>updateList
	Receiver: a FTPluggableIconListMorphAdaptor(649379328)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1059.0@455.0) corner: (1292.0@676.0)
		owner: 	a PanelMorph(609962240)
		submorphs: 	an Array(a FTTableContainerMorph(882312192))
		fullBounds: 	(1059@455) corner: (1292@676)
		color: 	(Color r: 0.13 g: 0.13 b: 0.13 alpha: 1.0)
		extension: 	a MorphExtension (292717568) [other:  (announcer -> an Announcer) (k...etc...
		container: 	a FTTableContainerMorph(882312192)
		verticalScrollBar: 	a ScrollBar(895827456)
		selectionColor: 	nil
		showIndex: 	1
		dataSource: 	a FTPluggableIconListMorphAdaptorDataSource
		intercellSpacing: 	nil
		rowHeight: 	20.333333333333336
		selectedRowIndexes: 	#()
		highlightedRowIndexes: 	#()
		selectionStrategy: 	a FTMultipleSelection
		columns: 	an Array(a FTColumn)
		secondarySelectionColor: 	nil
		headerColor: 	nil
		showColumnHeaders: 	false
		allowsDeselection: 	true
		needToggleAtMouseUp: 	false
		function: 	a FTSearchFunction
		resizable: 	false
		setSelectionListSelector: 	#classSelectionAt:put:
		getSelectionListSelector: 	#classSelectionAt:
		setIndexSelector: 	#selectedClassIndex:
		getIndexSelector: 	#selectedClassIndex
		keystrokeSelector: 	#keyPressedOnList:shifted:
		resetListSelector: 	#resetClassSelection
		doubleClickSelector: 	#doubleClick:
		keystrokeActionSelector: 	nil


FTPluggableIconListMorphAdaptor>>update:
	Receiver: a FTPluggableIconListMorphAdaptor(649379328)
	Arguments and temporary variables: 
		symbol: 	#getClassItem:
	Receiver's instance variables: 
		bounds: 	(1059.0@455.0) corner: (1292.0@676.0)
		owner: 	a PanelMorph(609962240)
		submorphs: 	an Array(a FTTableContainerMorph(882312192))
		fullBounds: 	(1059@455) corner: (1292@676)
		color: 	(Color r: 0.13 g: 0.13 b: 0.13 alpha: 1.0)
		extension: 	a MorphExtension (292717568) [other:  (announcer -> an Announcer) (k...etc...
		container: 	a FTTableContainerMorph(882312192)
		verticalScrollBar: 	a ScrollBar(895827456)
		selectionColor: 	nil
		showIndex: 	1
		dataSource: 	a FTPluggableIconListMorphAdaptorDataSource
		intercellSpacing: 	nil
		rowHeight: 	20.333333333333336
		selectedRowIndexes: 	#()
		highlightedRowIndexes: 	#()
		selectionStrategy: 	a FTMultipleSelection
		columns: 	an Array(a FTColumn)
		secondarySelectionColor: 	nil
		headerColor: 	nil
		showColumnHeaders: 	false
		allowsDeselection: 	true
		needToggleAtMouseUp: 	false
		function: 	a FTSearchFunction
		resizable: 	false
		setSelectionListSelector: 	#classSelectionAt:put:
		getSelectionListSelector: 	#classSelectionAt:
		setIndexSelector: 	#selectedClassIndex:
		getIndexSelector: 	#selectedClassIndex
		keystrokeSelector: 	#keyPressedOnList:shifted:
		resetListSelector: 	#resetClassSelection
		doubleClickSelector: 	#doubleClick:
		keystrokeActionSelector: 	nil


[ :aDependent | aDependent update: aParameter ] in ClassWidget(Model)>>changed:
	Receiver: a ClassWidget
	Arguments and temporary variables: 
		aParameter: 	#getClassItem:
		aDependent: 	a FTPluggableIconListMorphAdaptor(649379328)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a FTPluggableIconListMorphAdaptor(649379328))
		announceur: 	nil
		model: 	a NautilusUI
		classesList: 	a FTPluggableIconListMorphAdaptor(649379328)
		classesSelection: 	a Dictionary()
		classesListElements: 	an OrderedCollection(IDM Pile PileGrossissante PileTypee T...etc...
		cachedHierarchy: 	a SortHierarchically
		showHierarchy: 	false


DependentsArray>>do:
	Receiver: a DependentsArray(a FTPluggableIconListMorphAdaptor(649379328))
	Arguments and temporary variables: 
		aBlock: 	[ :aDependent | aDependent update: aParameter ]
		dep: 	a FTPluggableIconListMorphAdaptor(649379328)
		i: 	1
	Receiver's instance variables: 
a DependentsArray(a FTPluggableIconListMorphAdaptor(649379328))

ClassWidget(Model)>>changed:
	Receiver: a ClassWidget
	Arguments and temporary variables: 
		aParameter: 	#getClassItem:
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a FTPluggableIconListMorphAdaptor(649379328))
		announceur: 	nil
		model: 	a NautilusUI
		classesList: 	a FTPluggableIconListMorphAdaptor(649379328)
		classesSelection: 	a Dictionary()
		classesListElements: 	an OrderedCollection(IDM Pile PileGrossissante PileTypee T...etc...
		cachedHierarchy: 	a SortHierarchically
		showHierarchy: 	false


ClassWidget(AbstractWidget)>>update:
	Receiver: a ClassWidget
	Arguments and temporary variables: 
		aSymbol: 	#getClassItem:
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a FTPluggableIconListMorphAdaptor(649379328))
		announceur: 	nil
		model: 	a NautilusUI
		classesList: 	a FTPluggableIconListMorphAdaptor(649379328)
		classesSelection: 	a Dictionary()
		classesListElements: 	an OrderedCollection(IDM Pile PileGrossissante PileTypee T...etc...
		cachedHierarchy: 	a SortHierarchically
		showHierarchy: 	false


[ :aDependent | aDependent update: aParameter ] in NautilusUI(Model)>>changed:
	Receiver: a NautilusUI
	Arguments and temporary variables: 
		aParameter: 	#getClassItem:
		aDependent: 	a ClassWidget
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		announceur: 	nil
		model: 	a Nautilus
		window: 	a NautilusWindow(1021156352)
		sourceCodePanel: 	a PanelMorph(832888064)
		fullDisplayedComment: 	false
		sourceCodeContainer: 	a PanelMorph(1054231808)
		shouldUpdateTitle: 	true
		contentSelection: 	a Text for 'idmPile
	(Smalltalk at: #PileGrossissante)
		ifFa...etc...
		acceptor: 	a MethodDefinitionAcceptor
		commentWidget: 	nil
		sourceTextWidget: 	a RubScrolledTextMorph(537463296)
		sourceCodeSelectionInterval: 	(1 to: 359)
		sourceTextModel: 	a RubScrolledTextModel
		methodClassifier: 	nil
		commentTextModel: 	a RubScrolledTextModel
		instanceButtonWidget: 	a PluggableToggleButtonMorph(1068761344)
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageWidget
		packagePatternString: 	'MetaProg'
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(669064448)


DependentsArray>>do:
	Receiver: a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a PackageWidget a Nautilus...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :aDependent | aDependent update: aParameter ]
		dep: 	a ClassWidget
		i: 	3
	Receiver's instance variables: 
a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a PackageWidget a Nautilus...etc...

NautilusUI(Model)>>changed:
	Receiver: a NautilusUI
	Arguments and temporary variables: 
		aParameter: 	#getClassItem:
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		announceur: 	nil
		model: 	a Nautilus
		window: 	a NautilusWindow(1021156352)
		sourceCodePanel: 	a PanelMorph(832888064)
		fullDisplayedComment: 	false
		sourceCodeContainer: 	a PanelMorph(1054231808)
		shouldUpdateTitle: 	true
		contentSelection: 	a Text for 'idmPile
	(Smalltalk at: #PileGrossissante)
		ifFa...etc...
		acceptor: 	a MethodDefinitionAcceptor
		commentWidget: 	nil
		sourceTextWidget: 	a RubScrolledTextMorph(537463296)
		sourceCodeSelectionInterval: 	(1 to: 359)
		sourceTextModel: 	a RubScrolledTextModel
		methodClassifier: 	nil
		commentTextModel: 	a RubScrolledTextModel
		instanceButtonWidget: 	a PluggableToggleButtonMorph(1068761344)
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageWidget
		packagePatternString: 	'MetaProg'
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(669064448)


NautilusUI(AbstractNautilusUI)>>changed:
	Receiver: a NautilusUI
	Arguments and temporary variables: 
		aSymbol: 	#getClassItem:
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		announceur: 	nil
		model: 	a Nautilus
		window: 	a NautilusWindow(1021156352)
		sourceCodePanel: 	a PanelMorph(832888064)
		fullDisplayedComment: 	false
		sourceCodeContainer: 	a PanelMorph(1054231808)
		shouldUpdateTitle: 	true
		contentSelection: 	a Text for 'idmPile
	(Smalltalk at: #PileGrossissante)
		ifFa...etc...
		acceptor: 	a MethodDefinitionAcceptor
		commentWidget: 	nil
		sourceTextWidget: 	a RubScrolledTextMorph(537463296)
		sourceCodeSelectionInterval: 	(1 to: 359)
		sourceTextModel: 	a RubScrolledTextModel
		methodClassifier: 	nil
		commentTextModel: 	a RubScrolledTextModel
		instanceButtonWidget: 	a PluggableToggleButtonMorph(1068761344)
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageWidget
		packagePatternString: 	'MetaProg'
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(669064448)


NautilusUI(AbstractNautilusUI)>>updateClassView
	Receiver: a NautilusUI
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		announceur: 	nil
		model: 	a Nautilus
		window: 	a NautilusWindow(1021156352)
		sourceCodePanel: 	a PanelMorph(832888064)
		fullDisplayedComment: 	false
		sourceCodeContainer: 	a PanelMorph(1054231808)
		shouldUpdateTitle: 	true
		contentSelection: 	a Text for 'idmPile
	(Smalltalk at: #PileGrossissante)
		ifFa...etc...
		acceptor: 	a MethodDefinitionAcceptor
		commentWidget: 	nil
		sourceTextWidget: 	a RubScrolledTextMorph(537463296)
		sourceCodeSelectionInterval: 	(1 to: 359)
		sourceTextModel: 	a RubScrolledTextModel
		methodClassifier: 	nil
		commentTextModel: 	a RubScrolledTextModel
		instanceButtonWidget: 	a PluggableToggleButtonMorph(1068761344)
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageWidget
		packagePatternString: 	'MetaProg'
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(669064448)


NautilusUI>>showHierarchy:
	Receiver: a NautilusUI
	Arguments and temporary variables: 
		aBoolean: 	false
		selectedClass: 	IDM
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		announceur: 	nil
		model: 	a Nautilus
		window: 	a NautilusWindow(1021156352)
		sourceCodePanel: 	a PanelMorph(832888064)
		fullDisplayedComment: 	false
		sourceCodeContainer: 	a PanelMorph(1054231808)
		shouldUpdateTitle: 	true
		contentSelection: 	a Text for 'idmPile
	(Smalltalk at: #PileGrossissante)
		ifFa...etc...
		acceptor: 	a MethodDefinitionAcceptor
		commentWidget: 	nil
		sourceTextWidget: 	a RubScrolledTextMorph(537463296)
		sourceCodeSelectionInterval: 	(1 to: 359)
		sourceTextModel: 	a RubScrolledTextModel
		methodClassifier: 	nil
		commentTextModel: 	a RubScrolledTextModel
		instanceButtonWidget: 	a PluggableToggleButtonMorph(1068761344)
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageWidget
		packagePatternString: 	'MetaProg'
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(669064448)


NautilusUI(AbstractNautilusUI)>>toggleShowHierarchy
	Receiver: a NautilusUI
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		announceur: 	nil
		model: 	a Nautilus
		window: 	a NautilusWindow(1021156352)
		sourceCodePanel: 	a PanelMorph(832888064)
		fullDisplayedComment: 	false
		sourceCodeContainer: 	a PanelMorph(1054231808)
		shouldUpdateTitle: 	true
		contentSelection: 	a Text for 'idmPile
	(Smalltalk at: #PileGrossissante)
		ifFa...etc...
		acceptor: 	a MethodDefinitionAcceptor
		commentWidget: 	nil
		sourceTextWidget: 	a RubScrolledTextMorph(537463296)
		sourceCodeSelectionInterval: 	(1 to: 359)
		sourceTextModel: 	a RubScrolledTextModel
		methodClassifier: 	nil
		commentTextModel: 	a RubScrolledTextModel
		instanceButtonWidget: 	a PluggableToggleButtonMorph(1068761344)
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageWidget
		packagePatternString: 	'MetaProg'
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(669064448)


NautilusUI(AbstractNautilusUI)>>hierarchyButtonAction:
	Receiver: a NautilusUI
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		announceur: 	nil
		model: 	a Nautilus
		window: 	a NautilusWindow(1021156352)
		sourceCodePanel: 	a PanelMorph(832888064)
		fullDisplayedComment: 	false
		sourceCodeContainer: 	a PanelMorph(1054231808)
		shouldUpdateTitle: 	true
		contentSelection: 	a Text for 'idmPile
	(Smalltalk at: #PileGrossissante)
		ifFa...etc...
		acceptor: 	a MethodDefinitionAcceptor
		commentWidget: 	nil
		sourceTextWidget: 	a RubScrolledTextMorph(537463296)
		sourceCodeSelectionInterval: 	(1 to: 359)
		sourceTextModel: 	a RubScrolledTextModel
		methodClassifier: 	nil
		commentTextModel: 	a RubScrolledTextModel
		instanceButtonWidget: 	a PluggableToggleButtonMorph(1068761344)
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageWidget
		packagePatternString: 	'MetaProg'
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(669064448)


PluggableToggleButtonMorph>>performAction:
	Receiver: a PluggableToggleButtonMorph(369014528)
	Arguments and temporary variables: 
		event: 	[(1110@686) mouseUp 5862726 nil]
	Receiver's instance variables: 
		bounds: 	(1059.0@679.0) corner: (1134.0@702.0)
		owner: 	a PanelMorph(47892736)
		submorphs: 	an Array(an AlignmentMorph(669611008))
		fullBounds: 	nil
		color: 	(Color r: 0.027 g: 0.388 b: 0.678 alpha: 1.0)
		extension: 	a MorphExtension (267649792) [balloonText]  [other:  (mouseEntered -...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a NautilusUI
		label: 	' Hier.'
		icon: 	Form(13x13x32)
		getIconSelector: 	#hierarchyButtonIcon
		getStateSelector: 	#hierarchyButtonState
		actionSelector: 	#hierarchyButtonAction:
		font: 	nil
		getLabelSelector: 	#hierarchyButtonLabel
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	false
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hierarchyButtonEnabled
		getFontSelector: 	nil
		lastColor: 	nil
		labelMorph: 	a LabelMorph(488511232)' Hier.'
		iconMorph: 	an ImageMorph(581785600)
		iconPosition: 	#left
		lastState: 	true
		pressed: 	false


[ :m | 
(m containsPoint: evt cursorPoint)
	ifTrue: [ m enabled
			ifTrue: [ m performAction: evt ] ] ] in PluggableToggleButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a PluggableToggleButtonMorph(369014528)
	Arguments and temporary variables: 
		evt: 	[(1110@686) mouseUp 5862726 nil]
		all: 	an Array(a PluggableToggleButtonMorph(430069248) a PluggableToggleButtonMo...etc...
		m: 	a PluggableToggleButtonMorph(369014528)
	Receiver's instance variables: 
		bounds: 	(1059.0@679.0) corner: (1134.0@702.0)
		owner: 	a PanelMorph(47892736)
		submorphs: 	an Array(an AlignmentMorph(669611008))
		fullBounds: 	nil
		color: 	(Color r: 0.027 g: 0.388 b: 0.678 alpha: 1.0)
		extension: 	a MorphExtension (267649792) [balloonText]  [other:  (mouseEntered -...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a NautilusUI
		label: 	' Hier.'
		icon: 	Form(13x13x32)
		getIconSelector: 	#hierarchyButtonIcon
		getStateSelector: 	#hierarchyButtonState
		actionSelector: 	#hierarchyButtonAction:
		font: 	nil
		getLabelSelector: 	#hierarchyButtonLabel
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	false
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hierarchyButtonEnabled
		getFontSelector: 	nil
		lastColor: 	nil
		labelMorph: 	a LabelMorph(488511232)' Hier.'
		iconMorph: 	an ImageMorph(581785600)
		iconPosition: 	#left
		lastState: 	true
		pressed: 	false


Array(SequenceableCollection)>>do:
	Receiver: an Array(a PluggableToggleButtonMorph(430069248) a PluggableToggleButtonMorph(1068761344) ...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :m | 
(m containsPoint: evt cursorPoint)
	ifTrue: [ m enabled
			ifTr...etc...
		index: 	3
	Receiver's instance variables: 
an Array(a PluggableToggleButtonMorph(430069248) a PluggableToggleButtonMorph(1068761344) ...etc...

PluggableToggleButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a PluggableToggleButtonMorph(369014528)
	Arguments and temporary variables: 
		evt: 	[(1110@686) mouseUp 5862726 nil]
		all: 	an Array(a PluggableToggleButtonMorph(430069248) a PluggableToggleButtonMo...etc...
	Receiver's instance variables: 
		bounds: 	(1059.0@679.0) corner: (1134.0@702.0)
		owner: 	a PanelMorph(47892736)
		submorphs: 	an Array(an AlignmentMorph(669611008))
		fullBounds: 	nil
		color: 	(Color r: 0.027 g: 0.388 b: 0.678 alpha: 1.0)
		extension: 	a MorphExtension (267649792) [balloonText]  [other:  (mouseEntered -...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a NautilusUI
		label: 	' Hier.'
		icon: 	Form(13x13x32)
		getIconSelector: 	#hierarchyButtonIcon
		getStateSelector: 	#hierarchyButtonState
		actionSelector: 	#hierarchyButtonAction:
		font: 	nil
		getLabelSelector: 	#hierarchyButtonLabel
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	false
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hierarchyButtonEnabled
		getFontSelector: 	nil
		lastColor: 	nil
		labelMorph: 	a LabelMorph(488511232)' Hier.'
		iconMorph: 	an ImageMorph(581785600)
		iconPosition: 	#left
		lastState: 	true
		pressed: 	false


PluggableToggleButtonMorph(Morph)>>handleMouseUp:
	Receiver: a PluggableToggleButtonMorph(369014528)
	Arguments and temporary variables: 
		anEvent: 	[(1110@686) mouseUp 5862726 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(1059.0@679.0) corner: (1134.0@702.0)
		owner: 	a PanelMorph(47892736)
		submorphs: 	an Array(an AlignmentMorph(669611008))
		fullBounds: 	nil
		color: 	(Color r: 0.027 g: 0.388 b: 0.678 alpha: 1.0)
		extension: 	a MorphExtension (267649792) [balloonText]  [other:  (mouseEntered -...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a NautilusUI
		label: 	' Hier.'
		icon: 	Form(13x13x32)
		getIconSelector: 	#hierarchyButtonIcon
		getStateSelector: 	#hierarchyButtonState
		actionSelector: 	#hierarchyButtonAction:
		font: 	nil
		getLabelSelector: 	#hierarchyButtonLabel
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	false
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hierarchyButtonEnabled
		getFontSelector: 	nil
		lastColor: 	nil
		labelMorph: 	a LabelMorph(488511232)' Hier.'
		iconMorph: 	an ImageMorph(581785600)
		iconPosition: 	#left
		lastState: 	true
		pressed: 	false


MouseButtonEvent>>sentTo:
	Receiver: [(1110@686) mouseUp 5862726 nil]
	Arguments and temporary variables: 
		anObject: 	a PluggableToggleButtonMorph(369014528)
	Receiver's instance variables: 
		timeStamp: 	5862726
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(1110@686)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


PluggableToggleButtonMorph(Morph)>>handleEvent:
	Receiver: a PluggableToggleButtonMorph(369014528)
	Arguments and temporary variables: 
		anEvent: 	[(1110@686) mouseUp 5862726 nil]
	Receiver's instance variables: 
		bounds: 	(1059.0@679.0) corner: (1134.0@702.0)
		owner: 	a PanelMorph(47892736)
		submorphs: 	an Array(an AlignmentMorph(669611008))
		fullBounds: 	nil
		color: 	(Color r: 0.027 g: 0.388 b: 0.678 alpha: 1.0)
		extension: 	a MorphExtension (267649792) [balloonText]  [other:  (mouseEntered -...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a NautilusUI
		label: 	' Hier.'
		icon: 	Form(13x13x32)
		getIconSelector: 	#hierarchyButtonIcon
		getStateSelector: 	#hierarchyButtonState
		actionSelector: 	#hierarchyButtonAction:
		font: 	nil
		getLabelSelector: 	#hierarchyButtonLabel
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	false
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hierarchyButtonEnabled
		getFontSelector: 	nil
		lastColor: 	nil
		labelMorph: 	a LabelMorph(488511232)' Hier.'
		iconMorph: 	an ImageMorph(581785600)
		iconPosition: 	#left
		lastState: 	true
		pressed: 	false


PluggableToggleButtonMorph(Morph)>>handleFocusEvent:
	Receiver: a PluggableToggleButtonMorph(369014528)
	Arguments and temporary variables: 
		anEvent: 	[(1110@686) mouseUp 5862726 nil]
	Receiver's instance variables: 
		bounds: 	(1059.0@679.0) corner: (1134.0@702.0)
		owner: 	a PanelMorph(47892736)
		submorphs: 	an Array(an AlignmentMorph(669611008))
		fullBounds: 	nil
		color: 	(Color r: 0.027 g: 0.388 b: 0.678 alpha: 1.0)
		extension: 	a MorphExtension (267649792) [balloonText]  [other:  (mouseEntered -...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a NautilusUI
		label: 	' Hier.'
		icon: 	Form(13x13x32)
		getIconSelector: 	#hierarchyButtonIcon
		getStateSelector: 	#hierarchyButtonState
		actionSelector: 	#hierarchyButtonAction:
		font: 	nil
		getLabelSelector: 	#hierarchyButtonLabel
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	false
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hierarchyButtonEnabled
		getFontSelector: 	nil
		lastColor: 	nil
		labelMorph: 	a LabelMorph(488511232)' Hier.'
		iconMorph: 	an ImageMorph(581785600)
		iconPosition: 	#left
		lastState: 	true
		pressed: 	false


[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(1110@686) mouseUp 5862726 nil]
		focusHolder: 	a PluggableToggleButtonMorph(369014528)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(562956288) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(1110@686.0) corner: (1126@702.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(1110@686.0) corner: (1126@702.0)
		color: 	Color blue
		extension: 	a MorphExtension (1002097664)
		mouseFocus: 	nil
		keyboardFocus: 	a FTPluggableIconListMorphAdaptor(649379328)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1110@686) mouseUp 5862726 nil]
		targetOffset: 	(51.0@7.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 5862726 1110 686 0 0 0 1)
		lastKeyScanCode: 	31
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	111
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		aBlock: 	[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	ha...etc...
		priorWorld: 	a WorldMorph(562956288) [world]
		priorHand: 	a HandMorph(58125568)
		priorEvent: 	[(1110@686) mouseOver red 5862663 nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1031)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a NautilusWindow(1021156352) a Na...etc...
		fullBounds: 	(0@0) corner: (1920@1031)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (303216896) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[(1110@686) mouseUp 5862726 nil]
		focusHolder: 	a PluggableToggleButtonMorph(369014528)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		bounds: 	(1110@686.0) corner: (1126@702.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(1110@686.0) corner: (1126@702.0)
		color: 	Color blue
		extension: 	a MorphExtension (1002097664)
		mouseFocus: 	nil
		keyboardFocus: 	a FTPluggableIconListMorphAdaptor(649379328)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1110@686) mouseUp 5862726 nil]
		targetOffset: 	(51.0@7.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 5862726 1110 686 0 0 0 1)
		lastKeyScanCode: 	31
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0



--- The full stack ---
BlockClosure(Object)>>doesNotUnderstand: #sendsSelector:
[ :cm | cm sendsSelector: #subclassResponsibility ] in Pile class(Behavior)>>hasAbstractMethods
[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in Array(Collection)>>anySatisfy:
Array(SequenceableCollection)>>do:
Array(Collection)>>anySatisfy:
Pile class(Behavior)>>hasAbstractMethods
Pile class(Class)>>hasAbstractMethods
ClassWidget>>buildTabbedNameOf:
ClassWidget>>classWrapper:
FTPluggableIconListMorphAdaptorDataSource>>elementWrapped:
FTPluggableIconListMorphAdaptorDataSource>>cellColumn:row:
FTTableContainerMorph>>updateExposedRows
FTPluggableIconListMorphAdaptor(FTTableMorph)>>resetPosition
FTPluggableIconListMorphAdaptor>>updateList
FTPluggableIconListMorphAdaptor>>update:
[ :aDependent | aDependent update: aParameter ] in ClassWidget(Model)>>changed:
DependentsArray>>do:
ClassWidget(Model)>>changed:
ClassWidget(AbstractWidget)>>update:
[ :aDependent | aDependent update: aParameter ] in NautilusUI(Model)>>changed:
DependentsArray>>do:
NautilusUI(Model)>>changed:
NautilusUI(AbstractNautilusUI)>>changed:
NautilusUI(AbstractNautilusUI)>>updateClassView
NautilusUI>>showHierarchy:
NautilusUI(AbstractNautilusUI)>>toggleShowHierarchy
NautilusUI(AbstractNautilusUI)>>hierarchyButtonAction:
PluggableToggleButtonMorph>>performAction:
[ :m | 
(m containsPoint: evt cursorPoint)
	ifTrue: [ m enabled
			ifTrue: [ m performAction: evt ] ] ] in PluggableToggleButtonMorph(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
PluggableToggleButtonMorph(PluggableButtonMorph)>>mouseUp:
PluggableToggleButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableToggleButtonMorph(Morph)>>handleEvent:
PluggableToggleButtonMorph(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of BlockClosure did not understand #sendsSelector:
28 September 2018 11:32:24.857538 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

BlockClosure(Object)>>doesNotUnderstand: #sendsSelector:
	Receiver: [  ]
	Arguments and temporary variables: 
		aMessage: 	sendsSelector: #subclassResponsibility
		exception: 	MessageNotUnderstood: BlockClosure>>sendsSelector:
		resumeValue: 	nil
	Receiver's instance variables: 
		outerContext: 	IDM>>idmPile
		startpc: 	130
		numArgs: 	0


[ :cm | cm sendsSelector: #subclassResponsibility ] in Pile class(Behavior)>>hasAbstractMethods
	Receiver: Pile
	Arguments and temporary variables: 
		cm: 	[  ]
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#capacity->Pile>>#capacity #do:->Pile>>#do: #gro...etc...
		format: 	65539
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{PileTypee. PileGrossissante}
		name: 	#Pile
		classPool: 	a Dictionary(#tailleDefaut->5 )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#MetaProg
		traitComposition: 	{}
		localSelectors: 	nil


[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in Array(Collection)>>anySatisfy:
	Receiver: an Array(Pile>>#size Pile>>#push: [  ] Pile>>#isFull Pile>>#do: Pile>>#initialize: Pile>>#...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :cm | cm sendsSelector: #subclassResponsibility ]
		each: 	[  ]
	Receiver's instance variables: 
an Array(Pile>>#size Pile>>#push: [  ] Pile>>#isFull Pile>>#do: Pile>>#initialize: Pile>>#...etc...

Array(SequenceableCollection)>>do:
	Receiver: an Array(Pile>>#size Pile>>#push: [  ] Pile>>#isFull Pile>>#do: Pile>>#initialize: Pile>>#...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ]
		index: 	3
	Receiver's instance variables: 
an Array(Pile>>#size Pile>>#push: [  ] Pile>>#isFull Pile>>#do: Pile>>#initialize: Pile>>#...etc...

Array(Collection)>>anySatisfy:
	Receiver: an Array(Pile>>#size Pile>>#push: [  ] Pile>>#isFull Pile>>#do: Pile>>#initialize: Pile>>#...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :cm | cm sendsSelector: #subclassResponsibility ]
	Receiver's instance variables: 
an Array(Pile>>#size Pile>>#push: [  ] Pile>>#isFull Pile>>#do: Pile>>#initialize: Pile>>#...etc...

Pile class(Behavior)>>hasAbstractMethods
	Receiver: Pile
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#capacity->Pile>>#capacity #do:->Pile>>#do: #gro...etc...
		format: 	65539
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{PileTypee. PileGrossissante}
		name: 	#Pile
		classPool: 	a Dictionary(#tailleDefaut->5 )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#MetaProg
		traitComposition: 	{}
		localSelectors: 	nil


Pile class(Class)>>hasAbstractMethods
	Receiver: Pile
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#capacity->Pile>>#capacity #do:->Pile>>#do: #gro...etc...
		format: 	65539
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{PileTypee. PileGrossissante}
		name: 	#Pile
		classPool: 	a Dictionary(#tailleDefaut->5 )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#MetaProg
		traitComposition: 	{}
		localSelectors: 	nil


ClassWidget>>buildTabbedNameOf:
	Receiver: a ClassWidget
	Arguments and temporary variables: 
		anElement: 	Pile
		tab: 	'   '
		size: 	0
		stringMorph: 	a StringMorph(702579456)#Pile
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a FTPluggableIconListMorphAdaptor(649379328))
		announceur: 	nil
		model: 	a NautilusUI
		classesList: 	a FTPluggableIconListMorphAdaptor(649379328)
		classesSelection: 	a Dictionary()
		classesListElements: 	an OrderedCollection(IDM Pile PileGrossissante PileTypee T...etc...
		cachedHierarchy: 	a SortHierarchically
		showHierarchy: 	false


ClassWidget>>classWrapper:
	Receiver: a ClassWidget
	Arguments and temporary variables: 
		anElement: 	Pile
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a FTPluggableIconListMorphAdaptor(649379328))
		announceur: 	nil
		model: 	a NautilusUI
		classesList: 	a FTPluggableIconListMorphAdaptor(649379328)
		classesSelection: 	a Dictionary()
		classesListElements: 	an OrderedCollection(IDM Pile PileGrossissante PileTypee T...etc...
		cachedHierarchy: 	a SortHierarchically
		showHierarchy: 	false


FTPluggableIconListMorphAdaptorDataSource>>elementWrapped:
	Receiver: a FTPluggableIconListMorphAdaptorDataSource
	Arguments and temporary variables: 
		object: 	Pile
		selector: 	#classWrapper:
	Receiver's instance variables: 
		table: 	a FTPluggableIconListMorphAdaptor(649379328)
		model: 	a ClassWidget
		getListSelector: 	nil
		getListElementSelector: 	#getClassItem:
		wrapSelector: 	#classWrapper:
		getIconSelector: 	#classIconFor:
		getListSizeSelector: 	#classListSize
		getMenuSelector: 	#classesMenu:shifted:
		dropItemSelector: 	#dropInClass:inARow:
		wantsDropSelector: 	nil


FTPluggableIconListMorphAdaptorDataSource>>cellColumn:row:
	Receiver: a FTPluggableIconListMorphAdaptorDataSource
	Arguments and temporary variables: 
		column: 	a FTColumn
		rowIndex: 	2
		object: 	Pile
		text: 	nil
		icon: 	Form(16x16x32)
	Receiver's instance variables: 
		table: 	a FTPluggableIconListMorphAdaptor(649379328)
		model: 	a ClassWidget
		getListSelector: 	nil
		getListElementSelector: 	#getClassItem:
		wrapSelector: 	#classWrapper:
		getIconSelector: 	#classIconFor:
		getListSizeSelector: 	#classListSize
		getMenuSelector: 	#classesMenu:shifted:
		dropItemSelector: 	#dropInClass:inARow:
		wantsDropSelector: 	nil


FTTableContainerMorph>>updateExposedRows
	Receiver: a FTTableContainerMorph(882312192)
	Arguments and temporary variables: 
		visibleRows: 	11
		numberOfColumns: 	1
		columns: 	an Array(a FTColumn)
		columnWidths: 	#(233.0)
		startIndex: 	1
		rowIndex: 	2
		row: 	a FTTableRowMorph(317574144)
		columnIndex: 	1
		cell: 	nil
	Receiver's instance variables: 
		bounds: 	(1059.0@455.0) corner: (1292.0@676.0)
		owner: 	a FTPluggableIconListMorphAdaptor(649379328)
		submorphs: 	an Array(a FTTableRowMorph(688675584) a FTTableRowMorph(713692416) a...etc...
		fullBounds: 	(1059@455) corner: (1292@676)
		color: 	Color transparent
		extension: 	a MorphExtension (262015488) [other:  (errorOnDraw -> true) (drawErr...etc...
		needsRefreshExposedRows: 	true
		headerRow: 	nil
		exposedRows: 	a SmallDictionary(1->a FTTableRowMorph(974730752))


FTPluggableIconListMorphAdaptor(FTTableMorph)>>resetPosition
	Receiver: a FTPluggableIconListMorphAdaptor(649379328)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1059.0@455.0) corner: (1292.0@676.0)
		owner: 	a PanelMorph(609962240)
		submorphs: 	an Array(a FTTableContainerMorph(882312192))
		fullBounds: 	(1059@455) corner: (1292@676)
		color: 	(Color r: 0.13 g: 0.13 b: 0.13 alpha: 1.0)
		extension: 	a MorphExtension (292717568) [other:  (announcer -> an Announcer) (k...etc...
		container: 	a FTTableContainerMorph(882312192)
		verticalScrollBar: 	a ScrollBar(895827456)
		selectionColor: 	nil
		showIndex: 	1
		dataSource: 	a FTPluggableIconListMorphAdaptorDataSource
		intercellSpacing: 	nil
		rowHeight: 	20.333333333333336
		selectedRowIndexes: 	#()
		highlightedRowIndexes: 	#()
		selectionStrategy: 	a FTMultipleSelection
		columns: 	an Array(a FTColumn)
		secondarySelectionColor: 	nil
		headerColor: 	nil
		showColumnHeaders: 	false
		allowsDeselection: 	true
		needToggleAtMouseUp: 	false
		function: 	a FTSearchFunction
		resizable: 	false
		setSelectionListSelector: 	#classSelectionAt:put:
		getSelectionListSelector: 	#classSelectionAt:
		setIndexSelector: 	#selectedClassIndex:
		getIndexSelector: 	#selectedClassIndex
		keystrokeSelector: 	#keyPressedOnList:shifted:
		resetListSelector: 	#resetClassSelection
		doubleClickSelector: 	#doubleClick:
		keystrokeActionSelector: 	nil


FTPluggableIconListMorphAdaptor>>updateList
	Receiver: a FTPluggableIconListMorphAdaptor(649379328)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1059.0@455.0) corner: (1292.0@676.0)
		owner: 	a PanelMorph(609962240)
		submorphs: 	an Array(a FTTableContainerMorph(882312192))
		fullBounds: 	(1059@455) corner: (1292@676)
		color: 	(Color r: 0.13 g: 0.13 b: 0.13 alpha: 1.0)
		extension: 	a MorphExtension (292717568) [other:  (announcer -> an Announcer) (k...etc...
		container: 	a FTTableContainerMorph(882312192)
		verticalScrollBar: 	a ScrollBar(895827456)
		selectionColor: 	nil
		showIndex: 	1
		dataSource: 	a FTPluggableIconListMorphAdaptorDataSource
		intercellSpacing: 	nil
		rowHeight: 	20.333333333333336
		selectedRowIndexes: 	#()
		highlightedRowIndexes: 	#()
		selectionStrategy: 	a FTMultipleSelection
		columns: 	an Array(a FTColumn)
		secondarySelectionColor: 	nil
		headerColor: 	nil
		showColumnHeaders: 	false
		allowsDeselection: 	true
		needToggleAtMouseUp: 	false
		function: 	a FTSearchFunction
		resizable: 	false
		setSelectionListSelector: 	#classSelectionAt:put:
		getSelectionListSelector: 	#classSelectionAt:
		setIndexSelector: 	#selectedClassIndex:
		getIndexSelector: 	#selectedClassIndex
		keystrokeSelector: 	#keyPressedOnList:shifted:
		resetListSelector: 	#resetClassSelection
		doubleClickSelector: 	#doubleClick:
		keystrokeActionSelector: 	nil


FTPluggableIconListMorphAdaptor>>update:
	Receiver: a FTPluggableIconListMorphAdaptor(649379328)
	Arguments and temporary variables: 
		symbol: 	#getClassItem:
	Receiver's instance variables: 
		bounds: 	(1059.0@455.0) corner: (1292.0@676.0)
		owner: 	a PanelMorph(609962240)
		submorphs: 	an Array(a FTTableContainerMorph(882312192))
		fullBounds: 	(1059@455) corner: (1292@676)
		color: 	(Color r: 0.13 g: 0.13 b: 0.13 alpha: 1.0)
		extension: 	a MorphExtension (292717568) [other:  (announcer -> an Announcer) (k...etc...
		container: 	a FTTableContainerMorph(882312192)
		verticalScrollBar: 	a ScrollBar(895827456)
		selectionColor: 	nil
		showIndex: 	1
		dataSource: 	a FTPluggableIconListMorphAdaptorDataSource
		intercellSpacing: 	nil
		rowHeight: 	20.333333333333336
		selectedRowIndexes: 	#()
		highlightedRowIndexes: 	#()
		selectionStrategy: 	a FTMultipleSelection
		columns: 	an Array(a FTColumn)
		secondarySelectionColor: 	nil
		headerColor: 	nil
		showColumnHeaders: 	false
		allowsDeselection: 	true
		needToggleAtMouseUp: 	false
		function: 	a FTSearchFunction
		resizable: 	false
		setSelectionListSelector: 	#classSelectionAt:put:
		getSelectionListSelector: 	#classSelectionAt:
		setIndexSelector: 	#selectedClassIndex:
		getIndexSelector: 	#selectedClassIndex
		keystrokeSelector: 	#keyPressedOnList:shifted:
		resetListSelector: 	#resetClassSelection
		doubleClickSelector: 	#doubleClick:
		keystrokeActionSelector: 	nil


[ :aDependent | aDependent update: aParameter ] in ClassWidget(Model)>>changed:
	Receiver: a ClassWidget
	Arguments and temporary variables: 
		aParameter: 	#getClassItem:
		aDependent: 	a FTPluggableIconListMorphAdaptor(649379328)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a FTPluggableIconListMorphAdaptor(649379328))
		announceur: 	nil
		model: 	a NautilusUI
		classesList: 	a FTPluggableIconListMorphAdaptor(649379328)
		classesSelection: 	a Dictionary()
		classesListElements: 	an OrderedCollection(IDM Pile PileGrossissante PileTypee T...etc...
		cachedHierarchy: 	a SortHierarchically
		showHierarchy: 	false


DependentsArray>>do:
	Receiver: a DependentsArray(a FTPluggableIconListMorphAdaptor(649379328))
	Arguments and temporary variables: 
		aBlock: 	[ :aDependent | aDependent update: aParameter ]
		dep: 	a FTPluggableIconListMorphAdaptor(649379328)
		i: 	1
	Receiver's instance variables: 
a DependentsArray(a FTPluggableIconListMorphAdaptor(649379328))

ClassWidget(Model)>>changed:
	Receiver: a ClassWidget
	Arguments and temporary variables: 
		aParameter: 	#getClassItem:
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a FTPluggableIconListMorphAdaptor(649379328))
		announceur: 	nil
		model: 	a NautilusUI
		classesList: 	a FTPluggableIconListMorphAdaptor(649379328)
		classesSelection: 	a Dictionary()
		classesListElements: 	an OrderedCollection(IDM Pile PileGrossissante PileTypee T...etc...
		cachedHierarchy: 	a SortHierarchically
		showHierarchy: 	false


ClassWidget(AbstractWidget)>>update:
	Receiver: a ClassWidget
	Arguments and temporary variables: 
		aSymbol: 	#getClassItem:
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a FTPluggableIconListMorphAdaptor(649379328))
		announceur: 	nil
		model: 	a NautilusUI
		classesList: 	a FTPluggableIconListMorphAdaptor(649379328)
		classesSelection: 	a Dictionary()
		classesListElements: 	an OrderedCollection(IDM Pile PileGrossissante PileTypee T...etc...
		cachedHierarchy: 	a SortHierarchically
		showHierarchy: 	false


[ :aDependent | aDependent update: aParameter ] in NautilusUI(Model)>>changed:
	Receiver: a NautilusUI
	Arguments and temporary variables: 
		aParameter: 	#getClassItem:
		aDependent: 	a ClassWidget
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		announceur: 	nil
		model: 	a Nautilus
		window: 	a NautilusWindow(1021156352)
		sourceCodePanel: 	a PanelMorph(832888064)
		fullDisplayedComment: 	false
		sourceCodeContainer: 	a PanelMorph(1054231808)
		shouldUpdateTitle: 	true
		contentSelection: 	a Text for 'idmPile
	(Smalltalk at: #PileGrossissante)
		ifFa...etc...
		acceptor: 	a MethodDefinitionAcceptor
		commentWidget: 	nil
		sourceTextWidget: 	a RubScrolledTextMorph(537463296)
		sourceCodeSelectionInterval: 	(1 to: 359)
		sourceTextModel: 	a RubScrolledTextModel
		methodClassifier: 	nil
		commentTextModel: 	a RubScrolledTextModel
		instanceButtonWidget: 	a PluggableToggleButtonMorph(1068761344)
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageWidget
		packagePatternString: 	'MetaProg'
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(669064448)


DependentsArray>>do:
	Receiver: a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a PackageWidget a Nautilus...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :aDependent | aDependent update: aParameter ]
		dep: 	a ClassWidget
		i: 	3
	Receiver's instance variables: 
a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a PackageWidget a Nautilus...etc...

NautilusUI(Model)>>changed:
	Receiver: a NautilusUI
	Arguments and temporary variables: 
		aParameter: 	#getClassItem:
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		announceur: 	nil
		model: 	a Nautilus
		window: 	a NautilusWindow(1021156352)
		sourceCodePanel: 	a PanelMorph(832888064)
		fullDisplayedComment: 	false
		sourceCodeContainer: 	a PanelMorph(1054231808)
		shouldUpdateTitle: 	true
		contentSelection: 	a Text for 'idmPile
	(Smalltalk at: #PileGrossissante)
		ifFa...etc...
		acceptor: 	a MethodDefinitionAcceptor
		commentWidget: 	nil
		sourceTextWidget: 	a RubScrolledTextMorph(537463296)
		sourceCodeSelectionInterval: 	(1 to: 359)
		sourceTextModel: 	a RubScrolledTextModel
		methodClassifier: 	nil
		commentTextModel: 	a RubScrolledTextModel
		instanceButtonWidget: 	a PluggableToggleButtonMorph(1068761344)
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageWidget
		packagePatternString: 	'MetaProg'
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(669064448)


NautilusUI(AbstractNautilusUI)>>changed:
	Receiver: a NautilusUI
	Arguments and temporary variables: 
		aSymbol: 	#getClassItem:
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		announceur: 	nil
		model: 	a Nautilus
		window: 	a NautilusWindow(1021156352)
		sourceCodePanel: 	a PanelMorph(832888064)
		fullDisplayedComment: 	false
		sourceCodeContainer: 	a PanelMorph(1054231808)
		shouldUpdateTitle: 	true
		contentSelection: 	a Text for 'idmPile
	(Smalltalk at: #PileGrossissante)
		ifFa...etc...
		acceptor: 	a MethodDefinitionAcceptor
		commentWidget: 	nil
		sourceTextWidget: 	a RubScrolledTextMorph(537463296)
		sourceCodeSelectionInterval: 	(1 to: 359)
		sourceTextModel: 	a RubScrolledTextModel
		methodClassifier: 	nil
		commentTextModel: 	a RubScrolledTextModel
		instanceButtonWidget: 	a PluggableToggleButtonMorph(1068761344)
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageWidget
		packagePatternString: 	'MetaProg'
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(669064448)


NautilusUI(AbstractNautilusUI)>>updateClassView
	Receiver: a NautilusUI
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		announceur: 	nil
		model: 	a Nautilus
		window: 	a NautilusWindow(1021156352)
		sourceCodePanel: 	a PanelMorph(832888064)
		fullDisplayedComment: 	false
		sourceCodeContainer: 	a PanelMorph(1054231808)
		shouldUpdateTitle: 	true
		contentSelection: 	a Text for 'idmPile
	(Smalltalk at: #PileGrossissante)
		ifFa...etc...
		acceptor: 	a MethodDefinitionAcceptor
		commentWidget: 	nil
		sourceTextWidget: 	a RubScrolledTextMorph(537463296)
		sourceCodeSelectionInterval: 	(1 to: 359)
		sourceTextModel: 	a RubScrolledTextModel
		methodClassifier: 	nil
		commentTextModel: 	a RubScrolledTextModel
		instanceButtonWidget: 	a PluggableToggleButtonMorph(1068761344)
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageWidget
		packagePatternString: 	'MetaProg'
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(669064448)


NautilusUI>>methodModified:
	Receiver: a NautilusUI
	Arguments and temporary variables: 
		anAnnouncement: 	a MethodModified
		collection: 	an OrderedCollection(IDM Pile PileGrossissante PileTypee TestPile)
		nonMetaMethodClass: 	IDM
		method: 	IDM>>#idmPile
		selectedMethod: 	IDM>>#idmPile
		oldMethod: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		announceur: 	nil
		model: 	a Nautilus
		window: 	a NautilusWindow(1021156352)
		sourceCodePanel: 	a PanelMorph(832888064)
		fullDisplayedComment: 	false
		sourceCodeContainer: 	a PanelMorph(1054231808)
		shouldUpdateTitle: 	true
		contentSelection: 	a Text for 'idmPile
	(Smalltalk at: #PileGrossissante)
		ifFa...etc...
		acceptor: 	a MethodDefinitionAcceptor
		commentWidget: 	nil
		sourceTextWidget: 	a RubScrolledTextMorph(537463296)
		sourceCodeSelectionInterval: 	(1 to: 359)
		sourceTextModel: 	a RubScrolledTextModel
		methodClassifier: 	nil
		commentTextModel: 	a RubScrolledTextModel
		instanceButtonWidget: 	a PluggableToggleButtonMorph(1068761344)
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageWidget
		packagePatternString: 	'MetaProg'
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(669064448)


WeakMessageSend>>value:
	Receiver: a WeakMessageSend(#methodModified: -> a NautilusUI)
	Arguments and temporary variables: 
		anObject: 	a MethodModified
		strongReceiver: 	a NautilusUI
	Receiver's instance variables: 
		selector: 	#methodModified:
		shouldBeNil: 	#()
		arguments: 	a WeakArray()


WeakMessageSend>>cull:
	Receiver: a WeakMessageSend(#methodModified: -> a NautilusUI)
	Arguments and temporary variables: 
		arg: 	a MethodModified
	Receiver's instance variables: 
		selector: 	#methodModified:
		shouldBeNil: 	#()
		arguments: 	a WeakArray()


WeakMessageSend>>cull:cull:
	Receiver: a WeakMessageSend(#methodModified: -> a NautilusUI)
	Arguments and temporary variables: 
		arg1: 	a MethodModified
		arg2: 	a SystemAnnouncer
	Receiver's instance variables: 
		selector: 	#methodModified:
		shouldBeNil: 	#()
		arguments: 	a WeakArray()


[ action cull: anAnnouncement cull: announcer ] in LegacyWeakSubscription(WeakAnnouncementSubscription)>>deliver:
	Receiver: a LegacyWeakSubscription(a WeakMessageSend(#methodModified: -> a NautilusUI))
	Arguments and temporary variables: 
		anAnnouncement: 	a MethodModified
	Receiver's instance variables: 
		list: 	a WeakFinalizationList
		next: 	nil
		announcer: 	a SystemAnnouncer
		announcementClass: 	MethodModified
		action: 	a WeakMessageSend(#methodModified: -> a NautilusUI)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	LegacyWeakSubscription(WeakAnnouncementSubscription)>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	LegacyWeakSubscription(WeakAnnouncementSubscription)>>deliver:
		startpc: 	83
		numArgs: 	0


LegacyWeakSubscription(WeakAnnouncementSubscription)>>deliver:
	Receiver: a LegacyWeakSubscription(a WeakMessageSend(#methodModified: -> a NautilusUI))
	Arguments and temporary variables: 
		anAnnouncement: 	a MethodModified
	Receiver's instance variables: 
		list: 	a WeakFinalizationList
		next: 	nil
		announcer: 	a SystemAnnouncer
		announcementClass: 	MethodModified
		action: 	a WeakMessageSend(#methodModified: -> a NautilusUI)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MethodModified
		subs: 	an Array(a LegacyWeakSubscription(a WeakMessageSend(#event: -> KMPragmaKe...etc...
		startIndex: 	1
		index: 	2
		subscription: 	a LegacyWeakSubscription(a WeakMessageSend(#methodModified: -> a ...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(a LegacyWeakSubscription(a WeakMessageSend(#added...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MethodModified
		subs: 	an Array(a LegacyWeakSubscription(a WeakMessageSend(#event: -> KMPragmaKe...etc...
		startIndex: 	1
		subscription: 	a LegacyWeakSubscription(a WeakMessageSend(#methodModified: -> a ...etc...
		index: 	2
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(a LegacyWeakSubscription(a WeakMessageSend(#added...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MethodModified
		subs: 	an Array(a LegacyWeakSubscription(a WeakMessageSend(#event: -> KMPragmaKe...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(a LegacyWeakSubscription(a WeakMessageSend(#added...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(a LegacyWeakSubscription(a WeakMessageSend(#e...etc...
		anAnnouncement: 	a MethodModified
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(a LegacyWeakSubscription(a WeakMessageSend(#added...etc...
		monitor: 	a Semaphore()


SystemAnnouncer(Announcer)>>announce:
	Receiver: a SystemAnnouncer
	Arguments and temporary variables: 
		anAnnouncement: 	a MethodModified
		announcement: 	a MethodModified
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspended: 	false
		private: 	an Announcer
		storedAnnouncements: 	nil


SystemAnnouncer>>announce:
	Receiver: a SystemAnnouncer
	Arguments and temporary variables: 
		anAnnouncement: 	a MethodModified
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspended: 	false
		private: 	an Announcer
		storedAnnouncements: 	nil



--- The full stack ---
BlockClosure(Object)>>doesNotUnderstand: #sendsSelector:
[ :cm | cm sendsSelector: #subclassResponsibility ] in Pile class(Behavior)>>hasAbstractMethods
[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in Array(Collection)>>anySatisfy:
Array(SequenceableCollection)>>do:
Array(Collection)>>anySatisfy:
Pile class(Behavior)>>hasAbstractMethods
Pile class(Class)>>hasAbstractMethods
ClassWidget>>buildTabbedNameOf:
ClassWidget>>classWrapper:
FTPluggableIconListMorphAdaptorDataSource>>elementWrapped:
FTPluggableIconListMorphAdaptorDataSource>>cellColumn:row:
FTTableContainerMorph>>updateExposedRows
FTPluggableIconListMorphAdaptor(FTTableMorph)>>resetPosition
FTPluggableIconListMorphAdaptor>>updateList
FTPluggableIconListMorphAdaptor>>update:
[ :aDependent | aDependent update: aParameter ] in ClassWidget(Model)>>changed:
DependentsArray>>do:
ClassWidget(Model)>>changed:
ClassWidget(AbstractWidget)>>update:
[ :aDependent | aDependent update: aParameter ] in NautilusUI(Model)>>changed:
DependentsArray>>do:
NautilusUI(Model)>>changed:
NautilusUI(AbstractNautilusUI)>>changed:
NautilusUI(AbstractNautilusUI)>>updateClassView
NautilusUI>>methodModified:
WeakMessageSend>>value:
WeakMessageSend>>cull:
WeakMessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in LegacyWeakSubscription(WeakAnnouncementSubscription)>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
LegacyWeakSubscription(WeakAnnouncementSubscription)>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
SystemAnnouncer(Announcer)>>announce:
SystemAnnouncer>>announce:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
SystemAnnouncer>>methodChangedFrom:to:oldProtocol:
IDM class(ClassDescription)>>addAndClassifySelector:withMethod:inProtocol:notifying:
IDM class(ClassDescription)>>compile:classified:withStamp:notifying:logSource:
IDM class(ClassDescription)>>compile:classified:withStamp:notifying:
IDM class(ClassDescription)>>compile:classified:notifying:
NautilusUI(AbstractTool)>>compileANewMethodInClass:categorized:from:notifyng:
NautilusUI>>compileAMethodFromCategory:withSource:notifying:
MethodDefinitionAcceptor>>accept:notifying:
NautilusUI>>compileSource:notifying:
NautilusUI(AbstractNautilusUI)>>whenTextAcceptedInView:
MessageSend>>value:
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubScrolledTextMorph>>acceptContents
RubScrolledTextMorph>>whenTextAcceptRequest:
MessageSend>>value:
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(RubAbstractTextArea)>>announce:
[ :view | view textArea announce: (RubTextAcceptRequest morph: view textArea) ] in RubScrolledTextModel>>acceptEditsInView
RubScrolledTextMorph>>whenConfigurationChanged:
MessageSend>>value:
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubScrolledTextMorph>>whenConfigurationChangedFromModel:
MessageSend>>value:
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubScrolledTextModel>>announce:
RubScrolledTextModel>>reconfigureViewWith:
RubScrolledTextModel>>acceptEditsInView
NautilusUI(AbstractNautilusUI)>>acceptSourceCodeFromView
NautilusUI(AbstractNautilusUI)>>okToChange
NautilusUI(AbstractNautilusUI)>>okToChangeSourceAndComment
NautilusUI(AbstractNautilusUI)>>showInstance:
NautilusUI(AbstractNautilusUI)>>toggleShowInstance
NautilusUI(AbstractNautilusUI)>>instanceButtonAction:
PluggableToggleButtonMorph>>performAction:
[ :m | 
(m containsPoint: evt cursorPoint)
	ifTrue: [ m enabled
			ifTrue: [ m performAction: evt ] ] ] in PluggableToggleButtonMorph(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
PluggableToggleButtonMorph(PluggableButtonMorph)>>mouseUp:
PluggableToggleButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableToggleButtonMorph(Morph)>>handleEvent:
PluggableToggleButtonMorph(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of BlockClosure did not understand #sendsSelector:
28 September 2018 11:32:26.066947 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

BlockClosure(Object)>>doesNotUnderstand: #sendsSelector:
	Receiver: [  ]
	Arguments and temporary variables: 
		aMessage: 	sendsSelector: #subclassResponsibility
		exception: 	MessageNotUnderstood: BlockClosure>>sendsSelector:
		resumeValue: 	nil
	Receiver's instance variables: 
		outerContext: 	IDM>>idmPile
		startpc: 	130
		numArgs: 	0


Message>>sentTo:
	Receiver: sendsSelector: #subclassResponsibility
	Arguments and temporary variables: 
		receiver: 	[  ]
	Receiver's instance variables: 
		selector: 	#sendsSelector:
		args: 	#(#subclassResponsibility)
		lookupClass: 	BlockClosure


BlockClosure(Object)>>doesNotUnderstand: #sendsSelector:
	Receiver: [  ]
	Arguments and temporary variables: 
		aMessage: 	sendsSelector: #subclassResponsibility
		exception: 	MessageNotUnderstood: BlockClosure>>sendsSelector:
		resumeValue: 	MessageNotUnderstood: BlockClosure>>sendsSelector:
	Receiver's instance variables: 
		outerContext: 	IDM>>idmPile
		startpc: 	130
		numArgs: 	0


[ :cm | cm sendsSelector: #subclassResponsibility ] in Pile class(Behavior)>>hasAbstractMethods
	Receiver: Pile
	Arguments and temporary variables: 
		cm: 	[  ]
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#capacity->Pile>>#capacity #do:->Pile>>#do: #gro...etc...
		format: 	65539
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{PileTypee. PileGrossissante}
		name: 	#Pile
		classPool: 	a Dictionary(#tailleDefaut->5 )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#MetaProg
		traitComposition: 	{}
		localSelectors: 	nil


[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in Array(Collection)>>anySatisfy:
	Receiver: an Array(Pile>>#size Pile>>#push: [  ] Pile>>#isFull Pile>>#do: Pile>>#initialize: Pile>>#...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :cm | cm sendsSelector: #subclassResponsibility ]
		each: 	[  ]
	Receiver's instance variables: 
an Array(Pile>>#size Pile>>#push: [  ] Pile>>#isFull Pile>>#do: Pile>>#initialize: Pile>>#...etc...

Array(SequenceableCollection)>>do:
	Receiver: an Array(Pile>>#size Pile>>#push: [  ] Pile>>#isFull Pile>>#do: Pile>>#initialize: Pile>>#...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ]
		index: 	3
	Receiver's instance variables: 
an Array(Pile>>#size Pile>>#push: [  ] Pile>>#isFull Pile>>#do: Pile>>#initialize: Pile>>#...etc...

Array(Collection)>>anySatisfy:
	Receiver: an Array(Pile>>#size Pile>>#push: [  ] Pile>>#isFull Pile>>#do: Pile>>#initialize: Pile>>#...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :cm | cm sendsSelector: #subclassResponsibility ]
	Receiver's instance variables: 
an Array(Pile>>#size Pile>>#push: [  ] Pile>>#isFull Pile>>#do: Pile>>#initialize: Pile>>#...etc...

Pile class(Behavior)>>hasAbstractMethods
	Receiver: Pile
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#capacity->Pile>>#capacity #do:->Pile>>#do: #gro...etc...
		format: 	65539
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{PileTypee. PileGrossissante}
		name: 	#Pile
		classPool: 	a Dictionary(#tailleDefaut->5 )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#MetaProg
		traitComposition: 	{}
		localSelectors: 	nil


Pile class(Class)>>hasAbstractMethods
	Receiver: Pile
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#capacity->Pile>>#capacity #do:->Pile>>#do: #gro...etc...
		format: 	65539
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{PileTypee. PileGrossissante}
		name: 	#Pile
		classPool: 	a Dictionary(#tailleDefaut->5 )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#MetaProg
		traitComposition: 	{}
		localSelectors: 	nil


ClassWidget>>buildTabbedNameOf:
	Receiver: a ClassWidget
	Arguments and temporary variables: 
		anElement: 	Pile
		tab: 	'   '
		size: 	0
		stringMorph: 	a StringMorph(702579456)#Pile
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a FTPluggableIconListMorphAdaptor(649379328))
		announceur: 	nil
		model: 	a NautilusUI
		classesList: 	a FTPluggableIconListMorphAdaptor(649379328)
		classesSelection: 	a Dictionary()
		classesListElements: 	an OrderedCollection(IDM Pile PileGrossissante PileTypee T...etc...
		cachedHierarchy: 	a SortHierarchically
		showHierarchy: 	false


ClassWidget>>classWrapper:
	Receiver: a ClassWidget
	Arguments and temporary variables: 
		anElement: 	Pile
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a FTPluggableIconListMorphAdaptor(649379328))
		announceur: 	nil
		model: 	a NautilusUI
		classesList: 	a FTPluggableIconListMorphAdaptor(649379328)
		classesSelection: 	a Dictionary()
		classesListElements: 	an OrderedCollection(IDM Pile PileGrossissante PileTypee T...etc...
		cachedHierarchy: 	a SortHierarchically
		showHierarchy: 	false


FTPluggableIconListMorphAdaptorDataSource>>elementWrapped:
	Receiver: a FTPluggableIconListMorphAdaptorDataSource
	Arguments and temporary variables: 
		object: 	Pile
		selector: 	#classWrapper:
	Receiver's instance variables: 
		table: 	a FTPluggableIconListMorphAdaptor(649379328)
		model: 	a ClassWidget
		getListSelector: 	nil
		getListElementSelector: 	#getClassItem:
		wrapSelector: 	#classWrapper:
		getIconSelector: 	#classIconFor:
		getListSizeSelector: 	#classListSize
		getMenuSelector: 	#classesMenu:shifted:
		dropItemSelector: 	#dropInClass:inARow:
		wantsDropSelector: 	nil


FTPluggableIconListMorphAdaptorDataSource>>cellColumn:row:
	Receiver: a FTPluggableIconListMorphAdaptorDataSource
	Arguments and temporary variables: 
		column: 	a FTColumn
		rowIndex: 	2
		object: 	Pile
		text: 	nil
		icon: 	Form(16x16x32)
	Receiver's instance variables: 
		table: 	a FTPluggableIconListMorphAdaptor(649379328)
		model: 	a ClassWidget
		getListSelector: 	nil
		getListElementSelector: 	#getClassItem:
		wrapSelector: 	#classWrapper:
		getIconSelector: 	#classIconFor:
		getListSizeSelector: 	#classListSize
		getMenuSelector: 	#classesMenu:shifted:
		dropItemSelector: 	#dropInClass:inARow:
		wantsDropSelector: 	nil


FTTableContainerMorph>>updateExposedRows
	Receiver: a FTTableContainerMorph(882312192)
	Arguments and temporary variables: 
		visibleRows: 	11
		numberOfColumns: 	1
		columns: 	an Array(a FTColumn)
		columnWidths: 	#(233.0)
		startIndex: 	1
		rowIndex: 	2
		row: 	a FTTableRowMorph(317574144)
		columnIndex: 	1
		cell: 	nil
	Receiver's instance variables: 
		bounds: 	(1059.0@455.0) corner: (1292.0@676.0)
		owner: 	a FTPluggableIconListMorphAdaptor(649379328)
		submorphs: 	an Array(a FTTableRowMorph(688675584) a FTTableRowMorph(713692416) a...etc...
		fullBounds: 	(1059@455) corner: (1292@676)
		color: 	Color transparent
		extension: 	a MorphExtension (262015488) [other:  (errorOnDraw -> true) (drawErr...etc...
		needsRefreshExposedRows: 	true
		headerRow: 	nil
		exposedRows: 	a SmallDictionary(1->a FTTableRowMorph(974730752))


FTPluggableIconListMorphAdaptor(FTTableMorph)>>resetPosition
	Receiver: a FTPluggableIconListMorphAdaptor(649379328)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1059.0@455.0) corner: (1292.0@676.0)
		owner: 	a PanelMorph(609962240)
		submorphs: 	an Array(a FTTableContainerMorph(882312192))
		fullBounds: 	(1059@455) corner: (1292@676)
		color: 	(Color r: 0.13 g: 0.13 b: 0.13 alpha: 1.0)
		extension: 	a MorphExtension (292717568) [other:  (announcer -> an Announcer) (k...etc...
		container: 	a FTTableContainerMorph(882312192)
		verticalScrollBar: 	a ScrollBar(895827456)
		selectionColor: 	nil
		showIndex: 	1
		dataSource: 	a FTPluggableIconListMorphAdaptorDataSource
		intercellSpacing: 	nil
		rowHeight: 	20.333333333333336
		selectedRowIndexes: 	#()
		highlightedRowIndexes: 	#()
		selectionStrategy: 	a FTMultipleSelection
		columns: 	an Array(a FTColumn)
		secondarySelectionColor: 	nil
		headerColor: 	nil
		showColumnHeaders: 	false
		allowsDeselection: 	true
		needToggleAtMouseUp: 	false
		function: 	a FTSearchFunction
		resizable: 	false
		setSelectionListSelector: 	#classSelectionAt:put:
		getSelectionListSelector: 	#classSelectionAt:
		setIndexSelector: 	#selectedClassIndex:
		getIndexSelector: 	#selectedClassIndex
		keystrokeSelector: 	#keyPressedOnList:shifted:
		resetListSelector: 	#resetClassSelection
		doubleClickSelector: 	#doubleClick:
		keystrokeActionSelector: 	nil


FTPluggableIconListMorphAdaptor>>updateList
	Receiver: a FTPluggableIconListMorphAdaptor(649379328)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1059.0@455.0) corner: (1292.0@676.0)
		owner: 	a PanelMorph(609962240)
		submorphs: 	an Array(a FTTableContainerMorph(882312192))
		fullBounds: 	(1059@455) corner: (1292@676)
		color: 	(Color r: 0.13 g: 0.13 b: 0.13 alpha: 1.0)
		extension: 	a MorphExtension (292717568) [other:  (announcer -> an Announcer) (k...etc...
		container: 	a FTTableContainerMorph(882312192)
		verticalScrollBar: 	a ScrollBar(895827456)
		selectionColor: 	nil
		showIndex: 	1
		dataSource: 	a FTPluggableIconListMorphAdaptorDataSource
		intercellSpacing: 	nil
		rowHeight: 	20.333333333333336
		selectedRowIndexes: 	#()
		highlightedRowIndexes: 	#()
		selectionStrategy: 	a FTMultipleSelection
		columns: 	an Array(a FTColumn)
		secondarySelectionColor: 	nil
		headerColor: 	nil
		showColumnHeaders: 	false
		allowsDeselection: 	true
		needToggleAtMouseUp: 	false
		function: 	a FTSearchFunction
		resizable: 	false
		setSelectionListSelector: 	#classSelectionAt:put:
		getSelectionListSelector: 	#classSelectionAt:
		setIndexSelector: 	#selectedClassIndex:
		getIndexSelector: 	#selectedClassIndex
		keystrokeSelector: 	#keyPressedOnList:shifted:
		resetListSelector: 	#resetClassSelection
		doubleClickSelector: 	#doubleClick:
		keystrokeActionSelector: 	nil


FTPluggableIconListMorphAdaptor>>update:
	Receiver: a FTPluggableIconListMorphAdaptor(649379328)
	Arguments and temporary variables: 
		symbol: 	#getClassItem:
	Receiver's instance variables: 
		bounds: 	(1059.0@455.0) corner: (1292.0@676.0)
		owner: 	a PanelMorph(609962240)
		submorphs: 	an Array(a FTTableContainerMorph(882312192))
		fullBounds: 	(1059@455) corner: (1292@676)
		color: 	(Color r: 0.13 g: 0.13 b: 0.13 alpha: 1.0)
		extension: 	a MorphExtension (292717568) [other:  (announcer -> an Announcer) (k...etc...
		container: 	a FTTableContainerMorph(882312192)
		verticalScrollBar: 	a ScrollBar(895827456)
		selectionColor: 	nil
		showIndex: 	1
		dataSource: 	a FTPluggableIconListMorphAdaptorDataSource
		intercellSpacing: 	nil
		rowHeight: 	20.333333333333336
		selectedRowIndexes: 	#()
		highlightedRowIndexes: 	#()
		selectionStrategy: 	a FTMultipleSelection
		columns: 	an Array(a FTColumn)
		secondarySelectionColor: 	nil
		headerColor: 	nil
		showColumnHeaders: 	false
		allowsDeselection: 	true
		needToggleAtMouseUp: 	false
		function: 	a FTSearchFunction
		resizable: 	false
		setSelectionListSelector: 	#classSelectionAt:put:
		getSelectionListSelector: 	#classSelectionAt:
		setIndexSelector: 	#selectedClassIndex:
		getIndexSelector: 	#selectedClassIndex
		keystrokeSelector: 	#keyPressedOnList:shifted:
		resetListSelector: 	#resetClassSelection
		doubleClickSelector: 	#doubleClick:
		keystrokeActionSelector: 	nil


[ :aDependent | aDependent update: aParameter ] in ClassWidget(Model)>>changed:
	Receiver: a ClassWidget
	Arguments and temporary variables: 
		aParameter: 	#getClassItem:
		aDependent: 	a FTPluggableIconListMorphAdaptor(649379328)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a FTPluggableIconListMorphAdaptor(649379328))
		announceur: 	nil
		model: 	a NautilusUI
		classesList: 	a FTPluggableIconListMorphAdaptor(649379328)
		classesSelection: 	a Dictionary()
		classesListElements: 	an OrderedCollection(IDM Pile PileGrossissante PileTypee T...etc...
		cachedHierarchy: 	a SortHierarchically
		showHierarchy: 	false


DependentsArray>>do:
	Receiver: a DependentsArray(a FTPluggableIconListMorphAdaptor(649379328))
	Arguments and temporary variables: 
		aBlock: 	[ :aDependent | aDependent update: aParameter ]
		dep: 	a FTPluggableIconListMorphAdaptor(649379328)
		i: 	1
	Receiver's instance variables: 
a DependentsArray(a FTPluggableIconListMorphAdaptor(649379328))

ClassWidget(Model)>>changed:
	Receiver: a ClassWidget
	Arguments and temporary variables: 
		aParameter: 	#getClassItem:
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a FTPluggableIconListMorphAdaptor(649379328))
		announceur: 	nil
		model: 	a NautilusUI
		classesList: 	a FTPluggableIconListMorphAdaptor(649379328)
		classesSelection: 	a Dictionary()
		classesListElements: 	an OrderedCollection(IDM Pile PileGrossissante PileTypee T...etc...
		cachedHierarchy: 	a SortHierarchically
		showHierarchy: 	false


ClassWidget(AbstractWidget)>>update:
	Receiver: a ClassWidget
	Arguments and temporary variables: 
		aSymbol: 	#getClassItem:
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a FTPluggableIconListMorphAdaptor(649379328))
		announceur: 	nil
		model: 	a NautilusUI
		classesList: 	a FTPluggableIconListMorphAdaptor(649379328)
		classesSelection: 	a Dictionary()
		classesListElements: 	an OrderedCollection(IDM Pile PileGrossissante PileTypee T...etc...
		cachedHierarchy: 	a SortHierarchically
		showHierarchy: 	false


[ :aDependent | aDependent update: aParameter ] in NautilusUI(Model)>>changed:
	Receiver: a NautilusUI
	Arguments and temporary variables: 
		aParameter: 	#getClassItem:
		aDependent: 	a ClassWidget
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		announceur: 	nil
		model: 	a Nautilus
		window: 	a NautilusWindow(1021156352)
		sourceCodePanel: 	a PanelMorph(832888064)
		fullDisplayedComment: 	false
		sourceCodeContainer: 	a PanelMorph(1054231808)
		shouldUpdateTitle: 	true
		contentSelection: 	a Text for 'idmPile
	(Smalltalk at: #PileGrossissante)
		ifFa...etc...
		acceptor: 	a MethodDefinitionAcceptor
		commentWidget: 	nil
		sourceTextWidget: 	a RubScrolledTextMorph(537463296)
		sourceCodeSelectionInterval: 	(1 to: 359)
		sourceTextModel: 	a RubScrolledTextModel
		methodClassifier: 	nil
		commentTextModel: 	a RubScrolledTextModel
		instanceButtonWidget: 	a PluggableToggleButtonMorph(1068761344)
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageWidget
		packagePatternString: 	'MetaProg'
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(669064448)


DependentsArray>>do:
	Receiver: a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a PackageWidget a Nautilus...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :aDependent | aDependent update: aParameter ]
		dep: 	a ClassWidget
		i: 	3
	Receiver's instance variables: 
a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a PackageWidget a Nautilus...etc...

NautilusUI(Model)>>changed:
	Receiver: a NautilusUI
	Arguments and temporary variables: 
		aParameter: 	#getClassItem:
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		announceur: 	nil
		model: 	a Nautilus
		window: 	a NautilusWindow(1021156352)
		sourceCodePanel: 	a PanelMorph(832888064)
		fullDisplayedComment: 	false
		sourceCodeContainer: 	a PanelMorph(1054231808)
		shouldUpdateTitle: 	true
		contentSelection: 	a Text for 'idmPile
	(Smalltalk at: #PileGrossissante)
		ifFa...etc...
		acceptor: 	a MethodDefinitionAcceptor
		commentWidget: 	nil
		sourceTextWidget: 	a RubScrolledTextMorph(537463296)
		sourceCodeSelectionInterval: 	(1 to: 359)
		sourceTextModel: 	a RubScrolledTextModel
		methodClassifier: 	nil
		commentTextModel: 	a RubScrolledTextModel
		instanceButtonWidget: 	a PluggableToggleButtonMorph(1068761344)
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageWidget
		packagePatternString: 	'MetaProg'
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(669064448)


NautilusUI(AbstractNautilusUI)>>changed:
	Receiver: a NautilusUI
	Arguments and temporary variables: 
		aSymbol: 	#getClassItem:
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		announceur: 	nil
		model: 	a Nautilus
		window: 	a NautilusWindow(1021156352)
		sourceCodePanel: 	a PanelMorph(832888064)
		fullDisplayedComment: 	false
		sourceCodeContainer: 	a PanelMorph(1054231808)
		shouldUpdateTitle: 	true
		contentSelection: 	a Text for 'idmPile
	(Smalltalk at: #PileGrossissante)
		ifFa...etc...
		acceptor: 	a MethodDefinitionAcceptor
		commentWidget: 	nil
		sourceTextWidget: 	a RubScrolledTextMorph(537463296)
		sourceCodeSelectionInterval: 	(1 to: 359)
		sourceTextModel: 	a RubScrolledTextModel
		methodClassifier: 	nil
		commentTextModel: 	a RubScrolledTextModel
		instanceButtonWidget: 	a PluggableToggleButtonMorph(1068761344)
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageWidget
		packagePatternString: 	'MetaProg'
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(669064448)


NautilusUI(AbstractNautilusUI)>>updateClassView
	Receiver: a NautilusUI
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		announceur: 	nil
		model: 	a Nautilus
		window: 	a NautilusWindow(1021156352)
		sourceCodePanel: 	a PanelMorph(832888064)
		fullDisplayedComment: 	false
		sourceCodeContainer: 	a PanelMorph(1054231808)
		shouldUpdateTitle: 	true
		contentSelection: 	a Text for 'idmPile
	(Smalltalk at: #PileGrossissante)
		ifFa...etc...
		acceptor: 	a MethodDefinitionAcceptor
		commentWidget: 	nil
		sourceTextWidget: 	a RubScrolledTextMorph(537463296)
		sourceCodeSelectionInterval: 	(1 to: 359)
		sourceTextModel: 	a RubScrolledTextModel
		methodClassifier: 	nil
		commentTextModel: 	a RubScrolledTextModel
		instanceButtonWidget: 	a PluggableToggleButtonMorph(1068761344)
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageWidget
		packagePatternString: 	'MetaProg'
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(669064448)


NautilusUI>>methodModified:
	Receiver: a NautilusUI
	Arguments and temporary variables: 
		anAnnouncement: 	a MethodModified
		collection: 	an OrderedCollection(IDM Pile PileGrossissante PileTypee TestPile)
		nonMetaMethodClass: 	IDM
		method: 	IDM>>#idmPile
		selectedMethod: 	IDM>>#idmPile
		oldMethod: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		announceur: 	nil
		model: 	a Nautilus
		window: 	a NautilusWindow(1021156352)
		sourceCodePanel: 	a PanelMorph(832888064)
		fullDisplayedComment: 	false
		sourceCodeContainer: 	a PanelMorph(1054231808)
		shouldUpdateTitle: 	true
		contentSelection: 	a Text for 'idmPile
	(Smalltalk at: #PileGrossissante)
		ifFa...etc...
		acceptor: 	a MethodDefinitionAcceptor
		commentWidget: 	nil
		sourceTextWidget: 	a RubScrolledTextMorph(537463296)
		sourceCodeSelectionInterval: 	(1 to: 359)
		sourceTextModel: 	a RubScrolledTextModel
		methodClassifier: 	nil
		commentTextModel: 	a RubScrolledTextModel
		instanceButtonWidget: 	a PluggableToggleButtonMorph(1068761344)
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageWidget
		packagePatternString: 	'MetaProg'
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(669064448)


WeakMessageSend>>value:
	Receiver: a WeakMessageSend(#methodModified: -> a NautilusUI)
	Arguments and temporary variables: 
		anObject: 	a MethodModified
		strongReceiver: 	a NautilusUI
	Receiver's instance variables: 
		selector: 	#methodModified:
		shouldBeNil: 	#()
		arguments: 	a WeakArray()


WeakMessageSend>>cull:
	Receiver: a WeakMessageSend(#methodModified: -> a NautilusUI)
	Arguments and temporary variables: 
		arg: 	a MethodModified
	Receiver's instance variables: 
		selector: 	#methodModified:
		shouldBeNil: 	#()
		arguments: 	a WeakArray()


WeakMessageSend>>cull:cull:
	Receiver: a WeakMessageSend(#methodModified: -> a NautilusUI)
	Arguments and temporary variables: 
		arg1: 	a MethodModified
		arg2: 	a SystemAnnouncer
	Receiver's instance variables: 
		selector: 	#methodModified:
		shouldBeNil: 	#()
		arguments: 	a WeakArray()


[ action cull: anAnnouncement cull: announcer ] in LegacyWeakSubscription(WeakAnnouncementSubscription)>>deliver:
	Receiver: a LegacyWeakSubscription(a WeakMessageSend(#methodModified: -> a NautilusUI))
	Arguments and temporary variables: 
		anAnnouncement: 	a MethodModified
	Receiver's instance variables: 
		list: 	a WeakFinalizationList
		next: 	nil
		announcer: 	a SystemAnnouncer
		announcementClass: 	MethodModified
		action: 	a WeakMessageSend(#methodModified: -> a NautilusUI)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	LegacyWeakSubscription(WeakAnnouncementSubscription)>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	LegacyWeakSubscription(WeakAnnouncementSubscription)>>deliver:
		startpc: 	83
		numArgs: 	0


LegacyWeakSubscription(WeakAnnouncementSubscription)>>deliver:
	Receiver: a LegacyWeakSubscription(a WeakMessageSend(#methodModified: -> a NautilusUI))
	Arguments and temporary variables: 
		anAnnouncement: 	a MethodModified
	Receiver's instance variables: 
		list: 	a WeakFinalizationList
		next: 	nil
		announcer: 	a SystemAnnouncer
		announcementClass: 	MethodModified
		action: 	a WeakMessageSend(#methodModified: -> a NautilusUI)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MethodModified
		subs: 	an Array(a LegacyWeakSubscription(a WeakMessageSend(#event: -> KMPragmaKe...etc...
		startIndex: 	1
		index: 	2
		subscription: 	a LegacyWeakSubscription(a WeakMessageSend(#methodModified: -> a ...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(a LegacyWeakSubscription(a WeakMessageSend(#added...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MethodModified
		subs: 	an Array(a LegacyWeakSubscription(a WeakMessageSend(#event: -> KMPragmaKe...etc...
		startIndex: 	1
		subscription: 	a LegacyWeakSubscription(a WeakMessageSend(#methodModified: -> a ...etc...
		index: 	2
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(a LegacyWeakSubscription(a WeakMessageSend(#added...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MethodModified
		subs: 	an Array(a LegacyWeakSubscription(a WeakMessageSend(#event: -> KMPragmaKe...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(a LegacyWeakSubscription(a WeakMessageSend(#added...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(a LegacyWeakSubscription(a WeakMessageSend(#e...etc...
		anAnnouncement: 	a MethodModified
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(a LegacyWeakSubscription(a WeakMessageSend(#added...etc...
		monitor: 	a Semaphore()



--- The full stack ---
BlockClosure(Object)>>doesNotUnderstand: #sendsSelector:
Message>>sentTo:
BlockClosure(Object)>>doesNotUnderstand: #sendsSelector:
[ :cm | cm sendsSelector: #subclassResponsibility ] in Pile class(Behavior)>>hasAbstractMethods
[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in Array(Collection)>>anySatisfy:
Array(SequenceableCollection)>>do:
Array(Collection)>>anySatisfy:
Pile class(Behavior)>>hasAbstractMethods
Pile class(Class)>>hasAbstractMethods
ClassWidget>>buildTabbedNameOf:
ClassWidget>>classWrapper:
FTPluggableIconListMorphAdaptorDataSource>>elementWrapped:
FTPluggableIconListMorphAdaptorDataSource>>cellColumn:row:
FTTableContainerMorph>>updateExposedRows
FTPluggableIconListMorphAdaptor(FTTableMorph)>>resetPosition
FTPluggableIconListMorphAdaptor>>updateList
FTPluggableIconListMorphAdaptor>>update:
[ :aDependent | aDependent update: aParameter ] in ClassWidget(Model)>>changed:
DependentsArray>>do:
ClassWidget(Model)>>changed:
ClassWidget(AbstractWidget)>>update:
[ :aDependent | aDependent update: aParameter ] in NautilusUI(Model)>>changed:
DependentsArray>>do:
NautilusUI(Model)>>changed:
NautilusUI(AbstractNautilusUI)>>changed:
NautilusUI(AbstractNautilusUI)>>updateClassView
NautilusUI>>methodModified:
WeakMessageSend>>value:
WeakMessageSend>>cull:
WeakMessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in LegacyWeakSubscription(WeakAnnouncementSubscription)>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
LegacyWeakSubscription(WeakAnnouncementSubscription)>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
SystemAnnouncer(Announcer)>>announce:
SystemAnnouncer>>announce:
SystemAnnouncer>>methodChangedFrom:to:oldProtocol:
IDM class(ClassDescription)>>addAndClassifySelector:withMethod:inProtocol:notifying:
IDM class(ClassDescription)>>compile:classified:withStamp:notifying:logSource:
IDM class(ClassDescription)>>compile:classified:withStamp:notifying:
IDM class(ClassDescription)>>compile:classified:notifying:
NautilusUI(AbstractTool)>>compileANewMethodInClass:categorized:from:notifyng:
NautilusUI>>compileAMethodFromCategory:withSource:notifying:
MethodDefinitionAcceptor>>accept:notifying:
NautilusUI>>compileSource:notifying:
NautilusUI(AbstractNautilusUI)>>whenTextAcceptedInView:
MessageSend>>value:
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubScrolledTextMorph>>acceptContents
RubScrolledTextMorph>>whenTextAcceptRequest:
MessageSend>>value:
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(RubAbstractTextArea)>>announce:
[ :view | view textArea announce: (RubTextAcceptRequest morph: view textArea) ] in RubScrolledTextModel>>acceptEditsInView
RubScrolledTextMorph>>whenConfigurationChanged:
MessageSend>>value:
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubScrolledTextMorph>>whenConfigurationChangedFromModel:
MessageSend>>value:
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubScrolledTextModel>>announce:
RubScrolledTextModel>>reconfigureViewWith:
RubScrolledTextModel>>acceptEditsInView
NautilusUI(AbstractNautilusUI)>>acceptSourceCodeFromView
NautilusUI(AbstractNautilusUI)>>okToChange
NautilusUI(AbstractNautilusUI)>>okToChangeSourceAndComment
NautilusUI(AbstractNautilusUI)>>showInstance:
NautilusUI(AbstractNautilusUI)>>toggleShowInstance
NautilusUI(AbstractNautilusUI)>>instanceButtonAction:
PluggableToggleButtonMorph>>performAction:
[ :m | 
(m containsPoint: evt cursorPoint)
	ifTrue: [ m enabled
			ifTrue: [ m performAction: evt ] ] ] in PluggableToggleButtonMorph(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
PluggableToggleButtonMorph(PluggableButtonMorph)>>mouseUp:
PluggableToggleButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableToggleButtonMorph(Morph)>>handleEvent:
PluggableToggleButtonMorph(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of BlockClosure did not understand #sendsSelector:
28 September 2018 11:32:26.965746 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

BlockClosure(Object)>>doesNotUnderstand: #sendsSelector:
	Receiver: [  ]
	Arguments and temporary variables: 
		aMessage: 	sendsSelector: #subclassResponsibility
		exception: 	MessageNotUnderstood: BlockClosure>>sendsSelector:
		resumeValue: 	nil
	Receiver's instance variables: 
		outerContext: 	IDM>>idmPile
		startpc: 	130
		numArgs: 	0


Message>>sentTo:
	Receiver: sendsSelector: #subclassResponsibility
	Arguments and temporary variables: 
		receiver: 	[  ]
	Receiver's instance variables: 
		selector: 	#sendsSelector:
		args: 	#(#subclassResponsibility)
		lookupClass: 	BlockClosure


BlockClosure(Object)>>doesNotUnderstand: #sendsSelector:
	Receiver: [  ]
	Arguments and temporary variables: 
		aMessage: 	sendsSelector: #subclassResponsibility
		exception: 	MessageNotUnderstood: BlockClosure>>sendsSelector:
		resumeValue: 	MessageNotUnderstood: BlockClosure>>sendsSelector:
	Receiver's instance variables: 
		outerContext: 	IDM>>idmPile
		startpc: 	130
		numArgs: 	0


Message>>sentTo:
	Receiver: sendsSelector: #subclassResponsibility
	Arguments and temporary variables: 
		receiver: 	[  ]
	Receiver's instance variables: 
		selector: 	#sendsSelector:
		args: 	#(#subclassResponsibility)
		lookupClass: 	BlockClosure


BlockClosure(Object)>>doesNotUnderstand: #sendsSelector:
	Receiver: [  ]
	Arguments and temporary variables: 
		aMessage: 	sendsSelector: #subclassResponsibility
		exception: 	MessageNotUnderstood: BlockClosure>>sendsSelector:
		resumeValue: 	MessageNotUnderstood: BlockClosure>>sendsSelector:
	Receiver's instance variables: 
		outerContext: 	IDM>>idmPile
		startpc: 	130
		numArgs: 	0


[ :cm | cm sendsSelector: #subclassResponsibility ] in Pile class(Behavior)>>hasAbstractMethods
	Receiver: Pile
	Arguments and temporary variables: 
		cm: 	[  ]
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#capacity->Pile>>#capacity #do:->Pile>>#do: #gro...etc...
		format: 	65539
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{PileTypee. PileGrossissante}
		name: 	#Pile
		classPool: 	a Dictionary(#tailleDefaut->5 )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#MetaProg
		traitComposition: 	{}
		localSelectors: 	nil


[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in Array(Collection)>>anySatisfy:
	Receiver: an Array(Pile>>#size Pile>>#push: [  ] Pile>>#isFull Pile>>#do: Pile>>#initialize: Pile>>#...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :cm | cm sendsSelector: #subclassResponsibility ]
		each: 	[  ]
	Receiver's instance variables: 
an Array(Pile>>#size Pile>>#push: [  ] Pile>>#isFull Pile>>#do: Pile>>#initialize: Pile>>#...etc...

Array(SequenceableCollection)>>do:
	Receiver: an Array(Pile>>#size Pile>>#push: [  ] Pile>>#isFull Pile>>#do: Pile>>#initialize: Pile>>#...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ]
		index: 	3
	Receiver's instance variables: 
an Array(Pile>>#size Pile>>#push: [  ] Pile>>#isFull Pile>>#do: Pile>>#initialize: Pile>>#...etc...

Array(Collection)>>anySatisfy:
	Receiver: an Array(Pile>>#size Pile>>#push: [  ] Pile>>#isFull Pile>>#do: Pile>>#initialize: Pile>>#...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :cm | cm sendsSelector: #subclassResponsibility ]
	Receiver's instance variables: 
an Array(Pile>>#size Pile>>#push: [  ] Pile>>#isFull Pile>>#do: Pile>>#initialize: Pile>>#...etc...

Pile class(Behavior)>>hasAbstractMethods
	Receiver: Pile
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#capacity->Pile>>#capacity #do:->Pile>>#do: #gro...etc...
		format: 	65539
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{PileTypee. PileGrossissante}
		name: 	#Pile
		classPool: 	a Dictionary(#tailleDefaut->5 )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#MetaProg
		traitComposition: 	{}
		localSelectors: 	nil


Pile class(Class)>>hasAbstractMethods
	Receiver: Pile
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#capacity->Pile>>#capacity #do:->Pile>>#do: #gro...etc...
		format: 	65539
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{PileTypee. PileGrossissante}
		name: 	#Pile
		classPool: 	a Dictionary(#tailleDefaut->5 )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#MetaProg
		traitComposition: 	{}
		localSelectors: 	nil


ClassWidget>>buildTabbedNameOf:
	Receiver: a ClassWidget
	Arguments and temporary variables: 
		anElement: 	Pile
		tab: 	'   '
		size: 	0
		stringMorph: 	a StringMorph(702579456)#Pile
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a FTPluggableIconListMorphAdaptor(649379328))
		announceur: 	nil
		model: 	a NautilusUI
		classesList: 	a FTPluggableIconListMorphAdaptor(649379328)
		classesSelection: 	a Dictionary()
		classesListElements: 	an OrderedCollection(IDM Pile PileGrossissante PileTypee T...etc...
		cachedHierarchy: 	a SortHierarchically
		showHierarchy: 	false


ClassWidget>>classWrapper:
	Receiver: a ClassWidget
	Arguments and temporary variables: 
		anElement: 	Pile
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a FTPluggableIconListMorphAdaptor(649379328))
		announceur: 	nil
		model: 	a NautilusUI
		classesList: 	a FTPluggableIconListMorphAdaptor(649379328)
		classesSelection: 	a Dictionary()
		classesListElements: 	an OrderedCollection(IDM Pile PileGrossissante PileTypee T...etc...
		cachedHierarchy: 	a SortHierarchically
		showHierarchy: 	false


FTPluggableIconListMorphAdaptorDataSource>>elementWrapped:
	Receiver: a FTPluggableIconListMorphAdaptorDataSource
	Arguments and temporary variables: 
		object: 	Pile
		selector: 	#classWrapper:
	Receiver's instance variables: 
		table: 	a FTPluggableIconListMorphAdaptor(649379328)
		model: 	a ClassWidget
		getListSelector: 	nil
		getListElementSelector: 	#getClassItem:
		wrapSelector: 	#classWrapper:
		getIconSelector: 	#classIconFor:
		getListSizeSelector: 	#classListSize
		getMenuSelector: 	#classesMenu:shifted:
		dropItemSelector: 	#dropInClass:inARow:
		wantsDropSelector: 	nil


FTPluggableIconListMorphAdaptorDataSource>>cellColumn:row:
	Receiver: a FTPluggableIconListMorphAdaptorDataSource
	Arguments and temporary variables: 
		column: 	a FTColumn
		rowIndex: 	2
		object: 	Pile
		text: 	nil
		icon: 	Form(16x16x32)
	Receiver's instance variables: 
		table: 	a FTPluggableIconListMorphAdaptor(649379328)
		model: 	a ClassWidget
		getListSelector: 	nil
		getListElementSelector: 	#getClassItem:
		wrapSelector: 	#classWrapper:
		getIconSelector: 	#classIconFor:
		getListSizeSelector: 	#classListSize
		getMenuSelector: 	#classesMenu:shifted:
		dropItemSelector: 	#dropInClass:inARow:
		wantsDropSelector: 	nil


FTTableContainerMorph>>updateExposedRows
	Receiver: a FTTableContainerMorph(882312192)
	Arguments and temporary variables: 
		visibleRows: 	11
		numberOfColumns: 	1
		columns: 	an Array(a FTColumn)
		columnWidths: 	#(233.0)
		startIndex: 	1
		rowIndex: 	2
		row: 	a FTTableRowMorph(317574144)
		columnIndex: 	1
		cell: 	nil
	Receiver's instance variables: 
		bounds: 	(1059.0@455.0) corner: (1292.0@676.0)
		owner: 	a FTPluggableIconListMorphAdaptor(649379328)
		submorphs: 	an Array(a FTTableRowMorph(688675584) a FTTableRowMorph(713692416) a...etc...
		fullBounds: 	(1059@455) corner: (1292@676)
		color: 	Color transparent
		extension: 	a MorphExtension (262015488) [other:  (errorOnDraw -> true) (drawErr...etc...
		needsRefreshExposedRows: 	true
		headerRow: 	nil
		exposedRows: 	a SmallDictionary(1->a FTTableRowMorph(974730752))


FTPluggableIconListMorphAdaptor(FTTableMorph)>>resetPosition
	Receiver: a FTPluggableIconListMorphAdaptor(649379328)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1059.0@455.0) corner: (1292.0@676.0)
		owner: 	a PanelMorph(609962240)
		submorphs: 	an Array(a FTTableContainerMorph(882312192))
		fullBounds: 	(1059@455) corner: (1292@676)
		color: 	(Color r: 0.13 g: 0.13 b: 0.13 alpha: 1.0)
		extension: 	a MorphExtension (292717568) [other:  (announcer -> an Announcer) (k...etc...
		container: 	a FTTableContainerMorph(882312192)
		verticalScrollBar: 	a ScrollBar(895827456)
		selectionColor: 	nil
		showIndex: 	1
		dataSource: 	a FTPluggableIconListMorphAdaptorDataSource
		intercellSpacing: 	nil
		rowHeight: 	20.333333333333336
		selectedRowIndexes: 	#()
		highlightedRowIndexes: 	#()
		selectionStrategy: 	a FTMultipleSelection
		columns: 	an Array(a FTColumn)
		secondarySelectionColor: 	nil
		headerColor: 	nil
		showColumnHeaders: 	false
		allowsDeselection: 	true
		needToggleAtMouseUp: 	false
		function: 	a FTSearchFunction
		resizable: 	false
		setSelectionListSelector: 	#classSelectionAt:put:
		getSelectionListSelector: 	#classSelectionAt:
		setIndexSelector: 	#selectedClassIndex:
		getIndexSelector: 	#selectedClassIndex
		keystrokeSelector: 	#keyPressedOnList:shifted:
		resetListSelector: 	#resetClassSelection
		doubleClickSelector: 	#doubleClick:
		keystrokeActionSelector: 	nil


FTPluggableIconListMorphAdaptor>>updateList
	Receiver: a FTPluggableIconListMorphAdaptor(649379328)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1059.0@455.0) corner: (1292.0@676.0)
		owner: 	a PanelMorph(609962240)
		submorphs: 	an Array(a FTTableContainerMorph(882312192))
		fullBounds: 	(1059@455) corner: (1292@676)
		color: 	(Color r: 0.13 g: 0.13 b: 0.13 alpha: 1.0)
		extension: 	a MorphExtension (292717568) [other:  (announcer -> an Announcer) (k...etc...
		container: 	a FTTableContainerMorph(882312192)
		verticalScrollBar: 	a ScrollBar(895827456)
		selectionColor: 	nil
		showIndex: 	1
		dataSource: 	a FTPluggableIconListMorphAdaptorDataSource
		intercellSpacing: 	nil
		rowHeight: 	20.333333333333336
		selectedRowIndexes: 	#()
		highlightedRowIndexes: 	#()
		selectionStrategy: 	a FTMultipleSelection
		columns: 	an Array(a FTColumn)
		secondarySelectionColor: 	nil
		headerColor: 	nil
		showColumnHeaders: 	false
		allowsDeselection: 	true
		needToggleAtMouseUp: 	false
		function: 	a FTSearchFunction
		resizable: 	false
		setSelectionListSelector: 	#classSelectionAt:put:
		getSelectionListSelector: 	#classSelectionAt:
		setIndexSelector: 	#selectedClassIndex:
		getIndexSelector: 	#selectedClassIndex
		keystrokeSelector: 	#keyPressedOnList:shifted:
		resetListSelector: 	#resetClassSelection
		doubleClickSelector: 	#doubleClick:
		keystrokeActionSelector: 	nil


FTPluggableIconListMorphAdaptor>>update:
	Receiver: a FTPluggableIconListMorphAdaptor(649379328)
	Arguments and temporary variables: 
		symbol: 	#getClassItem:
	Receiver's instance variables: 
		bounds: 	(1059.0@455.0) corner: (1292.0@676.0)
		owner: 	a PanelMorph(609962240)
		submorphs: 	an Array(a FTTableContainerMorph(882312192))
		fullBounds: 	(1059@455) corner: (1292@676)
		color: 	(Color r: 0.13 g: 0.13 b: 0.13 alpha: 1.0)
		extension: 	a MorphExtension (292717568) [other:  (announcer -> an Announcer) (k...etc...
		container: 	a FTTableContainerMorph(882312192)
		verticalScrollBar: 	a ScrollBar(895827456)
		selectionColor: 	nil
		showIndex: 	1
		dataSource: 	a FTPluggableIconListMorphAdaptorDataSource
		intercellSpacing: 	nil
		rowHeight: 	20.333333333333336
		selectedRowIndexes: 	#()
		highlightedRowIndexes: 	#()
		selectionStrategy: 	a FTMultipleSelection
		columns: 	an Array(a FTColumn)
		secondarySelectionColor: 	nil
		headerColor: 	nil
		showColumnHeaders: 	false
		allowsDeselection: 	true
		needToggleAtMouseUp: 	false
		function: 	a FTSearchFunction
		resizable: 	false
		setSelectionListSelector: 	#classSelectionAt:put:
		getSelectionListSelector: 	#classSelectionAt:
		setIndexSelector: 	#selectedClassIndex:
		getIndexSelector: 	#selectedClassIndex
		keystrokeSelector: 	#keyPressedOnList:shifted:
		resetListSelector: 	#resetClassSelection
		doubleClickSelector: 	#doubleClick:
		keystrokeActionSelector: 	nil


[ :aDependent | aDependent update: aParameter ] in ClassWidget(Model)>>changed:
	Receiver: a ClassWidget
	Arguments and temporary variables: 
		aParameter: 	#getClassItem:
		aDependent: 	a FTPluggableIconListMorphAdaptor(649379328)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a FTPluggableIconListMorphAdaptor(649379328))
		announceur: 	nil
		model: 	a NautilusUI
		classesList: 	a FTPluggableIconListMorphAdaptor(649379328)
		classesSelection: 	a Dictionary()
		classesListElements: 	an OrderedCollection(IDM Pile PileGrossissante PileTypee T...etc...
		cachedHierarchy: 	a SortHierarchically
		showHierarchy: 	false


DependentsArray>>do:
	Receiver: a DependentsArray(a FTPluggableIconListMorphAdaptor(649379328))
	Arguments and temporary variables: 
		aBlock: 	[ :aDependent | aDependent update: aParameter ]
		dep: 	a FTPluggableIconListMorphAdaptor(649379328)
		i: 	1
	Receiver's instance variables: 
a DependentsArray(a FTPluggableIconListMorphAdaptor(649379328))

ClassWidget(Model)>>changed:
	Receiver: a ClassWidget
	Arguments and temporary variables: 
		aParameter: 	#getClassItem:
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a FTPluggableIconListMorphAdaptor(649379328))
		announceur: 	nil
		model: 	a NautilusUI
		classesList: 	a FTPluggableIconListMorphAdaptor(649379328)
		classesSelection: 	a Dictionary()
		classesListElements: 	an OrderedCollection(IDM Pile PileGrossissante PileTypee T...etc...
		cachedHierarchy: 	a SortHierarchically
		showHierarchy: 	false


ClassWidget(AbstractWidget)>>update:
	Receiver: a ClassWidget
	Arguments and temporary variables: 
		aSymbol: 	#getClassItem:
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a FTPluggableIconListMorphAdaptor(649379328))
		announceur: 	nil
		model: 	a NautilusUI
		classesList: 	a FTPluggableIconListMorphAdaptor(649379328)
		classesSelection: 	a Dictionary()
		classesListElements: 	an OrderedCollection(IDM Pile PileGrossissante PileTypee T...etc...
		cachedHierarchy: 	a SortHierarchically
		showHierarchy: 	false


[ :aDependent | aDependent update: aParameter ] in NautilusUI(Model)>>changed:
	Receiver: a NautilusUI
	Arguments and temporary variables: 
		aParameter: 	#getClassItem:
		aDependent: 	a ClassWidget
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		announceur: 	nil
		model: 	a Nautilus
		window: 	a NautilusWindow(1021156352)
		sourceCodePanel: 	a PanelMorph(832888064)
		fullDisplayedComment: 	false
		sourceCodeContainer: 	a PanelMorph(1054231808)
		shouldUpdateTitle: 	true
		contentSelection: 	a Text for 'idmPile
	(Smalltalk at: #PileGrossissante)
		ifFa...etc...
		acceptor: 	a MethodDefinitionAcceptor
		commentWidget: 	nil
		sourceTextWidget: 	a RubScrolledTextMorph(537463296)
		sourceCodeSelectionInterval: 	(1 to: 359)
		sourceTextModel: 	a RubScrolledTextModel
		methodClassifier: 	nil
		commentTextModel: 	a RubScrolledTextModel
		instanceButtonWidget: 	a PluggableToggleButtonMorph(1068761344)
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageWidget
		packagePatternString: 	'MetaProg'
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(669064448)


DependentsArray>>do:
	Receiver: a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a PackageWidget a Nautilus...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :aDependent | aDependent update: aParameter ]
		dep: 	a ClassWidget
		i: 	3
	Receiver's instance variables: 
a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a PackageWidget a Nautilus...etc...

NautilusUI(Model)>>changed:
	Receiver: a NautilusUI
	Arguments and temporary variables: 
		aParameter: 	#getClassItem:
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		announceur: 	nil
		model: 	a Nautilus
		window: 	a NautilusWindow(1021156352)
		sourceCodePanel: 	a PanelMorph(832888064)
		fullDisplayedComment: 	false
		sourceCodeContainer: 	a PanelMorph(1054231808)
		shouldUpdateTitle: 	true
		contentSelection: 	a Text for 'idmPile
	(Smalltalk at: #PileGrossissante)
		ifFa...etc...
		acceptor: 	a MethodDefinitionAcceptor
		commentWidget: 	nil
		sourceTextWidget: 	a RubScrolledTextMorph(537463296)
		sourceCodeSelectionInterval: 	(1 to: 359)
		sourceTextModel: 	a RubScrolledTextModel
		methodClassifier: 	nil
		commentTextModel: 	a RubScrolledTextModel
		instanceButtonWidget: 	a PluggableToggleButtonMorph(1068761344)
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageWidget
		packagePatternString: 	'MetaProg'
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(669064448)


NautilusUI(AbstractNautilusUI)>>changed:
	Receiver: a NautilusUI
	Arguments and temporary variables: 
		aSymbol: 	#getClassItem:
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		announceur: 	nil
		model: 	a Nautilus
		window: 	a NautilusWindow(1021156352)
		sourceCodePanel: 	a PanelMorph(832888064)
		fullDisplayedComment: 	false
		sourceCodeContainer: 	a PanelMorph(1054231808)
		shouldUpdateTitle: 	true
		contentSelection: 	a Text for 'idmPile
	(Smalltalk at: #PileGrossissante)
		ifFa...etc...
		acceptor: 	a MethodDefinitionAcceptor
		commentWidget: 	nil
		sourceTextWidget: 	a RubScrolledTextMorph(537463296)
		sourceCodeSelectionInterval: 	(1 to: 359)
		sourceTextModel: 	a RubScrolledTextModel
		methodClassifier: 	nil
		commentTextModel: 	a RubScrolledTextModel
		instanceButtonWidget: 	a PluggableToggleButtonMorph(1068761344)
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageWidget
		packagePatternString: 	'MetaProg'
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(669064448)


NautilusUI(AbstractNautilusUI)>>updateClassView
	Receiver: a NautilusUI
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		announceur: 	nil
		model: 	a Nautilus
		window: 	a NautilusWindow(1021156352)
		sourceCodePanel: 	a PanelMorph(832888064)
		fullDisplayedComment: 	false
		sourceCodeContainer: 	a PanelMorph(1054231808)
		shouldUpdateTitle: 	true
		contentSelection: 	a Text for 'idmPile
	(Smalltalk at: #PileGrossissante)
		ifFa...etc...
		acceptor: 	a MethodDefinitionAcceptor
		commentWidget: 	nil
		sourceTextWidget: 	a RubScrolledTextMorph(537463296)
		sourceCodeSelectionInterval: 	(1 to: 359)
		sourceTextModel: 	a RubScrolledTextModel
		methodClassifier: 	nil
		commentTextModel: 	a RubScrolledTextModel
		instanceButtonWidget: 	a PluggableToggleButtonMorph(1068761344)
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageWidget
		packagePatternString: 	'MetaProg'
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(669064448)


NautilusUI>>methodModified:
	Receiver: a NautilusUI
	Arguments and temporary variables: 
		anAnnouncement: 	a MethodModified
		collection: 	an OrderedCollection(IDM Pile PileGrossissante PileTypee TestPile)
		nonMetaMethodClass: 	IDM
		method: 	IDM>>#idmPile
		selectedMethod: 	IDM>>#idmPile
		oldMethod: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		announceur: 	nil
		model: 	a Nautilus
		window: 	a NautilusWindow(1021156352)
		sourceCodePanel: 	a PanelMorph(832888064)
		fullDisplayedComment: 	false
		sourceCodeContainer: 	a PanelMorph(1054231808)
		shouldUpdateTitle: 	true
		contentSelection: 	a Text for 'idmPile
	(Smalltalk at: #PileGrossissante)
		ifFa...etc...
		acceptor: 	a MethodDefinitionAcceptor
		commentWidget: 	nil
		sourceTextWidget: 	a RubScrolledTextMorph(537463296)
		sourceCodeSelectionInterval: 	(1 to: 359)
		sourceTextModel: 	a RubScrolledTextModel
		methodClassifier: 	nil
		commentTextModel: 	a RubScrolledTextModel
		instanceButtonWidget: 	a PluggableToggleButtonMorph(1068761344)
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageWidget
		packagePatternString: 	'MetaProg'
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(669064448)


WeakMessageSend>>value:
	Receiver: a WeakMessageSend(#methodModified: -> a NautilusUI)
	Arguments and temporary variables: 
		anObject: 	a MethodModified
		strongReceiver: 	a NautilusUI
	Receiver's instance variables: 
		selector: 	#methodModified:
		shouldBeNil: 	#()
		arguments: 	a WeakArray()


WeakMessageSend>>cull:
	Receiver: a WeakMessageSend(#methodModified: -> a NautilusUI)
	Arguments and temporary variables: 
		arg: 	a MethodModified
	Receiver's instance variables: 
		selector: 	#methodModified:
		shouldBeNil: 	#()
		arguments: 	a WeakArray()


WeakMessageSend>>cull:cull:
	Receiver: a WeakMessageSend(#methodModified: -> a NautilusUI)
	Arguments and temporary variables: 
		arg1: 	a MethodModified
		arg2: 	a SystemAnnouncer
	Receiver's instance variables: 
		selector: 	#methodModified:
		shouldBeNil: 	#()
		arguments: 	a WeakArray()


[ action cull: anAnnouncement cull: announcer ] in LegacyWeakSubscription(WeakAnnouncementSubscription)>>deliver:
	Receiver: a LegacyWeakSubscription(a WeakMessageSend(#methodModified: -> a NautilusUI))
	Arguments and temporary variables: 
		anAnnouncement: 	a MethodModified
	Receiver's instance variables: 
		list: 	a WeakFinalizationList
		next: 	nil
		announcer: 	a SystemAnnouncer
		announcementClass: 	MethodModified
		action: 	a WeakMessageSend(#methodModified: -> a NautilusUI)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	LegacyWeakSubscription(WeakAnnouncementSubscription)>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	LegacyWeakSubscription(WeakAnnouncementSubscription)>>deliver:
		startpc: 	83
		numArgs: 	0


LegacyWeakSubscription(WeakAnnouncementSubscription)>>deliver:
	Receiver: a LegacyWeakSubscription(a WeakMessageSend(#methodModified: -> a NautilusUI))
	Arguments and temporary variables: 
		anAnnouncement: 	a MethodModified
	Receiver's instance variables: 
		list: 	a WeakFinalizationList
		next: 	nil
		announcer: 	a SystemAnnouncer
		announcementClass: 	MethodModified
		action: 	a WeakMessageSend(#methodModified: -> a NautilusUI)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MethodModified
		subs: 	an Array(a LegacyWeakSubscription(a WeakMessageSend(#event: -> KMPragmaKe...etc...
		startIndex: 	1
		index: 	2
		subscription: 	a LegacyWeakSubscription(a WeakMessageSend(#methodModified: -> a ...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(a LegacyWeakSubscription(a WeakMessageSend(#added...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MethodModified
		subs: 	an Array(a LegacyWeakSubscription(a WeakMessageSend(#event: -> KMPragmaKe...etc...
		startIndex: 	1
		subscription: 	a LegacyWeakSubscription(a WeakMessageSend(#methodModified: -> a ...etc...
		index: 	2
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(a LegacyWeakSubscription(a WeakMessageSend(#added...etc...
		monitor: 	a Semaphore()



--- The full stack ---
BlockClosure(Object)>>doesNotUnderstand: #sendsSelector:
Message>>sentTo:
BlockClosure(Object)>>doesNotUnderstand: #sendsSelector:
Message>>sentTo:
BlockClosure(Object)>>doesNotUnderstand: #sendsSelector:
[ :cm | cm sendsSelector: #subclassResponsibility ] in Pile class(Behavior)>>hasAbstractMethods
[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in Array(Collection)>>anySatisfy:
Array(SequenceableCollection)>>do:
Array(Collection)>>anySatisfy:
Pile class(Behavior)>>hasAbstractMethods
Pile class(Class)>>hasAbstractMethods
ClassWidget>>buildTabbedNameOf:
ClassWidget>>classWrapper:
FTPluggableIconListMorphAdaptorDataSource>>elementWrapped:
FTPluggableIconListMorphAdaptorDataSource>>cellColumn:row:
FTTableContainerMorph>>updateExposedRows
FTPluggableIconListMorphAdaptor(FTTableMorph)>>resetPosition
FTPluggableIconListMorphAdaptor>>updateList
FTPluggableIconListMorphAdaptor>>update:
[ :aDependent | aDependent update: aParameter ] in ClassWidget(Model)>>changed:
DependentsArray>>do:
ClassWidget(Model)>>changed:
ClassWidget(AbstractWidget)>>update:
[ :aDependent | aDependent update: aParameter ] in NautilusUI(Model)>>changed:
DependentsArray>>do:
NautilusUI(Model)>>changed:
NautilusUI(AbstractNautilusUI)>>changed:
NautilusUI(AbstractNautilusUI)>>updateClassView
NautilusUI>>methodModified:
WeakMessageSend>>value:
WeakMessageSend>>cull:
WeakMessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in LegacyWeakSubscription(WeakAnnouncementSubscription)>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
LegacyWeakSubscription(WeakAnnouncementSubscription)>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
SystemAnnouncer(Announcer)>>announce:
SystemAnnouncer>>announce:
SystemAnnouncer>>methodChangedFrom:to:oldProtocol:
IDM class(ClassDescription)>>addAndClassifySelector:withMethod:inProtocol:notifying:
IDM class(ClassDescription)>>compile:classified:withStamp:notifying:logSource:
IDM class(ClassDescription)>>compile:classified:withStamp:notifying:
IDM class(ClassDescription)>>compile:classified:notifying:
NautilusUI(AbstractTool)>>compileANewMethodInClass:categorized:from:notifyng:
NautilusUI>>compileAMethodFromCategory:withSource:notifying:
MethodDefinitionAcceptor>>accept:notifying:
NautilusUI>>compileSource:notifying:
NautilusUI(AbstractNautilusUI)>>whenTextAcceptedInView:
MessageSend>>value:
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubScrolledTextMorph>>acceptContents
RubScrolledTextMorph>>whenTextAcceptRequest:
MessageSend>>value:
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(RubAbstractTextArea)>>announce:
[ :view | view textArea announce: (RubTextAcceptRequest morph: view textArea) ] in RubScrolledTextModel>>acceptEditsInView
RubScrolledTextMorph>>whenConfigurationChanged:
MessageSend>>value:
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubScrolledTextMorph>>whenConfigurationChangedFromModel:
MessageSend>>value:
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubScrolledTextModel>>announce:
RubScrolledTextModel>>reconfigureViewWith:
RubScrolledTextModel>>acceptEditsInView
NautilusUI(AbstractNautilusUI)>>acceptSourceCodeFromView
NautilusUI(AbstractNautilusUI)>>okToChange
NautilusUI(AbstractNautilusUI)>>okToChangeSourceAndComment
NautilusUI(AbstractNautilusUI)>>showInstance:
NautilusUI(AbstractNautilusUI)>>toggleShowInstance
NautilusUI(AbstractNautilusUI)>>instanceButtonAction:
PluggableToggleButtonMorph>>performAction:
[ :m | 
(m containsPoint: evt cursorPoint)
	ifTrue: [ m enabled
			ifTrue: [ m performAction: evt ] ] ] in PluggableToggleButtonMorph(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
PluggableToggleButtonMorph(PluggableButtonMorph)>>mouseUp:
PluggableToggleButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableToggleButtonMorph(Morph)>>handleEvent:
PluggableToggleButtonMorph(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
UnwindError
28 September 2018 11:32:28.875631 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

BlockClosure(Object)>>doesNotUnderstand: #selector
	Receiver: [  ]
	Arguments and temporary variables: 
		aMessage: 	selector
		exception: 	MessageNotUnderstood: BlockClosure>>selector
		resumeValue: 	nil
	Receiver's instance variables: 
		outerContext: 	IDM>>idmPile
		startpc: 	130
		numArgs: 	0


[ :e | self justCompiled: e selector in: cls ] in NOCCompletionTable>>quickFillWithClass:
	Receiver: a NOCCompletionTable
	Arguments and temporary variables: 
		cls: 	Pile
		e: 	[  ]
	Receiver's instance variables: 
		table: 	a Dictionary('*'->a NOCEntryList '+'->a NOCEntryList ','->a NOCEntryList...etc...
		numberofEntries: 	40


MethodDictionary>>valuesDo:
	Receiver: a MethodDictionary(#capacity->Pile>>#capacity #do:->Pile>>#do: #grow->[  ] #initialize:->P...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :e | self justCompiled: e selector in: cls ]
		i: 	6
		value: 	[  ]
	Receiver's instance variables: 
		tally: 	11
		array: 	an Array(Pile>>#size nil nil Pile>>#push: nil [  ] nil nil nil Pile>>#is...etc...


Pile class(Behavior)>>methodsDo:
	Receiver: Pile
	Arguments and temporary variables: 
		aBlock: 	[ :e | self justCompiled: e selector in: cls ]
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#capacity->Pile>>#capacity #do:->Pile>>#do: #gro...etc...
		format: 	65539
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{PileTypee. PileGrossissante}
		name: 	#Pile
		classPool: 	a Dictionary(#tailleDefaut->5 )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#MetaProg
		traitComposition: 	{}
		localSelectors: 	nil


NOCCompletionTable>>quickFillWithClass:
	Receiver: a NOCCompletionTable
	Arguments and temporary variables: 
		cls: 	Pile
	Receiver's instance variables: 
		table: 	a Dictionary('*'->a NOCEntryList '+'->a NOCEntryList ','->a NOCEntryList...etc...
		numberofEntries: 	40


[ :e | self quickFillWithClass: e ] in NOCCompletionTable>>quickFillWithCategoryOf:
	Receiver: a NOCCompletionTable
	Arguments and temporary variables: 
		cls: 	IDM
		e: 	Pile
	Receiver's instance variables: 
		table: 	a Dictionary('*'->a NOCEntryList '+'->a NOCEntryList ','->a NOCEntryList...etc...
		numberofEntries: 	40


Array(SequenceableCollection)>>do:
	Receiver: {IDM. Pile. PileGrossissante. PileTypee}
	Arguments and temporary variables: 
		aBlock: 	[ :e | self quickFillWithClass: e ]
		index: 	2
	Receiver's instance variables: 
{IDM. Pile. PileGrossissante. PileTypee}

NOCCompletionTable>>quickFillWithCategoryOf:
	Receiver: a NOCCompletionTable
	Arguments and temporary variables: 
		cls: 	IDM
	Receiver's instance variables: 
		table: 	a Dictionary('*'->a NOCEntryList '+'->a NOCEntryList ','->a NOCEntryList...etc...
		numberofEntries: 	40


NOCCompletionTable class>>methodChanged:
	Receiver: NOCCompletionTable
	Arguments and temporary variables: 
		event: 	a MethodModified
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#addEntry:->NOCCompletionTable>>#addEntry: #addE...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#NOCCompletionTable
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'NECompletion-OCompletion'
		traitComposition: 	{}
		localSelectors: 	nil
		classTable: 	a NOCCompletionTable
		table: 	a NOCCompletionTable


WeakMessageSend>>value:
	Receiver: a WeakMessageSend(#methodChanged: -> NOCCompletionTable)
	Arguments and temporary variables: 
		anObject: 	a MethodModified
		strongReceiver: 	NOCCompletionTable
	Receiver's instance variables: 
		selector: 	#methodChanged:
		shouldBeNil: 	#()
		arguments: 	a WeakArray()


WeakMessageSend>>cull:
	Receiver: a WeakMessageSend(#methodChanged: -> NOCCompletionTable)
	Arguments and temporary variables: 
		arg: 	a MethodModified
	Receiver's instance variables: 
		selector: 	#methodChanged:
		shouldBeNil: 	#()
		arguments: 	a WeakArray()


WeakMessageSend>>cull:cull:
	Receiver: a WeakMessageSend(#methodChanged: -> NOCCompletionTable)
	Arguments and temporary variables: 
		arg1: 	a MethodModified
		arg2: 	a SystemAnnouncer
	Receiver's instance variables: 
		selector: 	#methodChanged:
		shouldBeNil: 	#()
		arguments: 	a WeakArray()


[ action cull: anAnnouncement cull: announcer ] in LegacyWeakSubscription(WeakAnnouncementSubscription)>>deliver:
	Receiver: a LegacyWeakSubscription(a WeakMessageSend(#methodChanged: -> NOCCompletionTable))
	Arguments and temporary variables: 
		anAnnouncement: 	a MethodModified
	Receiver's instance variables: 
		list: 	a WeakFinalizationList
		next: 	nil
		announcer: 	a SystemAnnouncer
		announcementClass: 	an AnnouncementSet(MethodModified MethodAdded)
		action: 	a WeakMessageSend(#methodChanged: -> NOCCompletionTable)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	LegacyWeakSubscription(WeakAnnouncementSubscription)>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	LegacyWeakSubscription(WeakAnnouncementSubscription)>>deliver:
		startpc: 	83
		numArgs: 	0


LegacyWeakSubscription(WeakAnnouncementSubscription)>>deliver:
	Receiver: a LegacyWeakSubscription(a WeakMessageSend(#methodChanged: -> NOCCompletionTable))
	Arguments and temporary variables: 
		anAnnouncement: 	a MethodModified
	Receiver's instance variables: 
		list: 	a WeakFinalizationList
		next: 	nil
		announcer: 	a SystemAnnouncer
		announcementClass: 	an AnnouncementSet(MethodModified MethodAdded)
		action: 	a WeakMessageSend(#methodChanged: -> NOCCompletionTable)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MethodModified
		subs: 	an Array(a LegacyWeakSubscription(a WeakMessageSend(#event: -> KMPragmaKe...etc...
		startIndex: 	3
		index: 	nil
		subscription: 	a LegacyWeakSubscription(a WeakMessageSend(#methodChanged: -> NOC...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(a LegacyWeakSubscription(a WeakMessageSend(#added...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MethodModified
		subs: 	an Array(a LegacyWeakSubscription(a WeakMessageSend(#event: -> KMPragmaKe...etc...
		startIndex: 	3
		subscription: 	a LegacyWeakSubscription(a WeakMessageSend(#methodChanged: -> NOC...etc...
		index: 	3
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(a LegacyWeakSubscription(a WeakMessageSend(#added...etc...
		monitor: 	a Semaphore()


[ self deliver: anAnnouncement to: subs startingAt: index + 1 ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(a LegacyWeakSubscription(a WeakMessageSend(#added...etc...
		monitor: 	a Semaphore()


Context>>resume:through:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		value: 	a MorphicUIManager
		firstUnwindContext: 	BlockClosure>>ifCurtailed:
		context: 	BlockClosure>>ifCurtailed:
		unwindBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
	Receiver's instance variables: 
		sender: 	nil
		pc: 	nil
		stackp: 	2
		method: 	BlockClosure>>#on:do:
		closureOrNil: 	nil
		receiver: 	[ chain := thisContext sender cut: ctxt.
ctxt jump ]


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	true
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MethodModified
		subs: 	an Array(a LegacyWeakSubscription(a WeakMessageSend(#event: -> KMPragmaKe...etc...
		startIndex: 	1
		subscription: 	a LegacyWeakSubscription(a WeakMessageSend(#methodModified: -> a ...etc...
		index: 	2
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(a LegacyWeakSubscription(a WeakMessageSend(#added...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MethodModified
		subs: 	an Array(a LegacyWeakSubscription(a WeakMessageSend(#event: -> KMPragmaKe...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(a LegacyWeakSubscription(a WeakMessageSend(#added...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(a LegacyWeakSubscription(a WeakMessageSend(#e...etc...
		anAnnouncement: 	a MethodModified
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(a LegacyWeakSubscription(a WeakMessageSend(#added...etc...
		monitor: 	a Semaphore()


SystemAnnouncer(Announcer)>>announce:
	Receiver: a SystemAnnouncer
	Arguments and temporary variables: 
		anAnnouncement: 	a MethodModified
		announcement: 	a MethodModified
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspended: 	false
		private: 	an Announcer
		storedAnnouncements: 	nil


SystemAnnouncer>>announce:
	Receiver: a SystemAnnouncer
	Arguments and temporary variables: 
		anAnnouncement: 	a MethodModified
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspended: 	false
		private: 	an Announcer
		storedAnnouncements: 	nil


SystemAnnouncer>>methodChangedFrom:to:oldProtocol:
	Receiver: a SystemAnnouncer
	Arguments and temporary variables: 
		oldMethod: 	IDM>>#idmPile
		newMethod: 	IDM>>#idmPile
		oldProtocol: 	#CreateStuff
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspended: 	false
		private: 	an Announcer
		storedAnnouncements: 	nil


IDM class(ClassDescription)>>addAndClassifySelector:withMethod:inProtocol:notifying:
	Receiver: IDM
	Arguments and temporary variables: 
		selector: 	#idmPile
		compiledMethod: 	IDM>>#idmPile
		category: 	#CreateStuff
		requestor: 	a RubScrolledTextMorph(537463296)
		priorMethodOrNil: 	IDM>>#idmPile
		priorOriginOrNil: 	IDM
		oldProtocol: 	#CreateStuff
		newProtocol: 	#CreateStuff
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#idmPile->IDM>>#idmPile )
		format: 	0
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#IDM
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#MetaProg
		traitComposition: 	{}
		localSelectors: 	nil


IDM class(ClassDescription)>>compile:classified:withStamp:notifying:logSource:
	Receiver: IDM
	Arguments and temporary variables: 
		text: 	'idmPile
	(Smalltalk at: #PileGrossissante)
		ifFalse: [
			Pile subclass...etc...
		category: 	#CreateStuff
		changeStamp: 	'pm 9/28/2018 11:32'
		requestor: 	a RubScrolledTextMorph(537463296)
		logSource: 	true
		method: 	IDM>>#idmPile
		selector: 	#idmPile
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#idmPile->IDM>>#idmPile )
		format: 	0
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#IDM
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#MetaProg
		traitComposition: 	{}
		localSelectors: 	nil


IDM class(ClassDescription)>>compile:classified:withStamp:notifying:
	Receiver: IDM
	Arguments and temporary variables: 
		text: 	'idmPile
	(Smalltalk at: #PileGrossissante)
		ifFalse: [
			Pile subclass...etc...
		category: 	#CreateStuff
		changeStamp: 	'pm 9/28/2018 11:32'
		requestor: 	a RubScrolledTextMorph(537463296)
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#idmPile->IDM>>#idmPile )
		format: 	0
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#IDM
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#MetaProg
		traitComposition: 	{}
		localSelectors: 	nil


IDM class(ClassDescription)>>compile:classified:notifying:
	Receiver: IDM
	Arguments and temporary variables: 
		text: 	'idmPile
	(Smalltalk at: #PileGrossissante)
		ifFalse: [
			Pile subclass...etc...
		category: 	#CreateStuff
		requestor: 	a RubScrolledTextMorph(537463296)
		stamp: 	'pm 9/28/2018 11:32'
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#idmPile->IDM>>#idmPile )
		format: 	0
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#IDM
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#MetaProg
		traitComposition: 	{}
		localSelectors: 	nil


NautilusUI(AbstractTool)>>compileANewMethodInClass:categorized:from:notifyng:
	Receiver: a NautilusUI
	Arguments and temporary variables: 
		aClass: 	IDM
		aCategory: 	#CreateStuff
		aString: 	'idmPile
	(Smalltalk at: #PileGrossissante)
		ifFalse: [
			Pile subcl...etc...
		aController: 	a RubScrolledTextMorph(537463296)
		selector: 	#idmPile
		existingMethod: 	IDM>>#idmPile
		targetClass: 	IDM
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		announceur: 	nil
		model: 	a Nautilus
		window: 	a NautilusWindow(1021156352)
		sourceCodePanel: 	a PanelMorph(832888064)
		fullDisplayedComment: 	false
		sourceCodeContainer: 	a PanelMorph(1054231808)
		shouldUpdateTitle: 	true
		contentSelection: 	a Text for 'idmPile
	(Smalltalk at: #PileGrossissante)
		ifFa...etc...
		acceptor: 	a MethodDefinitionAcceptor
		commentWidget: 	nil
		sourceTextWidget: 	a RubScrolledTextMorph(537463296)
		sourceCodeSelectionInterval: 	(1 to: 359)
		sourceTextModel: 	a RubScrolledTextModel
		methodClassifier: 	nil
		commentTextModel: 	a RubScrolledTextModel
		instanceButtonWidget: 	a PluggableToggleButtonMorph(1068761344)
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageWidget
		packagePatternString: 	'MetaProg'
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(669064448)


NautilusUI>>compileAMethodFromCategory:withSource:notifying:
	Receiver: a NautilusUI
	Arguments and temporary variables: 
		aCategory: 	#CreateStuff
		aString: 	'idmPile
	(Smalltalk at: #PileGrossissante)
		ifFalse: [
			Pile subcl...etc...
		aController: 	a RubScrolledTextMorph(537463296)
		category: 	#CreateStuff
		selector: 	nil
		class: 	IDM
		method: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		announceur: 	nil
		model: 	a Nautilus
		window: 	a NautilusWindow(1021156352)
		sourceCodePanel: 	a PanelMorph(832888064)
		fullDisplayedComment: 	false
		sourceCodeContainer: 	a PanelMorph(1054231808)
		shouldUpdateTitle: 	true
		contentSelection: 	a Text for 'idmPile
	(Smalltalk at: #PileGrossissante)
		ifFa...etc...
		acceptor: 	a MethodDefinitionAcceptor
		commentWidget: 	nil
		sourceTextWidget: 	a RubScrolledTextMorph(537463296)
		sourceCodeSelectionInterval: 	(1 to: 359)
		sourceTextModel: 	a RubScrolledTextModel
		methodClassifier: 	nil
		commentTextModel: 	a RubScrolledTextModel
		instanceButtonWidget: 	a PluggableToggleButtonMorph(1068761344)
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageWidget
		packagePatternString: 	'MetaProg'
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(669064448)


MethodDefinitionAcceptor>>accept:notifying:
	Receiver: a MethodDefinitionAcceptor
	Arguments and temporary variables: 
		source: 	'idmPile
	(Smalltalk at: #PileGrossissante)
		ifFalse: [
			Pile subcla...etc...
		aController: 	a RubScrolledTextMorph(537463296)
		protocol: 	#CreateStuff
		method: 	IDM>>#idmPile
	Receiver's instance variables: 
		model: 	a NautilusUI


NautilusUI>>compileSource:notifying:
	Receiver: a NautilusUI
	Arguments and temporary variables: 
		aText: 	'idmPile
	(Smalltalk at: #PileGrossissante)
		ifFalse: [
			Pile subclas...etc...
		aController: 	a RubScrolledTextMorph(537463296)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		announceur: 	nil
		model: 	a Nautilus
		window: 	a NautilusWindow(1021156352)
		sourceCodePanel: 	a PanelMorph(832888064)
		fullDisplayedComment: 	false
		sourceCodeContainer: 	a PanelMorph(1054231808)
		shouldUpdateTitle: 	true
		contentSelection: 	a Text for 'idmPile
	(Smalltalk at: #PileGrossissante)
		ifFa...etc...
		acceptor: 	a MethodDefinitionAcceptor
		commentWidget: 	nil
		sourceTextWidget: 	a RubScrolledTextMorph(537463296)
		sourceCodeSelectionInterval: 	(1 to: 359)
		sourceTextModel: 	a RubScrolledTextModel
		methodClassifier: 	nil
		commentTextModel: 	a RubScrolledTextModel
		instanceButtonWidget: 	a PluggableToggleButtonMorph(1068761344)
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageWidget
		packagePatternString: 	'MetaProg'
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(669064448)


NautilusUI(AbstractNautilusUI)>>whenTextAcceptedInView:
	Receiver: a NautilusUI
	Arguments and temporary variables: 
		anAnnouncement: 	a RubTextAccepted
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		announceur: 	nil
		model: 	a Nautilus
		window: 	a NautilusWindow(1021156352)
		sourceCodePanel: 	a PanelMorph(832888064)
		fullDisplayedComment: 	false
		sourceCodeContainer: 	a PanelMorph(1054231808)
		shouldUpdateTitle: 	true
		contentSelection: 	a Text for 'idmPile
	(Smalltalk at: #PileGrossissante)
		ifFa...etc...
		acceptor: 	a MethodDefinitionAcceptor
		commentWidget: 	nil
		sourceTextWidget: 	a RubScrolledTextMorph(537463296)
		sourceCodeSelectionInterval: 	(1 to: 359)
		sourceTextModel: 	a RubScrolledTextModel
		methodClassifier: 	nil
		commentTextModel: 	a RubScrolledTextModel
		instanceButtonWidget: 	a PluggableToggleButtonMorph(1068761344)
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageWidget
		packagePatternString: 	'MetaProg'
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(669064448)


MessageSend>>value:
	Receiver: MessageSend(#whenTextAcceptedInView: -> a NautilusUI)
	Arguments and temporary variables: 
		anObject: 	a RubTextAccepted
	Receiver's instance variables: 
		receiver: 	a NautilusUI
		selector: 	#whenTextAcceptedInView:
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#whenTextAcceptedInView: -> a NautilusUI)
	Arguments and temporary variables: 
		arg: 	a RubTextAccepted
	Receiver's instance variables: 
		receiver: 	a NautilusUI
		selector: 	#whenTextAcceptedInView:
		arguments: 	#()



--- The full stack ---
BlockClosure(Object)>>doesNotUnderstand: #selector
[ :e | self justCompiled: e selector in: cls ] in NOCCompletionTable>>quickFillWithClass:
MethodDictionary>>valuesDo:
Pile class(Behavior)>>methodsDo:
NOCCompletionTable>>quickFillWithClass:
[ :e | self quickFillWithClass: e ] in NOCCompletionTable>>quickFillWithCategoryOf:
Array(SequenceableCollection)>>do:
NOCCompletionTable>>quickFillWithCategoryOf:
NOCCompletionTable class>>methodChanged:
WeakMessageSend>>value:
WeakMessageSend>>cull:
WeakMessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in LegacyWeakSubscription(WeakAnnouncementSubscription)>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
LegacyWeakSubscription(WeakAnnouncementSubscription)>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
[ self deliver: anAnnouncement to: subs startingAt: index + 1 ] in SubscriptionRegistry>>deliver:to:startingAt:
Context>>resume:through:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
SystemAnnouncer(Announcer)>>announce:
SystemAnnouncer>>announce:
SystemAnnouncer>>methodChangedFrom:to:oldProtocol:
IDM class(ClassDescription)>>addAndClassifySelector:withMethod:inProtocol:notifying:
IDM class(ClassDescription)>>compile:classified:withStamp:notifying:logSource:
IDM class(ClassDescription)>>compile:classified:withStamp:notifying:
IDM class(ClassDescription)>>compile:classified:notifying:
NautilusUI(AbstractTool)>>compileANewMethodInClass:categorized:from:notifyng:
NautilusUI>>compileAMethodFromCategory:withSource:notifying:
MethodDefinitionAcceptor>>accept:notifying:
NautilusUI>>compileSource:notifying:
NautilusUI(AbstractNautilusUI)>>whenTextAcceptedInView:
MessageSend>>value:
MessageSend>>cull:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubScrolledTextMorph>>acceptContents
RubScrolledTextMorph>>whenTextAcceptRequest:
MessageSend>>value:
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(RubAbstractTextArea)>>announce:
[ :view | view textArea announce: (RubTextAcceptRequest morph: view textArea) ] in RubScrolledTextModel>>acceptEditsInView
RubScrolledTextMorph>>whenConfigurationChanged:
MessageSend>>value:
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubScrolledTextMorph>>whenConfigurationChangedFromModel:
MessageSend>>value:
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubScrolledTextModel>>announce:
RubScrolledTextModel>>reconfigureViewWith:
RubScrolledTextModel>>acceptEditsInView
NautilusUI(AbstractNautilusUI)>>acceptSourceCodeFromView
NautilusUI(AbstractNautilusUI)>>okToChange
NautilusUI(AbstractNautilusUI)>>okToChangeSourceAndComment
NautilusUI(AbstractNautilusUI)>>showInstance:
NautilusUI(AbstractNautilusUI)>>toggleShowInstance
NautilusUI(AbstractNautilusUI)>>instanceButtonAction:
PluggableToggleButtonMorph>>performAction:
[ :m | 
(m containsPoint: evt cursorPoint)
	ifTrue: [ m enabled
			ifTrue: [ m performAction: evt ] ] ] in PluggableToggleButtonMorph(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
PluggableToggleButtonMorph(PluggableButtonMorph)>>mouseUp:
PluggableToggleButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableToggleButtonMorph(Morph)>>handleEvent:
PluggableToggleButtonMorph(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of BlockClosure did not understand #sendsSelector:
28 September 2018 11:33:41.055329 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

BlockClosure(Object)>>doesNotUnderstand: #sendsSelector:
	Receiver: [  ]
	Arguments and temporary variables: 
		aMessage: 	sendsSelector: #subclassResponsibility
		exception: 	MessageNotUnderstood: BlockClosure>>sendsSelector:
		resumeValue: 	nil
	Receiver's instance variables: 
		outerContext: 	IDM>>idmPile
		startpc: 	130
		numArgs: 	0


[ :cm | cm sendsSelector: #subclassResponsibility ] in Pile class(Behavior)>>hasAbstractMethods
	Receiver: Pile
	Arguments and temporary variables: 
		cm: 	[  ]
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#capacity->Pile>>#capacity #do:->Pile>>#do: #gro...etc...
		format: 	65539
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{PileTypee. PileGrossissante}
		name: 	#Pile
		classPool: 	a Dictionary(#tailleDefaut->5 )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#MetaProg
		traitComposition: 	{}
		localSelectors: 	nil


[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in Array(Collection)>>anySatisfy:
	Receiver: an Array(Pile>>#size Pile>>#push: [  ] Pile>>#isFull Pile>>#do: Pile>>#initialize: Pile>>#...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :cm | cm sendsSelector: #subclassResponsibility ]
		each: 	[  ]
	Receiver's instance variables: 
an Array(Pile>>#size Pile>>#push: [  ] Pile>>#isFull Pile>>#do: Pile>>#initialize: Pile>>#...etc...

Array(SequenceableCollection)>>do:
	Receiver: an Array(Pile>>#size Pile>>#push: [  ] Pile>>#isFull Pile>>#do: Pile>>#initialize: Pile>>#...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ]
		index: 	3
	Receiver's instance variables: 
an Array(Pile>>#size Pile>>#push: [  ] Pile>>#isFull Pile>>#do: Pile>>#initialize: Pile>>#...etc...

Array(Collection)>>anySatisfy:
	Receiver: an Array(Pile>>#size Pile>>#push: [  ] Pile>>#isFull Pile>>#do: Pile>>#initialize: Pile>>#...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :cm | cm sendsSelector: #subclassResponsibility ]
	Receiver's instance variables: 
an Array(Pile>>#size Pile>>#push: [  ] Pile>>#isFull Pile>>#do: Pile>>#initialize: Pile>>#...etc...

Pile class(Behavior)>>hasAbstractMethods
	Receiver: Pile
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#capacity->Pile>>#capacity #do:->Pile>>#do: #gro...etc...
		format: 	65539
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{PileTypee. PileGrossissante}
		name: 	#Pile
		classPool: 	a Dictionary(#tailleDefaut->5 )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#MetaProg
		traitComposition: 	{}
		localSelectors: 	nil


Pile class(Class)>>hasAbstractMethods
	Receiver: Pile
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#capacity->Pile>>#capacity #do:->Pile>>#do: #gro...etc...
		format: 	65539
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{PileTypee. PileGrossissante}
		name: 	#Pile
		classPool: 	a Dictionary(#tailleDefaut->5 )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#MetaProg
		traitComposition: 	{}
		localSelectors: 	nil


ClassWidget>>buildTabbedNameOf:
	Receiver: a ClassWidget
	Arguments and temporary variables: 
		anElement: 	Pile
		tab: 	'   '
		size: 	0
		stringMorph: 	a StringMorph(510720)#Pile
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a FTPluggableIconListMorphAdaptor(649379328))
		announceur: 	nil
		model: 	a NautilusUI
		classesList: 	a FTPluggableIconListMorphAdaptor(649379328)
		classesSelection: 	a Dictionary()
		classesListElements: 	an OrderedCollection(IDM Pile PileGrossissante PileTypee)
		cachedHierarchy: 	a SortHierarchically
		showHierarchy: 	false


ClassWidget>>classWrapper:
	Receiver: a ClassWidget
	Arguments and temporary variables: 
		anElement: 	Pile
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a FTPluggableIconListMorphAdaptor(649379328))
		announceur: 	nil
		model: 	a NautilusUI
		classesList: 	a FTPluggableIconListMorphAdaptor(649379328)
		classesSelection: 	a Dictionary()
		classesListElements: 	an OrderedCollection(IDM Pile PileGrossissante PileTypee)
		cachedHierarchy: 	a SortHierarchically
		showHierarchy: 	false


FTPluggableIconListMorphAdaptorDataSource>>elementWrapped:
	Receiver: a FTPluggableIconListMorphAdaptorDataSource
	Arguments and temporary variables: 
		object: 	Pile
		selector: 	#classWrapper:
	Receiver's instance variables: 
		table: 	a FTPluggableIconListMorphAdaptor(649379328)
		model: 	a ClassWidget
		getListSelector: 	nil
		getListElementSelector: 	#getClassItem:
		wrapSelector: 	#classWrapper:
		getIconSelector: 	#classIconFor:
		getListSizeSelector: 	#classListSize
		getMenuSelector: 	#classesMenu:shifted:
		dropItemSelector: 	#dropInClass:inARow:
		wantsDropSelector: 	nil


FTPluggableIconListMorphAdaptorDataSource>>cellColumn:row:
	Receiver: a FTPluggableIconListMorphAdaptorDataSource
	Arguments and temporary variables: 
		column: 	a FTColumn
		rowIndex: 	2
		object: 	Pile
		text: 	nil
		icon: 	Form(16x16x32)
	Receiver's instance variables: 
		table: 	a FTPluggableIconListMorphAdaptor(649379328)
		model: 	a ClassWidget
		getListSelector: 	nil
		getListElementSelector: 	#getClassItem:
		wrapSelector: 	#classWrapper:
		getIconSelector: 	#classIconFor:
		getListSizeSelector: 	#classListSize
		getMenuSelector: 	#classesMenu:shifted:
		dropItemSelector: 	#dropInClass:inARow:
		wantsDropSelector: 	nil


FTTableContainerMorph>>updateExposedRows
	Receiver: a FTTableContainerMorph(882312192)
	Arguments and temporary variables: 
		visibleRows: 	11
		numberOfColumns: 	1
		columns: 	an Array(a FTColumn)
		columnWidths: 	#(233.0)
		startIndex: 	1
		rowIndex: 	2
		row: 	a FTTableRowMorph(1070973952)
		columnIndex: 	1
		cell: 	nil
	Receiver's instance variables: 
		bounds: 	(526.0@357.0) corner: (759.0@578.0)
		owner: 	a FTPluggableIconListMorphAdaptor(649379328)
		submorphs: 	an Array(a FTTableRowMorph(688675584) a FTTableRowMorph(713692416) a...etc...
		fullBounds: 	(526.0@357.0) corner: (759.0@578.0)
		color: 	Color transparent
		extension: 	a MorphExtension (262015488) [other:  (errorOnDraw -> true) (drawErr...etc...
		needsRefreshExposedRows: 	true
		headerRow: 	nil
		exposedRows: 	a SmallDictionary(1->a FTTableRowMorph(727973376))


FTPluggableIconListMorphAdaptor(FTTableMorph)>>resetPosition
	Receiver: a FTPluggableIconListMorphAdaptor(649379328)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(526.0@357.0) corner: (759.0@578.0)
		owner: 	a PanelMorph(609962240)
		submorphs: 	an Array(a FTTableContainerMorph(882312192))
		fullBounds: 	(526.0@357.0) corner: (759.0@578.0)
		color: 	(Color r: 0.13 g: 0.13 b: 0.13 alpha: 1.0)
		extension: 	a MorphExtension (292717568) [other:  (announcer -> an Announcer) (k...etc...
		container: 	a FTTableContainerMorph(882312192)
		verticalScrollBar: 	a ScrollBar(895827456)
		selectionColor: 	nil
		showIndex: 	1
		dataSource: 	a FTPluggableIconListMorphAdaptorDataSource
		intercellSpacing: 	nil
		rowHeight: 	20.333333333333336
		selectedRowIndexes: 	#()
		highlightedRowIndexes: 	#()
		selectionStrategy: 	a FTMultipleSelection
		columns: 	an Array(a FTColumn)
		secondarySelectionColor: 	nil
		headerColor: 	nil
		showColumnHeaders: 	false
		allowsDeselection: 	true
		needToggleAtMouseUp: 	false
		function: 	a FTSearchFunction
		resizable: 	false
		setSelectionListSelector: 	#classSelectionAt:put:
		getSelectionListSelector: 	#classSelectionAt:
		setIndexSelector: 	#selectedClassIndex:
		getIndexSelector: 	#selectedClassIndex
		keystrokeSelector: 	#keyPressedOnList:shifted:
		resetListSelector: 	#resetClassSelection
		doubleClickSelector: 	#doubleClick:
		keystrokeActionSelector: 	nil


FTPluggableIconListMorphAdaptor>>updateList
	Receiver: a FTPluggableIconListMorphAdaptor(649379328)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(526.0@357.0) corner: (759.0@578.0)
		owner: 	a PanelMorph(609962240)
		submorphs: 	an Array(a FTTableContainerMorph(882312192))
		fullBounds: 	(526.0@357.0) corner: (759.0@578.0)
		color: 	(Color r: 0.13 g: 0.13 b: 0.13 alpha: 1.0)
		extension: 	a MorphExtension (292717568) [other:  (announcer -> an Announcer) (k...etc...
		container: 	a FTTableContainerMorph(882312192)
		verticalScrollBar: 	a ScrollBar(895827456)
		selectionColor: 	nil
		showIndex: 	1
		dataSource: 	a FTPluggableIconListMorphAdaptorDataSource
		intercellSpacing: 	nil
		rowHeight: 	20.333333333333336
		selectedRowIndexes: 	#()
		highlightedRowIndexes: 	#()
		selectionStrategy: 	a FTMultipleSelection
		columns: 	an Array(a FTColumn)
		secondarySelectionColor: 	nil
		headerColor: 	nil
		showColumnHeaders: 	false
		allowsDeselection: 	true
		needToggleAtMouseUp: 	false
		function: 	a FTSearchFunction
		resizable: 	false
		setSelectionListSelector: 	#classSelectionAt:put:
		getSelectionListSelector: 	#classSelectionAt:
		setIndexSelector: 	#selectedClassIndex:
		getIndexSelector: 	#selectedClassIndex
		keystrokeSelector: 	#keyPressedOnList:shifted:
		resetListSelector: 	#resetClassSelection
		doubleClickSelector: 	#doubleClick:
		keystrokeActionSelector: 	nil


FTPluggableIconListMorphAdaptor>>update:
	Receiver: a FTPluggableIconListMorphAdaptor(649379328)
	Arguments and temporary variables: 
		symbol: 	#getClassItem:
	Receiver's instance variables: 
		bounds: 	(526.0@357.0) corner: (759.0@578.0)
		owner: 	a PanelMorph(609962240)
		submorphs: 	an Array(a FTTableContainerMorph(882312192))
		fullBounds: 	(526.0@357.0) corner: (759.0@578.0)
		color: 	(Color r: 0.13 g: 0.13 b: 0.13 alpha: 1.0)
		extension: 	a MorphExtension (292717568) [other:  (announcer -> an Announcer) (k...etc...
		container: 	a FTTableContainerMorph(882312192)
		verticalScrollBar: 	a ScrollBar(895827456)
		selectionColor: 	nil
		showIndex: 	1
		dataSource: 	a FTPluggableIconListMorphAdaptorDataSource
		intercellSpacing: 	nil
		rowHeight: 	20.333333333333336
		selectedRowIndexes: 	#()
		highlightedRowIndexes: 	#()
		selectionStrategy: 	a FTMultipleSelection
		columns: 	an Array(a FTColumn)
		secondarySelectionColor: 	nil
		headerColor: 	nil
		showColumnHeaders: 	false
		allowsDeselection: 	true
		needToggleAtMouseUp: 	false
		function: 	a FTSearchFunction
		resizable: 	false
		setSelectionListSelector: 	#classSelectionAt:put:
		getSelectionListSelector: 	#classSelectionAt:
		setIndexSelector: 	#selectedClassIndex:
		getIndexSelector: 	#selectedClassIndex
		keystrokeSelector: 	#keyPressedOnList:shifted:
		resetListSelector: 	#resetClassSelection
		doubleClickSelector: 	#doubleClick:
		keystrokeActionSelector: 	nil


[ :aDependent | aDependent update: aParameter ] in ClassWidget(Model)>>changed:
	Receiver: a ClassWidget
	Arguments and temporary variables: 
		aParameter: 	#getClassItem:
		aDependent: 	a FTPluggableIconListMorphAdaptor(649379328)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a FTPluggableIconListMorphAdaptor(649379328))
		announceur: 	nil
		model: 	a NautilusUI
		classesList: 	a FTPluggableIconListMorphAdaptor(649379328)
		classesSelection: 	a Dictionary()
		classesListElements: 	an OrderedCollection(IDM Pile PileGrossissante PileTypee)
		cachedHierarchy: 	a SortHierarchically
		showHierarchy: 	false


DependentsArray>>do:
	Receiver: a DependentsArray(a FTPluggableIconListMorphAdaptor(649379328))
	Arguments and temporary variables: 
		aBlock: 	[ :aDependent | aDependent update: aParameter ]
		dep: 	a FTPluggableIconListMorphAdaptor(649379328)
		i: 	1
	Receiver's instance variables: 
a DependentsArray(a FTPluggableIconListMorphAdaptor(649379328))

ClassWidget(Model)>>changed:
	Receiver: a ClassWidget
	Arguments and temporary variables: 
		aParameter: 	#getClassItem:
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a FTPluggableIconListMorphAdaptor(649379328))
		announceur: 	nil
		model: 	a NautilusUI
		classesList: 	a FTPluggableIconListMorphAdaptor(649379328)
		classesSelection: 	a Dictionary()
		classesListElements: 	an OrderedCollection(IDM Pile PileGrossissante PileTypee)
		cachedHierarchy: 	a SortHierarchically
		showHierarchy: 	false


ClassWidget(AbstractWidget)>>update:
	Receiver: a ClassWidget
	Arguments and temporary variables: 
		aSymbol: 	#getClassItem:
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a FTPluggableIconListMorphAdaptor(649379328))
		announceur: 	nil
		model: 	a NautilusUI
		classesList: 	a FTPluggableIconListMorphAdaptor(649379328)
		classesSelection: 	a Dictionary()
		classesListElements: 	an OrderedCollection(IDM Pile PileGrossissante PileTypee)
		cachedHierarchy: 	a SortHierarchically
		showHierarchy: 	false


[ :aDependent | aDependent update: aParameter ] in NautilusUI(Model)>>changed:
	Receiver: a NautilusUI
	Arguments and temporary variables: 
		aParameter: 	#getClassItem:
		aDependent: 	a ClassWidget
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		announceur: 	nil
		model: 	a Nautilus
		window: 	a NautilusWindow(1021156352)
		sourceCodePanel: 	a PanelMorph(832888064)
		fullDisplayedComment: 	false
		sourceCodeContainer: 	a PanelMorph(1054231808)
		shouldUpdateTitle: 	true
		contentSelection: 	a Text for ''
		acceptor: 	a ClassDefinitionAcceptor
		commentWidget: 	a RubScrolledTextMorph(837683456)
		sourceTextWidget: 	a RubScrolledTextMorph(537463296)
		sourceCodeSelectionInterval: 	(1 to: 0)
		sourceTextModel: 	a RubScrolledTextModel
		methodClassifier: 	nil
		commentTextModel: 	nil
		instanceButtonWidget: 	a PluggableToggleButtonMorph(1068761344)
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageWidget
		packagePatternString: 	'MetaProg'
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(669064448)


DependentsArray>>do:
	Receiver: a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a PackageWidget a Nautilus...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :aDependent | aDependent update: aParameter ]
		dep: 	a ClassWidget
		i: 	3
	Receiver's instance variables: 
a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a PackageWidget a Nautilus...etc...

NautilusUI(Model)>>changed:
	Receiver: a NautilusUI
	Arguments and temporary variables: 
		aParameter: 	#getClassItem:
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		announceur: 	nil
		model: 	a Nautilus
		window: 	a NautilusWindow(1021156352)
		sourceCodePanel: 	a PanelMorph(832888064)
		fullDisplayedComment: 	false
		sourceCodeContainer: 	a PanelMorph(1054231808)
		shouldUpdateTitle: 	true
		contentSelection: 	a Text for ''
		acceptor: 	a ClassDefinitionAcceptor
		commentWidget: 	a RubScrolledTextMorph(837683456)
		sourceTextWidget: 	a RubScrolledTextMorph(537463296)
		sourceCodeSelectionInterval: 	(1 to: 0)
		sourceTextModel: 	a RubScrolledTextModel
		methodClassifier: 	nil
		commentTextModel: 	nil
		instanceButtonWidget: 	a PluggableToggleButtonMorph(1068761344)
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageWidget
		packagePatternString: 	'MetaProg'
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(669064448)


NautilusUI(AbstractNautilusUI)>>changed:
	Receiver: a NautilusUI
	Arguments and temporary variables: 
		aSymbol: 	#getClassItem:
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		announceur: 	nil
		model: 	a Nautilus
		window: 	a NautilusWindow(1021156352)
		sourceCodePanel: 	a PanelMorph(832888064)
		fullDisplayedComment: 	false
		sourceCodeContainer: 	a PanelMorph(1054231808)
		shouldUpdateTitle: 	true
		contentSelection: 	a Text for ''
		acceptor: 	a ClassDefinitionAcceptor
		commentWidget: 	a RubScrolledTextMorph(837683456)
		sourceTextWidget: 	a RubScrolledTextMorph(537463296)
		sourceCodeSelectionInterval: 	(1 to: 0)
		sourceTextModel: 	a RubScrolledTextModel
		methodClassifier: 	nil
		commentTextModel: 	nil
		instanceButtonWidget: 	a PluggableToggleButtonMorph(1068761344)
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageWidget
		packagePatternString: 	'MetaProg'
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(669064448)


NautilusUI(AbstractNautilusUI)>>updateClassView
	Receiver: a NautilusUI
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		announceur: 	nil
		model: 	a Nautilus
		window: 	a NautilusWindow(1021156352)
		sourceCodePanel: 	a PanelMorph(832888064)
		fullDisplayedComment: 	false
		sourceCodeContainer: 	a PanelMorph(1054231808)
		shouldUpdateTitle: 	true
		contentSelection: 	a Text for ''
		acceptor: 	a ClassDefinitionAcceptor
		commentWidget: 	a RubScrolledTextMorph(837683456)
		sourceTextWidget: 	a RubScrolledTextMorph(537463296)
		sourceCodeSelectionInterval: 	(1 to: 0)
		sourceTextModel: 	a RubScrolledTextModel
		methodClassifier: 	nil
		commentTextModel: 	nil
		instanceButtonWidget: 	a PluggableToggleButtonMorph(1068761344)
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageWidget
		packagePatternString: 	'MetaProg'
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(669064448)


NautilusUI>>selectedPackageWithoutChangingSelection:
	Receiver: a NautilusUI
	Arguments and temporary variables: 
		aSelection: 	a PackageTreeTagSelection
		class: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		announceur: 	nil
		model: 	a Nautilus
		window: 	a NautilusWindow(1021156352)
		sourceCodePanel: 	a PanelMorph(832888064)
		fullDisplayedComment: 	false
		sourceCodeContainer: 	a PanelMorph(1054231808)
		shouldUpdateTitle: 	true
		contentSelection: 	a Text for ''
		acceptor: 	a ClassDefinitionAcceptor
		commentWidget: 	a RubScrolledTextMorph(837683456)
		sourceTextWidget: 	a RubScrolledTextMorph(537463296)
		sourceCodeSelectionInterval: 	(1 to: 0)
		sourceTextModel: 	a RubScrolledTextModel
		methodClassifier: 	nil
		commentTextModel: 	nil
		instanceButtonWidget: 	a PluggableToggleButtonMorph(1068761344)
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageWidget
		packagePatternString: 	'MetaProg'
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(669064448)


[ :each | self selectedPackageWithoutChangingSelection: each ] in NautilusUI>>selectedFromPackageGroupView:
	Receiver: a NautilusUI
	Arguments and temporary variables: 
		aNode: 	a MorphTreeMorphMultipleSelection
		selections: 	an OrderedCollection(a PackageTreeTagSelection)
		each: 	a PackageTreeTagSelection
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		announceur: 	nil
		model: 	a Nautilus
		window: 	a NautilusWindow(1021156352)
		sourceCodePanel: 	a PanelMorph(832888064)
		fullDisplayedComment: 	false
		sourceCodeContainer: 	a PanelMorph(1054231808)
		shouldUpdateTitle: 	true
		contentSelection: 	a Text for ''
		acceptor: 	a ClassDefinitionAcceptor
		commentWidget: 	a RubScrolledTextMorph(837683456)
		sourceTextWidget: 	a RubScrolledTextMorph(537463296)
		sourceCodeSelectionInterval: 	(1 to: 0)
		sourceTextModel: 	a RubScrolledTextModel
		methodClassifier: 	nil
		commentTextModel: 	nil
		instanceButtonWidget: 	a PluggableToggleButtonMorph(1068761344)
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageWidget
		packagePatternString: 	'MetaProg'
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(669064448)


OrderedCollection>>do:
	Receiver: an OrderedCollection(a PackageTreeTagSelection)
	Arguments and temporary variables: 
		aBlock: 	[ :each | self selectedPackageWithoutChangingSelection: each ]
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a PackageTreeTagSelection)
		firstIndex: 	1
		lastIndex: 	1


NautilusUI>>selectedFromPackageGroupView:
	Receiver: a NautilusUI
	Arguments and temporary variables: 
		aNode: 	a MorphTreeMorphMultipleSelection
		selections: 	an OrderedCollection(a PackageTreeTagSelection)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		announceur: 	nil
		model: 	a Nautilus
		window: 	a NautilusWindow(1021156352)
		sourceCodePanel: 	a PanelMorph(832888064)
		fullDisplayedComment: 	false
		sourceCodeContainer: 	a PanelMorph(1054231808)
		shouldUpdateTitle: 	true
		contentSelection: 	a Text for ''
		acceptor: 	a ClassDefinitionAcceptor
		commentWidget: 	a RubScrolledTextMorph(837683456)
		sourceTextWidget: 	a RubScrolledTextMorph(537463296)
		sourceCodeSelectionInterval: 	(1 to: 0)
		sourceTextModel: 	a RubScrolledTextModel
		methodClassifier: 	nil
		commentTextModel: 	nil
		instanceButtonWidget: 	a PluggableToggleButtonMorph(1068761344)
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageWidget
		packagePatternString: 	'MetaProg'
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(669064448)


[ :ann | self model selectedFromPackageGroupView: ann selection ] in PackageWidget>>buildPackagesList
	Receiver: a PackageWidget
	Arguments and temporary variables: 
		treeModel: 	nil
		ann: 	a MorphTreeSelectionChanged
	Receiver's instance variables: 
		dependents: 	nil
		announceur: 	nil
		model: 	a NautilusUI
		packagesList: 	a MorphTreeMorph(697562880)
		packagesSelection: 	a Dictionary(a RPackageTag(MetaProg)->true )
		groupsSelection: 	a Dictionary()


BlockClosure>>cull:
	Receiver: [ :ann | self model selectedFromPackageGroupView: ann selection ]
	Arguments and temporary variables: 
		anArg: 	a MorphTreeSelectionChanged
	Receiver's instance variables: 
		outerContext: 	PackageWidget>>buildPackagesList
		startpc: 	262
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [ :ann | self model selectedFromPackageGroupView: ann selection ]
	Arguments and temporary variables: 
		firstArg: 	a MorphTreeSelectionChanged
		secondArg: 	an Announcer
	Receiver's instance variables: 
		outerContext: 	PackageWidget>>buildPackagesList
		startpc: 	262
		numArgs: 	1


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphTreeSelectionChanged
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphTreeSelectionChanged
		subscriber: 	a PackageWidget
		action: 	[ :ann | self model selectedFromPackageGroupView: ann selection ]


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphTreeSelectionChanged
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphTreeSelectionChanged
		subscriber: 	a PackageWidget
		action: 	[ :ann | self model selectedFromPackageGroupView: ann selection ]


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphTreeSelectionChanged
		subs: 	an Array(an AnnouncementSubscription)
		startIndex: 	1
		index: 	1
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphTreeSelectionChanged
		subs: 	an Array(an AnnouncementSubscription)
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	1
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphTreeSelectionChanged
		subs: 	an Array(an AnnouncementSubscription)
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()



--- The full stack ---
BlockClosure(Object)>>doesNotUnderstand: #sendsSelector:
[ :cm | cm sendsSelector: #subclassResponsibility ] in Pile class(Behavior)>>hasAbstractMethods
[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in Array(Collection)>>anySatisfy:
Array(SequenceableCollection)>>do:
Array(Collection)>>anySatisfy:
Pile class(Behavior)>>hasAbstractMethods
Pile class(Class)>>hasAbstractMethods
ClassWidget>>buildTabbedNameOf:
ClassWidget>>classWrapper:
FTPluggableIconListMorphAdaptorDataSource>>elementWrapped:
FTPluggableIconListMorphAdaptorDataSource>>cellColumn:row:
FTTableContainerMorph>>updateExposedRows
FTPluggableIconListMorphAdaptor(FTTableMorph)>>resetPosition
FTPluggableIconListMorphAdaptor>>updateList
FTPluggableIconListMorphAdaptor>>update:
[ :aDependent | aDependent update: aParameter ] in ClassWidget(Model)>>changed:
DependentsArray>>do:
ClassWidget(Model)>>changed:
ClassWidget(AbstractWidget)>>update:
[ :aDependent | aDependent update: aParameter ] in NautilusUI(Model)>>changed:
DependentsArray>>do:
NautilusUI(Model)>>changed:
NautilusUI(AbstractNautilusUI)>>changed:
NautilusUI(AbstractNautilusUI)>>updateClassView
NautilusUI>>selectedPackageWithoutChangingSelection:
[ :each | self selectedPackageWithoutChangingSelection: each ] in NautilusUI>>selectedFromPackageGroupView:
OrderedCollection>>do:
NautilusUI>>selectedFromPackageGroupView:
[ :ann | self model selectedFromPackageGroupView: ann selection ] in PackageWidget>>buildPackagesList
BlockClosure>>cull:
BlockClosure>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
SubscriptionRegistry>>deliver:
Announcer>>announce:
PackageTreeModel(MorphTreeModel)>>requestView:
PackageTreeModel(MorphTreeModel)>>selectionChanged
MorphTreeListManager>>updateSelectionFromModel
MorphTreeMorph>>updateSelectionFromModel
MorphTreeMorph(Object)>>perform:withEnoughArguments:
MorphTreeChangeRequest>>change:
MorphTreeMorph>>changeRequest:
MessageSend>>value:
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
PackageTreeModel(MorphTreeModel)>>requestView:
PackageTreeModel(MorphTreeModel)>>selection:
[ | selHolder |
selHolder := self newSelectionHolderWithNodePath: path.
self listModel selection: selHolder ] in MorphTreeListManager>>mouseUp:on:
BlockClosure>>ensure:
MorphTreeListManager>>selectionUpdateFromViewWhile:
MorphTreeListManager>>mouseUp:on:
MorphTreeMorph>>mouseUp:
MorphTreeMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
MorphTreeMorph(Morph)>>handleEvent:
MorphTreeMorph(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of BlockClosure did not understand #sendsSelector:
28 September 2018 11:33:44.117736 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

BlockClosure(Object)>>doesNotUnderstand: #sendsSelector:
	Receiver: [  ]
	Arguments and temporary variables: 
		aMessage: 	sendsSelector: #subclassResponsibility
		exception: 	MessageNotUnderstood: BlockClosure>>sendsSelector:
		resumeValue: 	nil
	Receiver's instance variables: 
		outerContext: 	IDM>>idmPile
		startpc: 	130
		numArgs: 	0


[ :cm | cm sendsSelector: #subclassResponsibility ] in Pile class(Behavior)>>hasAbstractMethods
	Receiver: Pile
	Arguments and temporary variables: 
		cm: 	[  ]
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#capacity->Pile>>#capacity #do:->Pile>>#do: #gro...etc...
		format: 	65539
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{PileTypee. PileGrossissante}
		name: 	#Pile
		classPool: 	a Dictionary(#tailleDefaut->5 )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#MetaProg
		traitComposition: 	{}
		localSelectors: 	nil


[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in Array(Collection)>>anySatisfy:
	Receiver: an Array(Pile>>#size Pile>>#push: [  ] Pile>>#isFull Pile>>#do: Pile>>#initialize: Pile>>#...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :cm | cm sendsSelector: #subclassResponsibility ]
		each: 	[  ]
	Receiver's instance variables: 
an Array(Pile>>#size Pile>>#push: [  ] Pile>>#isFull Pile>>#do: Pile>>#initialize: Pile>>#...etc...

Array(SequenceableCollection)>>do:
	Receiver: an Array(Pile>>#size Pile>>#push: [  ] Pile>>#isFull Pile>>#do: Pile>>#initialize: Pile>>#...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ]
		index: 	3
	Receiver's instance variables: 
an Array(Pile>>#size Pile>>#push: [  ] Pile>>#isFull Pile>>#do: Pile>>#initialize: Pile>>#...etc...

Array(Collection)>>anySatisfy:
	Receiver: an Array(Pile>>#size Pile>>#push: [  ] Pile>>#isFull Pile>>#do: Pile>>#initialize: Pile>>#...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :cm | cm sendsSelector: #subclassResponsibility ]
	Receiver's instance variables: 
an Array(Pile>>#size Pile>>#push: [  ] Pile>>#isFull Pile>>#do: Pile>>#initialize: Pile>>#...etc...

Pile class(Behavior)>>hasAbstractMethods
	Receiver: Pile
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#capacity->Pile>>#capacity #do:->Pile>>#do: #gro...etc...
		format: 	65539
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{PileTypee. PileGrossissante}
		name: 	#Pile
		classPool: 	a Dictionary(#tailleDefaut->5 )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#MetaProg
		traitComposition: 	{}
		localSelectors: 	nil


Pile class(Class)>>hasAbstractMethods
	Receiver: Pile
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#capacity->Pile>>#capacity #do:->Pile>>#do: #gro...etc...
		format: 	65539
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{PileTypee. PileGrossissante}
		name: 	#Pile
		classPool: 	a Dictionary(#tailleDefaut->5 )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#MetaProg
		traitComposition: 	{}
		localSelectors: 	nil


ClassWidget>>buildTabbedNameOf:
	Receiver: a ClassWidget
	Arguments and temporary variables: 
		anElement: 	Pile
		tab: 	'   '
		size: 	0
		stringMorph: 	a StringMorph(762615296)#Pile
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a FTPluggableIconListMorphAdaptor(649379328))
		announceur: 	nil
		model: 	a NautilusUI
		classesList: 	a FTPluggableIconListMorphAdaptor(649379328)
		classesSelection: 	a Dictionary()
		classesListElements: 	an OrderedCollection(IDM Pile PileGrossissante PileTypee T...etc...
		cachedHierarchy: 	a SortHierarchically
		showHierarchy: 	false


ClassWidget>>classWrapper:
	Receiver: a ClassWidget
	Arguments and temporary variables: 
		anElement: 	Pile
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a FTPluggableIconListMorphAdaptor(649379328))
		announceur: 	nil
		model: 	a NautilusUI
		classesList: 	a FTPluggableIconListMorphAdaptor(649379328)
		classesSelection: 	a Dictionary()
		classesListElements: 	an OrderedCollection(IDM Pile PileGrossissante PileTypee T...etc...
		cachedHierarchy: 	a SortHierarchically
		showHierarchy: 	false


FTPluggableIconListMorphAdaptorDataSource>>elementWrapped:
	Receiver: a FTPluggableIconListMorphAdaptorDataSource
	Arguments and temporary variables: 
		object: 	Pile
		selector: 	#classWrapper:
	Receiver's instance variables: 
		table: 	a FTPluggableIconListMorphAdaptor(649379328)
		model: 	a ClassWidget
		getListSelector: 	nil
		getListElementSelector: 	#getClassItem:
		wrapSelector: 	#classWrapper:
		getIconSelector: 	#classIconFor:
		getListSizeSelector: 	#classListSize
		getMenuSelector: 	#classesMenu:shifted:
		dropItemSelector: 	#dropInClass:inARow:
		wantsDropSelector: 	nil


FTPluggableIconListMorphAdaptorDataSource>>cellColumn:row:
	Receiver: a FTPluggableIconListMorphAdaptorDataSource
	Arguments and temporary variables: 
		column: 	a FTColumn
		rowIndex: 	2
		object: 	Pile
		text: 	nil
		icon: 	Form(16x16x32)
	Receiver's instance variables: 
		table: 	a FTPluggableIconListMorphAdaptor(649379328)
		model: 	a ClassWidget
		getListSelector: 	nil
		getListElementSelector: 	#getClassItem:
		wrapSelector: 	#classWrapper:
		getIconSelector: 	#classIconFor:
		getListSizeSelector: 	#classListSize
		getMenuSelector: 	#classesMenu:shifted:
		dropItemSelector: 	#dropInClass:inARow:
		wantsDropSelector: 	nil


FTTableContainerMorph>>updateExposedRows
	Receiver: a FTTableContainerMorph(882312192)
	Arguments and temporary variables: 
		visibleRows: 	11
		numberOfColumns: 	1
		columns: 	an Array(a FTColumn)
		columnWidths: 	#(233.0)
		startIndex: 	1
		rowIndex: 	2
		row: 	a FTTableRowMorph(22622464)
		columnIndex: 	1
		cell: 	nil
	Receiver's instance variables: 
		bounds: 	(526.0@357.0) corner: (759.0@578.0)
		owner: 	a FTPluggableIconListMorphAdaptor(649379328)
		submorphs: 	an Array(a FTTableRowMorph(688675584) a FTTableRowMorph(713692416) a...etc...
		fullBounds: 	(526.0@357.0) corner: (759.0@578.0)
		color: 	Color transparent
		extension: 	a MorphExtension (262015488) [other:  (errorOnDraw -> true) (drawErr...etc...
		needsRefreshExposedRows: 	true
		headerRow: 	nil
		exposedRows: 	a SmallDictionary(1->a FTTableRowMorph(114104576))


FTPluggableIconListMorphAdaptor(FTTableMorph)>>resetPosition
	Receiver: a FTPluggableIconListMorphAdaptor(649379328)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(526.0@357.0) corner: (759.0@578.0)
		owner: 	a PanelMorph(609962240)
		submorphs: 	an Array(a FTTableContainerMorph(882312192))
		fullBounds: 	(526.0@357.0) corner: (759.0@578.0)
		color: 	(Color r: 0.13 g: 0.13 b: 0.13 alpha: 1.0)
		extension: 	a MorphExtension (292717568) [other:  (announcer -> an Announcer) (k...etc...
		container: 	a FTTableContainerMorph(882312192)
		verticalScrollBar: 	a ScrollBar(895827456)
		selectionColor: 	nil
		showIndex: 	1
		dataSource: 	a FTPluggableIconListMorphAdaptorDataSource
		intercellSpacing: 	nil
		rowHeight: 	20.333333333333336
		selectedRowIndexes: 	#()
		highlightedRowIndexes: 	#()
		selectionStrategy: 	a FTMultipleSelection
		columns: 	an Array(a FTColumn)
		secondarySelectionColor: 	nil
		headerColor: 	nil
		showColumnHeaders: 	false
		allowsDeselection: 	true
		needToggleAtMouseUp: 	false
		function: 	a FTSearchFunction
		resizable: 	false
		setSelectionListSelector: 	#classSelectionAt:put:
		getSelectionListSelector: 	#classSelectionAt:
		setIndexSelector: 	#selectedClassIndex:
		getIndexSelector: 	#selectedClassIndex
		keystrokeSelector: 	#keyPressedOnList:shifted:
		resetListSelector: 	#resetClassSelection
		doubleClickSelector: 	#doubleClick:
		keystrokeActionSelector: 	nil


FTPluggableIconListMorphAdaptor>>updateList
	Receiver: a FTPluggableIconListMorphAdaptor(649379328)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(526.0@357.0) corner: (759.0@578.0)
		owner: 	a PanelMorph(609962240)
		submorphs: 	an Array(a FTTableContainerMorph(882312192))
		fullBounds: 	(526.0@357.0) corner: (759.0@578.0)
		color: 	(Color r: 0.13 g: 0.13 b: 0.13 alpha: 1.0)
		extension: 	a MorphExtension (292717568) [other:  (announcer -> an Announcer) (k...etc...
		container: 	a FTTableContainerMorph(882312192)
		verticalScrollBar: 	a ScrollBar(895827456)
		selectionColor: 	nil
		showIndex: 	1
		dataSource: 	a FTPluggableIconListMorphAdaptorDataSource
		intercellSpacing: 	nil
		rowHeight: 	20.333333333333336
		selectedRowIndexes: 	#()
		highlightedRowIndexes: 	#()
		selectionStrategy: 	a FTMultipleSelection
		columns: 	an Array(a FTColumn)
		secondarySelectionColor: 	nil
		headerColor: 	nil
		showColumnHeaders: 	false
		allowsDeselection: 	true
		needToggleAtMouseUp: 	false
		function: 	a FTSearchFunction
		resizable: 	false
		setSelectionListSelector: 	#classSelectionAt:put:
		getSelectionListSelector: 	#classSelectionAt:
		setIndexSelector: 	#selectedClassIndex:
		getIndexSelector: 	#selectedClassIndex
		keystrokeSelector: 	#keyPressedOnList:shifted:
		resetListSelector: 	#resetClassSelection
		doubleClickSelector: 	#doubleClick:
		keystrokeActionSelector: 	nil


FTPluggableIconListMorphAdaptor>>update:
	Receiver: a FTPluggableIconListMorphAdaptor(649379328)
	Arguments and temporary variables: 
		symbol: 	#getClassItem:
	Receiver's instance variables: 
		bounds: 	(526.0@357.0) corner: (759.0@578.0)
		owner: 	a PanelMorph(609962240)
		submorphs: 	an Array(a FTTableContainerMorph(882312192))
		fullBounds: 	(526.0@357.0) corner: (759.0@578.0)
		color: 	(Color r: 0.13 g: 0.13 b: 0.13 alpha: 1.0)
		extension: 	a MorphExtension (292717568) [other:  (announcer -> an Announcer) (k...etc...
		container: 	a FTTableContainerMorph(882312192)
		verticalScrollBar: 	a ScrollBar(895827456)
		selectionColor: 	nil
		showIndex: 	1
		dataSource: 	a FTPluggableIconListMorphAdaptorDataSource
		intercellSpacing: 	nil
		rowHeight: 	20.333333333333336
		selectedRowIndexes: 	#()
		highlightedRowIndexes: 	#()
		selectionStrategy: 	a FTMultipleSelection
		columns: 	an Array(a FTColumn)
		secondarySelectionColor: 	nil
		headerColor: 	nil
		showColumnHeaders: 	false
		allowsDeselection: 	true
		needToggleAtMouseUp: 	false
		function: 	a FTSearchFunction
		resizable: 	false
		setSelectionListSelector: 	#classSelectionAt:put:
		getSelectionListSelector: 	#classSelectionAt:
		setIndexSelector: 	#selectedClassIndex:
		getIndexSelector: 	#selectedClassIndex
		keystrokeSelector: 	#keyPressedOnList:shifted:
		resetListSelector: 	#resetClassSelection
		doubleClickSelector: 	#doubleClick:
		keystrokeActionSelector: 	nil


[ :aDependent | aDependent update: aParameter ] in ClassWidget(Model)>>changed:
	Receiver: a ClassWidget
	Arguments and temporary variables: 
		aParameter: 	#getClassItem:
		aDependent: 	a FTPluggableIconListMorphAdaptor(649379328)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a FTPluggableIconListMorphAdaptor(649379328))
		announceur: 	nil
		model: 	a NautilusUI
		classesList: 	a FTPluggableIconListMorphAdaptor(649379328)
		classesSelection: 	a Dictionary()
		classesListElements: 	an OrderedCollection(IDM Pile PileGrossissante PileTypee T...etc...
		cachedHierarchy: 	a SortHierarchically
		showHierarchy: 	false


DependentsArray>>do:
	Receiver: a DependentsArray(a FTPluggableIconListMorphAdaptor(649379328))
	Arguments and temporary variables: 
		aBlock: 	[ :aDependent | aDependent update: aParameter ]
		dep: 	a FTPluggableIconListMorphAdaptor(649379328)
		i: 	1
	Receiver's instance variables: 
a DependentsArray(a FTPluggableIconListMorphAdaptor(649379328))

ClassWidget(Model)>>changed:
	Receiver: a ClassWidget
	Arguments and temporary variables: 
		aParameter: 	#getClassItem:
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a FTPluggableIconListMorphAdaptor(649379328))
		announceur: 	nil
		model: 	a NautilusUI
		classesList: 	a FTPluggableIconListMorphAdaptor(649379328)
		classesSelection: 	a Dictionary()
		classesListElements: 	an OrderedCollection(IDM Pile PileGrossissante PileTypee T...etc...
		cachedHierarchy: 	a SortHierarchically
		showHierarchy: 	false


ClassWidget(AbstractWidget)>>update:
	Receiver: a ClassWidget
	Arguments and temporary variables: 
		aSymbol: 	#getClassItem:
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a FTPluggableIconListMorphAdaptor(649379328))
		announceur: 	nil
		model: 	a NautilusUI
		classesList: 	a FTPluggableIconListMorphAdaptor(649379328)
		classesSelection: 	a Dictionary()
		classesListElements: 	an OrderedCollection(IDM Pile PileGrossissante PileTypee T...etc...
		cachedHierarchy: 	a SortHierarchically
		showHierarchy: 	false


[ :aDependent | aDependent update: aParameter ] in NautilusUI(Model)>>changed:
	Receiver: a NautilusUI
	Arguments and temporary variables: 
		aParameter: 	#getClassItem:
		aDependent: 	a ClassWidget
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		announceur: 	nil
		model: 	a Nautilus
		window: 	a NautilusWindow(1021156352)
		sourceCodePanel: 	a PanelMorph(832888064)
		fullDisplayedComment: 	false
		sourceCodeContainer: 	a PanelMorph(1054231808)
		shouldUpdateTitle: 	true
		contentSelection: 	a Text for ''
		acceptor: 	a ClassDefinitionAcceptor
		commentWidget: 	a RubScrolledTextMorph(837683456)
		sourceTextWidget: 	a RubScrolledTextMorph(537463296)
		sourceCodeSelectionInterval: 	(1 to: 0)
		sourceTextModel: 	a RubScrolledTextModel
		methodClassifier: 	nil
		commentTextModel: 	nil
		instanceButtonWidget: 	a PluggableToggleButtonMorph(1068761344)
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageWidget
		packagePatternString: 	'MetaProg'
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(669064448)


DependentsArray>>do:
	Receiver: a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a PackageWidget a Nautilus...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :aDependent | aDependent update: aParameter ]
		dep: 	a ClassWidget
		i: 	3
	Receiver's instance variables: 
a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a PackageWidget a Nautilus...etc...

NautilusUI(Model)>>changed:
	Receiver: a NautilusUI
	Arguments and temporary variables: 
		aParameter: 	#getClassItem:
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		announceur: 	nil
		model: 	a Nautilus
		window: 	a NautilusWindow(1021156352)
		sourceCodePanel: 	a PanelMorph(832888064)
		fullDisplayedComment: 	false
		sourceCodeContainer: 	a PanelMorph(1054231808)
		shouldUpdateTitle: 	true
		contentSelection: 	a Text for ''
		acceptor: 	a ClassDefinitionAcceptor
		commentWidget: 	a RubScrolledTextMorph(837683456)
		sourceTextWidget: 	a RubScrolledTextMorph(537463296)
		sourceCodeSelectionInterval: 	(1 to: 0)
		sourceTextModel: 	a RubScrolledTextModel
		methodClassifier: 	nil
		commentTextModel: 	nil
		instanceButtonWidget: 	a PluggableToggleButtonMorph(1068761344)
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageWidget
		packagePatternString: 	'MetaProg'
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(669064448)


NautilusUI(AbstractNautilusUI)>>changed:
	Receiver: a NautilusUI
	Arguments and temporary variables: 
		aSymbol: 	#getClassItem:
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		announceur: 	nil
		model: 	a Nautilus
		window: 	a NautilusWindow(1021156352)
		sourceCodePanel: 	a PanelMorph(832888064)
		fullDisplayedComment: 	false
		sourceCodeContainer: 	a PanelMorph(1054231808)
		shouldUpdateTitle: 	true
		contentSelection: 	a Text for ''
		acceptor: 	a ClassDefinitionAcceptor
		commentWidget: 	a RubScrolledTextMorph(837683456)
		sourceTextWidget: 	a RubScrolledTextMorph(537463296)
		sourceCodeSelectionInterval: 	(1 to: 0)
		sourceTextModel: 	a RubScrolledTextModel
		methodClassifier: 	nil
		commentTextModel: 	nil
		instanceButtonWidget: 	a PluggableToggleButtonMorph(1068761344)
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageWidget
		packagePatternString: 	'MetaProg'
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(669064448)


NautilusUI(AbstractNautilusUI)>>updateClassView
	Receiver: a NautilusUI
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		announceur: 	nil
		model: 	a Nautilus
		window: 	a NautilusWindow(1021156352)
		sourceCodePanel: 	a PanelMorph(832888064)
		fullDisplayedComment: 	false
		sourceCodeContainer: 	a PanelMorph(1054231808)
		shouldUpdateTitle: 	true
		contentSelection: 	a Text for ''
		acceptor: 	a ClassDefinitionAcceptor
		commentWidget: 	a RubScrolledTextMorph(837683456)
		sourceTextWidget: 	a RubScrolledTextMorph(537463296)
		sourceCodeSelectionInterval: 	(1 to: 0)
		sourceTextModel: 	a RubScrolledTextModel
		methodClassifier: 	nil
		commentTextModel: 	nil
		instanceButtonWidget: 	a PluggableToggleButtonMorph(1068761344)
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageWidget
		packagePatternString: 	'MetaProg'
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(669064448)


NautilusUI>>selectedPackageWithoutChangingSelection:
	Receiver: a NautilusUI
	Arguments and temporary variables: 
		aSelection: 	a PackageTreePackageSelection
		class: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		announceur: 	nil
		model: 	a Nautilus
		window: 	a NautilusWindow(1021156352)
		sourceCodePanel: 	a PanelMorph(832888064)
		fullDisplayedComment: 	false
		sourceCodeContainer: 	a PanelMorph(1054231808)
		shouldUpdateTitle: 	true
		contentSelection: 	a Text for ''
		acceptor: 	a ClassDefinitionAcceptor
		commentWidget: 	a RubScrolledTextMorph(837683456)
		sourceTextWidget: 	a RubScrolledTextMorph(537463296)
		sourceCodeSelectionInterval: 	(1 to: 0)
		sourceTextModel: 	a RubScrolledTextModel
		methodClassifier: 	nil
		commentTextModel: 	nil
		instanceButtonWidget: 	a PluggableToggleButtonMorph(1068761344)
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageWidget
		packagePatternString: 	'MetaProg'
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(669064448)


[ :each | self selectedPackageWithoutChangingSelection: each ] in NautilusUI>>selectedFromPackageGroupView:
	Receiver: a NautilusUI
	Arguments and temporary variables: 
		aNode: 	a MorphTreeMorphMultipleSelection
		selections: 	an OrderedCollection(a PackageTreePackageSelection)
		each: 	a PackageTreePackageSelection
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		announceur: 	nil
		model: 	a Nautilus
		window: 	a NautilusWindow(1021156352)
		sourceCodePanel: 	a PanelMorph(832888064)
		fullDisplayedComment: 	false
		sourceCodeContainer: 	a PanelMorph(1054231808)
		shouldUpdateTitle: 	true
		contentSelection: 	a Text for ''
		acceptor: 	a ClassDefinitionAcceptor
		commentWidget: 	a RubScrolledTextMorph(837683456)
		sourceTextWidget: 	a RubScrolledTextMorph(537463296)
		sourceCodeSelectionInterval: 	(1 to: 0)
		sourceTextModel: 	a RubScrolledTextModel
		methodClassifier: 	nil
		commentTextModel: 	nil
		instanceButtonWidget: 	a PluggableToggleButtonMorph(1068761344)
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageWidget
		packagePatternString: 	'MetaProg'
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(669064448)


OrderedCollection>>do:
	Receiver: an OrderedCollection(a PackageTreePackageSelection)
	Arguments and temporary variables: 
		aBlock: 	[ :each | self selectedPackageWithoutChangingSelection: each ]
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a PackageTreePackageSelection)
		firstIndex: 	1
		lastIndex: 	1


NautilusUI>>selectedFromPackageGroupView:
	Receiver: a NautilusUI
	Arguments and temporary variables: 
		aNode: 	a MorphTreeMorphMultipleSelection
		selections: 	an OrderedCollection(a PackageTreePackageSelection)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		announceur: 	nil
		model: 	a Nautilus
		window: 	a NautilusWindow(1021156352)
		sourceCodePanel: 	a PanelMorph(832888064)
		fullDisplayedComment: 	false
		sourceCodeContainer: 	a PanelMorph(1054231808)
		shouldUpdateTitle: 	true
		contentSelection: 	a Text for ''
		acceptor: 	a ClassDefinitionAcceptor
		commentWidget: 	a RubScrolledTextMorph(837683456)
		sourceTextWidget: 	a RubScrolledTextMorph(537463296)
		sourceCodeSelectionInterval: 	(1 to: 0)
		sourceTextModel: 	a RubScrolledTextModel
		methodClassifier: 	nil
		commentTextModel: 	nil
		instanceButtonWidget: 	a PluggableToggleButtonMorph(1068761344)
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageWidget
		packagePatternString: 	'MetaProg'
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(669064448)


[ :ann | self model selectedFromPackageGroupView: ann selection ] in PackageWidget>>buildPackagesList
	Receiver: a PackageWidget
	Arguments and temporary variables: 
		treeModel: 	nil
		ann: 	a MorphTreeSelectionChanged
	Receiver's instance variables: 
		dependents: 	nil
		announceur: 	nil
		model: 	a NautilusUI
		packagesList: 	a MorphTreeMorph(697562880)
		packagesSelection: 	a Dictionary(a RPackage(MetaProg)->true )
		groupsSelection: 	a Dictionary()


BlockClosure>>cull:
	Receiver: [ :ann | self model selectedFromPackageGroupView: ann selection ]
	Arguments and temporary variables: 
		anArg: 	a MorphTreeSelectionChanged
	Receiver's instance variables: 
		outerContext: 	PackageWidget>>buildPackagesList
		startpc: 	262
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [ :ann | self model selectedFromPackageGroupView: ann selection ]
	Arguments and temporary variables: 
		firstArg: 	a MorphTreeSelectionChanged
		secondArg: 	an Announcer
	Receiver's instance variables: 
		outerContext: 	PackageWidget>>buildPackagesList
		startpc: 	262
		numArgs: 	1


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphTreeSelectionChanged
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphTreeSelectionChanged
		subscriber: 	a PackageWidget
		action: 	[ :ann | self model selectedFromPackageGroupView: ann selection ]


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphTreeSelectionChanged
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphTreeSelectionChanged
		subscriber: 	a PackageWidget
		action: 	[ :ann | self model selectedFromPackageGroupView: ann selection ]


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphTreeSelectionChanged
		subs: 	an Array(an AnnouncementSubscription)
		startIndex: 	1
		index: 	1
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphTreeSelectionChanged
		subs: 	an Array(an AnnouncementSubscription)
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	1
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphTreeSelectionChanged
		subs: 	an Array(an AnnouncementSubscription)
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()



--- The full stack ---
BlockClosure(Object)>>doesNotUnderstand: #sendsSelector:
[ :cm | cm sendsSelector: #subclassResponsibility ] in Pile class(Behavior)>>hasAbstractMethods
[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in Array(Collection)>>anySatisfy:
Array(SequenceableCollection)>>do:
Array(Collection)>>anySatisfy:
Pile class(Behavior)>>hasAbstractMethods
Pile class(Class)>>hasAbstractMethods
ClassWidget>>buildTabbedNameOf:
ClassWidget>>classWrapper:
FTPluggableIconListMorphAdaptorDataSource>>elementWrapped:
FTPluggableIconListMorphAdaptorDataSource>>cellColumn:row:
FTTableContainerMorph>>updateExposedRows
FTPluggableIconListMorphAdaptor(FTTableMorph)>>resetPosition
FTPluggableIconListMorphAdaptor>>updateList
FTPluggableIconListMorphAdaptor>>update:
[ :aDependent | aDependent update: aParameter ] in ClassWidget(Model)>>changed:
DependentsArray>>do:
ClassWidget(Model)>>changed:
ClassWidget(AbstractWidget)>>update:
[ :aDependent | aDependent update: aParameter ] in NautilusUI(Model)>>changed:
DependentsArray>>do:
NautilusUI(Model)>>changed:
NautilusUI(AbstractNautilusUI)>>changed:
NautilusUI(AbstractNautilusUI)>>updateClassView
NautilusUI>>selectedPackageWithoutChangingSelection:
[ :each | self selectedPackageWithoutChangingSelection: each ] in NautilusUI>>selectedFromPackageGroupView:
OrderedCollection>>do:
NautilusUI>>selectedFromPackageGroupView:
[ :ann | self model selectedFromPackageGroupView: ann selection ] in PackageWidget>>buildPackagesList
BlockClosure>>cull:
BlockClosure>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
SubscriptionRegistry>>deliver:
Announcer>>announce:
PackageTreeModel(MorphTreeModel)>>requestView:
PackageTreeModel(MorphTreeModel)>>selectionChanged
MorphTreeListManager>>updateSelectionFromModel
MorphTreeMorph>>updateSelectionFromModel
MorphTreeMorph(Object)>>perform:withEnoughArguments:
MorphTreeChangeRequest>>change:
MorphTreeMorph>>changeRequest:
MessageSend>>value:
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
PackageTreeModel(MorphTreeModel)>>requestView:
PackageTreeModel(MorphTreeModel)>>selection:
[ | selHolder |
selHolder := self newSelectionHolderWithNodePath: path.
self listModel selection: selHolder ] in MorphTreeListManager>>mouseUp:on:
BlockClosure>>ensure:
MorphTreeListManager>>selectionUpdateFromViewWhile:
MorphTreeListManager>>mouseUp:on:
MorphTreeMorph>>mouseUp:
MorphTreeMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
MorphTreeMorph(Morph)>>handleEvent:
MorphTreeMorph(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of BlockClosure did not understand #sendsSelector:
28 September 2018 11:34:08.390538 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

BlockClosure(Object)>>doesNotUnderstand: #sendsSelector:
	Receiver: [  ]
	Arguments and temporary variables: 
		aMessage: 	sendsSelector: #subclassResponsibility
		exception: 	MessageNotUnderstood: BlockClosure>>sendsSelector:
		resumeValue: 	nil
	Receiver's instance variables: 
		outerContext: 	IDM>>idmPile
		startpc: 	130
		numArgs: 	0


[ :cm | cm sendsSelector: #subclassResponsibility ] in Pile class(Behavior)>>hasAbstractMethods
	Receiver: Pile
	Arguments and temporary variables: 
		cm: 	[  ]
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#capacity->Pile>>#capacity #do:->Pile>>#do: #gro...etc...
		format: 	65539
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{PileTypee. PileGrossissante}
		name: 	#Pile
		classPool: 	a Dictionary(#tailleDefaut->5 )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#MetaProg
		traitComposition: 	{}
		localSelectors: 	nil


[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in Array(Collection)>>anySatisfy:
	Receiver: an Array(Pile>>#size Pile>>#push: [  ] Pile>>#isFull Pile>>#do: Pile>>#initialize: Pile>>#...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :cm | cm sendsSelector: #subclassResponsibility ]
		each: 	[  ]
	Receiver's instance variables: 
an Array(Pile>>#size Pile>>#push: [  ] Pile>>#isFull Pile>>#do: Pile>>#initialize: Pile>>#...etc...

Array(SequenceableCollection)>>do:
	Receiver: an Array(Pile>>#size Pile>>#push: [  ] Pile>>#isFull Pile>>#do: Pile>>#initialize: Pile>>#...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ]
		index: 	3
	Receiver's instance variables: 
an Array(Pile>>#size Pile>>#push: [  ] Pile>>#isFull Pile>>#do: Pile>>#initialize: Pile>>#...etc...

Array(Collection)>>anySatisfy:
	Receiver: an Array(Pile>>#size Pile>>#push: [  ] Pile>>#isFull Pile>>#do: Pile>>#initialize: Pile>>#...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :cm | cm sendsSelector: #subclassResponsibility ]
	Receiver's instance variables: 
an Array(Pile>>#size Pile>>#push: [  ] Pile>>#isFull Pile>>#do: Pile>>#initialize: Pile>>#...etc...

Pile class(Behavior)>>hasAbstractMethods
	Receiver: Pile
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#capacity->Pile>>#capacity #do:->Pile>>#do: #gro...etc...
		format: 	65539
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{PileTypee. PileGrossissante}
		name: 	#Pile
		classPool: 	a Dictionary(#tailleDefaut->5 )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#MetaProg
		traitComposition: 	{}
		localSelectors: 	nil


Pile class(Class)>>hasAbstractMethods
	Receiver: Pile
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#capacity->Pile>>#capacity #do:->Pile>>#do: #gro...etc...
		format: 	65539
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{PileTypee. PileGrossissante}
		name: 	#Pile
		classPool: 	a Dictionary(#tailleDefaut->5 )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#MetaProg
		traitComposition: 	{}
		localSelectors: 	nil


ClassWidget>>buildTabbedNameOf:
	Receiver: a ClassWidget
	Arguments and temporary variables: 
		anElement: 	Pile
		tab: 	'   '
		size: 	0
		stringMorph: 	a StringMorph(209876480)#Pile
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a FTPluggableIconListMorphAdaptor(629116160))
		announceur: 	nil
		model: 	a NautilusUI
		classesList: 	a FTPluggableIconListMorphAdaptor(629116160)
		classesSelection: 	a Dictionary()
		classesListElements: 	an OrderedCollection(IDM Pile PileGrossissante PileTypee T...etc...
		cachedHierarchy: 	a SortHierarchically
		showHierarchy: 	false


ClassWidget>>classWrapper:
	Receiver: a ClassWidget
	Arguments and temporary variables: 
		anElement: 	Pile
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a FTPluggableIconListMorphAdaptor(629116160))
		announceur: 	nil
		model: 	a NautilusUI
		classesList: 	a FTPluggableIconListMorphAdaptor(629116160)
		classesSelection: 	a Dictionary()
		classesListElements: 	an OrderedCollection(IDM Pile PileGrossissante PileTypee T...etc...
		cachedHierarchy: 	a SortHierarchically
		showHierarchy: 	false


FTPluggableIconListMorphAdaptorDataSource>>elementWrapped:
	Receiver: a FTPluggableIconListMorphAdaptorDataSource
	Arguments and temporary variables: 
		object: 	Pile
		selector: 	#classWrapper:
	Receiver's instance variables: 
		table: 	a FTPluggableIconListMorphAdaptor(629116160)
		model: 	a ClassWidget
		getListSelector: 	nil
		getListElementSelector: 	#getClassItem:
		wrapSelector: 	#classWrapper:
		getIconSelector: 	#classIconFor:
		getListSizeSelector: 	#classListSize
		getMenuSelector: 	#classesMenu:shifted:
		dropItemSelector: 	#dropInClass:inARow:
		wantsDropSelector: 	nil


FTPluggableIconListMorphAdaptorDataSource>>cellColumn:row:
	Receiver: a FTPluggableIconListMorphAdaptorDataSource
	Arguments and temporary variables: 
		column: 	a FTColumn
		rowIndex: 	2
		object: 	Pile
		text: 	nil
		icon: 	Form(16x16x32)
	Receiver's instance variables: 
		table: 	a FTPluggableIconListMorphAdaptor(629116160)
		model: 	a ClassWidget
		getListSelector: 	nil
		getListElementSelector: 	#getClassItem:
		wrapSelector: 	#classWrapper:
		getIconSelector: 	#classIconFor:
		getListSizeSelector: 	#classListSize
		getMenuSelector: 	#classesMenu:shifted:
		dropItemSelector: 	#dropInClass:inARow:
		wantsDropSelector: 	nil


FTTableContainerMorph>>updateExposedRows
	Receiver: a FTTableContainerMorph(1070520832)
	Arguments and temporary variables: 
		visibleRows: 	11
		numberOfColumns: 	1
		columns: 	an Array(a FTColumn)
		columnWidths: 	#(233.0)
		startIndex: 	1
		rowIndex: 	2
		row: 	a FTTableRowMorph(155603200)
		columnIndex: 	1
		cell: 	nil
	Receiver's instance variables: 
		bounds: 	(1053.0@449.0) corner: (1286.0@670.0)
		owner: 	a FTPluggableIconListMorphAdaptor(629116160)
		submorphs: 	an Array(a FTTableRowMorph(727156736) a FTTableRowMorph(669558528) a...etc...
		fullBounds: 	(1053.0@449.0) corner: (1286.0@670.0)
		color: 	Color transparent
		extension: 	nil
		needsRefreshExposedRows: 	true
		headerRow: 	nil
		exposedRows: 	a SmallDictionary(1->a FTTableRowMorph(664598784))


FTPluggableIconListMorphAdaptor(FTTableMorph)>>resetPosition
	Receiver: a FTPluggableIconListMorphAdaptor(629116160)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1053.0@449.0) corner: (1286.0@670.0)
		owner: 	a PanelMorph(422518016)
		submorphs: 	an Array(a ScrollBar(852805120) a FTTableContainerMorph(1070520832))...etc...
		fullBounds: 	(1053.0@449.0) corner: (1286.0@670.0)
		color: 	(Color r: 0.13 g: 0.13 b: 0.13 alpha: 1.0)
		extension: 	a MorphExtension (792742912) [other:  (announcer -> an Announcer) (k...etc...
		container: 	a FTTableContainerMorph(1070520832)
		verticalScrollBar: 	a ScrollBar(852805120)
		selectionColor: 	nil
		showIndex: 	1
		dataSource: 	a FTPluggableIconListMorphAdaptorDataSource
		intercellSpacing: 	nil
		rowHeight: 	20.333333333333336
		selectedRowIndexes: 	#()
		highlightedRowIndexes: 	#()
		selectionStrategy: 	a FTMultipleSelection
		columns: 	an Array(a FTColumn)
		secondarySelectionColor: 	nil
		headerColor: 	nil
		showColumnHeaders: 	false
		allowsDeselection: 	true
		needToggleAtMouseUp: 	false
		function: 	a FTSearchFunction
		resizable: 	false
		setSelectionListSelector: 	#classSelectionAt:put:
		getSelectionListSelector: 	#classSelectionAt:
		setIndexSelector: 	#selectedClassIndex:
		getIndexSelector: 	#selectedClassIndex
		keystrokeSelector: 	#keyPressedOnList:shifted:
		resetListSelector: 	#resetClassSelection
		doubleClickSelector: 	#doubleClick:
		keystrokeActionSelector: 	nil


FTPluggableIconListMorphAdaptor>>updateList
	Receiver: a FTPluggableIconListMorphAdaptor(629116160)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1053.0@449.0) corner: (1286.0@670.0)
		owner: 	a PanelMorph(422518016)
		submorphs: 	an Array(a ScrollBar(852805120) a FTTableContainerMorph(1070520832))...etc...
		fullBounds: 	(1053.0@449.0) corner: (1286.0@670.0)
		color: 	(Color r: 0.13 g: 0.13 b: 0.13 alpha: 1.0)
		extension: 	a MorphExtension (792742912) [other:  (announcer -> an Announcer) (k...etc...
		container: 	a FTTableContainerMorph(1070520832)
		verticalScrollBar: 	a ScrollBar(852805120)
		selectionColor: 	nil
		showIndex: 	1
		dataSource: 	a FTPluggableIconListMorphAdaptorDataSource
		intercellSpacing: 	nil
		rowHeight: 	20.333333333333336
		selectedRowIndexes: 	#()
		highlightedRowIndexes: 	#()
		selectionStrategy: 	a FTMultipleSelection
		columns: 	an Array(a FTColumn)
		secondarySelectionColor: 	nil
		headerColor: 	nil
		showColumnHeaders: 	false
		allowsDeselection: 	true
		needToggleAtMouseUp: 	false
		function: 	a FTSearchFunction
		resizable: 	false
		setSelectionListSelector: 	#classSelectionAt:put:
		getSelectionListSelector: 	#classSelectionAt:
		setIndexSelector: 	#selectedClassIndex:
		getIndexSelector: 	#selectedClassIndex
		keystrokeSelector: 	#keyPressedOnList:shifted:
		resetListSelector: 	#resetClassSelection
		doubleClickSelector: 	#doubleClick:
		keystrokeActionSelector: 	nil


FTPluggableIconListMorphAdaptor>>update:
	Receiver: a FTPluggableIconListMorphAdaptor(629116160)
	Arguments and temporary variables: 
		symbol: 	#getClassItem:
	Receiver's instance variables: 
		bounds: 	(1053.0@449.0) corner: (1286.0@670.0)
		owner: 	a PanelMorph(422518016)
		submorphs: 	an Array(a ScrollBar(852805120) a FTTableContainerMorph(1070520832))...etc...
		fullBounds: 	(1053.0@449.0) corner: (1286.0@670.0)
		color: 	(Color r: 0.13 g: 0.13 b: 0.13 alpha: 1.0)
		extension: 	a MorphExtension (792742912) [other:  (announcer -> an Announcer) (k...etc...
		container: 	a FTTableContainerMorph(1070520832)
		verticalScrollBar: 	a ScrollBar(852805120)
		selectionColor: 	nil
		showIndex: 	1
		dataSource: 	a FTPluggableIconListMorphAdaptorDataSource
		intercellSpacing: 	nil
		rowHeight: 	20.333333333333336
		selectedRowIndexes: 	#()
		highlightedRowIndexes: 	#()
		selectionStrategy: 	a FTMultipleSelection
		columns: 	an Array(a FTColumn)
		secondarySelectionColor: 	nil
		headerColor: 	nil
		showColumnHeaders: 	false
		allowsDeselection: 	true
		needToggleAtMouseUp: 	false
		function: 	a FTSearchFunction
		resizable: 	false
		setSelectionListSelector: 	#classSelectionAt:put:
		getSelectionListSelector: 	#classSelectionAt:
		setIndexSelector: 	#selectedClassIndex:
		getIndexSelector: 	#selectedClassIndex
		keystrokeSelector: 	#keyPressedOnList:shifted:
		resetListSelector: 	#resetClassSelection
		doubleClickSelector: 	#doubleClick:
		keystrokeActionSelector: 	nil


[ :aDependent | aDependent update: aParameter ] in ClassWidget(Model)>>changed:
	Receiver: a ClassWidget
	Arguments and temporary variables: 
		aParameter: 	#getClassItem:
		aDependent: 	a FTPluggableIconListMorphAdaptor(629116160)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a FTPluggableIconListMorphAdaptor(629116160))
		announceur: 	nil
		model: 	a NautilusUI
		classesList: 	a FTPluggableIconListMorphAdaptor(629116160)
		classesSelection: 	a Dictionary()
		classesListElements: 	an OrderedCollection(IDM Pile PileGrossissante PileTypee T...etc...
		cachedHierarchy: 	a SortHierarchically
		showHierarchy: 	false


DependentsArray>>do:
	Receiver: a DependentsArray(a FTPluggableIconListMorphAdaptor(629116160))
	Arguments and temporary variables: 
		aBlock: 	[ :aDependent | aDependent update: aParameter ]
		dep: 	a FTPluggableIconListMorphAdaptor(629116160)
		i: 	1
	Receiver's instance variables: 
a DependentsArray(a FTPluggableIconListMorphAdaptor(629116160))

ClassWidget(Model)>>changed:
	Receiver: a ClassWidget
	Arguments and temporary variables: 
		aParameter: 	#getClassItem:
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a FTPluggableIconListMorphAdaptor(629116160))
		announceur: 	nil
		model: 	a NautilusUI
		classesList: 	a FTPluggableIconListMorphAdaptor(629116160)
		classesSelection: 	a Dictionary()
		classesListElements: 	an OrderedCollection(IDM Pile PileGrossissante PileTypee T...etc...
		cachedHierarchy: 	a SortHierarchically
		showHierarchy: 	false


ClassWidget(AbstractWidget)>>update:
	Receiver: a ClassWidget
	Arguments and temporary variables: 
		aSymbol: 	#getClassItem:
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a FTPluggableIconListMorphAdaptor(629116160))
		announceur: 	nil
		model: 	a NautilusUI
		classesList: 	a FTPluggableIconListMorphAdaptor(629116160)
		classesSelection: 	a Dictionary()
		classesListElements: 	an OrderedCollection(IDM Pile PileGrossissante PileTypee T...etc...
		cachedHierarchy: 	a SortHierarchically
		showHierarchy: 	false


[ :aDependent | aDependent update: aParameter ] in NautilusUI(Model)>>changed:
	Receiver: a NautilusUI
	Arguments and temporary variables: 
		aParameter: 	#getClassItem:
		aDependent: 	a ClassWidget
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		announceur: 	nil
		model: 	a Nautilus
		window: 	a NautilusWindow(570220032)
		sourceCodePanel: 	a PanelMorph(645065472)
		fullDisplayedComment: 	false
		sourceCodeContainer: 	a PanelMorph(47148800)
		shouldUpdateTitle: 	true
		contentSelection: 	a Text for ''
		acceptor: 	a ClassDefinitionAcceptor
		commentWidget: 	nil
		sourceTextWidget: 	a RubScrolledTextMorph(11911168)
		sourceCodeSelectionInterval: 	(1 to: 0)
		sourceTextModel: 	a RubScrolledTextModel
		methodClassifier: 	nil
		commentTextModel: 	a RubScrolledTextModel
		instanceButtonWidget: 	a PluggableToggleButtonMorph(477979136)
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageWidget
		packagePatternString: 	'MetaProg'
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(909398528)


DependentsArray>>do:
	Receiver: a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a PackageWidget a Nautilus...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :aDependent | aDependent update: aParameter ]
		dep: 	a ClassWidget
		i: 	3
	Receiver's instance variables: 
a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a PackageWidget a Nautilus...etc...

NautilusUI(Model)>>changed:
	Receiver: a NautilusUI
	Arguments and temporary variables: 
		aParameter: 	#getClassItem:
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		announceur: 	nil
		model: 	a Nautilus
		window: 	a NautilusWindow(570220032)
		sourceCodePanel: 	a PanelMorph(645065472)
		fullDisplayedComment: 	false
		sourceCodeContainer: 	a PanelMorph(47148800)
		shouldUpdateTitle: 	true
		contentSelection: 	a Text for ''
		acceptor: 	a ClassDefinitionAcceptor
		commentWidget: 	nil
		sourceTextWidget: 	a RubScrolledTextMorph(11911168)
		sourceCodeSelectionInterval: 	(1 to: 0)
		sourceTextModel: 	a RubScrolledTextModel
		methodClassifier: 	nil
		commentTextModel: 	a RubScrolledTextModel
		instanceButtonWidget: 	a PluggableToggleButtonMorph(477979136)
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageWidget
		packagePatternString: 	'MetaProg'
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(909398528)


NautilusUI(AbstractNautilusUI)>>changed:
	Receiver: a NautilusUI
	Arguments and temporary variables: 
		aSymbol: 	#getClassItem:
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		announceur: 	nil
		model: 	a Nautilus
		window: 	a NautilusWindow(570220032)
		sourceCodePanel: 	a PanelMorph(645065472)
		fullDisplayedComment: 	false
		sourceCodeContainer: 	a PanelMorph(47148800)
		shouldUpdateTitle: 	true
		contentSelection: 	a Text for ''
		acceptor: 	a ClassDefinitionAcceptor
		commentWidget: 	nil
		sourceTextWidget: 	a RubScrolledTextMorph(11911168)
		sourceCodeSelectionInterval: 	(1 to: 0)
		sourceTextModel: 	a RubScrolledTextModel
		methodClassifier: 	nil
		commentTextModel: 	a RubScrolledTextModel
		instanceButtonWidget: 	a PluggableToggleButtonMorph(477979136)
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageWidget
		packagePatternString: 	'MetaProg'
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(909398528)


NautilusUI(AbstractNautilusUI)>>updateClassView
	Receiver: a NautilusUI
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		announceur: 	nil
		model: 	a Nautilus
		window: 	a NautilusWindow(570220032)
		sourceCodePanel: 	a PanelMorph(645065472)
		fullDisplayedComment: 	false
		sourceCodeContainer: 	a PanelMorph(47148800)
		shouldUpdateTitle: 	true
		contentSelection: 	a Text for ''
		acceptor: 	a ClassDefinitionAcceptor
		commentWidget: 	nil
		sourceTextWidget: 	a RubScrolledTextMorph(11911168)
		sourceCodeSelectionInterval: 	(1 to: 0)
		sourceTextModel: 	a RubScrolledTextModel
		methodClassifier: 	nil
		commentTextModel: 	a RubScrolledTextModel
		instanceButtonWidget: 	a PluggableToggleButtonMorph(477979136)
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageWidget
		packagePatternString: 	'MetaProg'
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(909398528)


NautilusUI>>selectedPackageWithoutChangingSelection:
	Receiver: a NautilusUI
	Arguments and temporary variables: 
		aSelection: 	a PackageTreePackageSelection
		class: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		announceur: 	nil
		model: 	a Nautilus
		window: 	a NautilusWindow(570220032)
		sourceCodePanel: 	a PanelMorph(645065472)
		fullDisplayedComment: 	false
		sourceCodeContainer: 	a PanelMorph(47148800)
		shouldUpdateTitle: 	true
		contentSelection: 	a Text for ''
		acceptor: 	a ClassDefinitionAcceptor
		commentWidget: 	nil
		sourceTextWidget: 	a RubScrolledTextMorph(11911168)
		sourceCodeSelectionInterval: 	(1 to: 0)
		sourceTextModel: 	a RubScrolledTextModel
		methodClassifier: 	nil
		commentTextModel: 	a RubScrolledTextModel
		instanceButtonWidget: 	a PluggableToggleButtonMorph(477979136)
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageWidget
		packagePatternString: 	'MetaProg'
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(909398528)


[ :each | self selectedPackageWithoutChangingSelection: each ] in NautilusUI>>selectedFromPackageGroupView:
	Receiver: a NautilusUI
	Arguments and temporary variables: 
		aNode: 	a MorphTreeMorphMultipleSelection
		selections: 	an OrderedCollection(a PackageTreePackageSelection)
		each: 	a PackageTreePackageSelection
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		announceur: 	nil
		model: 	a Nautilus
		window: 	a NautilusWindow(570220032)
		sourceCodePanel: 	a PanelMorph(645065472)
		fullDisplayedComment: 	false
		sourceCodeContainer: 	a PanelMorph(47148800)
		shouldUpdateTitle: 	true
		contentSelection: 	a Text for ''
		acceptor: 	a ClassDefinitionAcceptor
		commentWidget: 	nil
		sourceTextWidget: 	a RubScrolledTextMorph(11911168)
		sourceCodeSelectionInterval: 	(1 to: 0)
		sourceTextModel: 	a RubScrolledTextModel
		methodClassifier: 	nil
		commentTextModel: 	a RubScrolledTextModel
		instanceButtonWidget: 	a PluggableToggleButtonMorph(477979136)
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageWidget
		packagePatternString: 	'MetaProg'
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(909398528)


OrderedCollection>>do:
	Receiver: an OrderedCollection(a PackageTreePackageSelection)
	Arguments and temporary variables: 
		aBlock: 	[ :each | self selectedPackageWithoutChangingSelection: each ]
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a PackageTreePackageSelection)
		firstIndex: 	1
		lastIndex: 	1


NautilusUI>>selectedFromPackageGroupView:
	Receiver: a NautilusUI
	Arguments and temporary variables: 
		aNode: 	a MorphTreeMorphMultipleSelection
		selections: 	an OrderedCollection(a PackageTreePackageSelection)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		announceur: 	nil
		model: 	a Nautilus
		window: 	a NautilusWindow(570220032)
		sourceCodePanel: 	a PanelMorph(645065472)
		fullDisplayedComment: 	false
		sourceCodeContainer: 	a PanelMorph(47148800)
		shouldUpdateTitle: 	true
		contentSelection: 	a Text for ''
		acceptor: 	a ClassDefinitionAcceptor
		commentWidget: 	nil
		sourceTextWidget: 	a RubScrolledTextMorph(11911168)
		sourceCodeSelectionInterval: 	(1 to: 0)
		sourceTextModel: 	a RubScrolledTextModel
		methodClassifier: 	nil
		commentTextModel: 	a RubScrolledTextModel
		instanceButtonWidget: 	a PluggableToggleButtonMorph(477979136)
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageWidget
		packagePatternString: 	'MetaProg'
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(909398528)


[ :ann | self model selectedFromPackageGroupView: ann selection ] in PackageWidget>>buildPackagesList
	Receiver: a PackageWidget
	Arguments and temporary variables: 
		treeModel: 	nil
		ann: 	a MorphTreeSelectionChanged
	Receiver's instance variables: 
		dependents: 	nil
		announceur: 	nil
		model: 	a NautilusUI
		packagesList: 	a MorphTreeMorph(171685376)
		packagesSelection: 	a Dictionary(a RPackage(MetaProg)->true )
		groupsSelection: 	a Dictionary()


BlockClosure>>cull:
	Receiver: [ :ann | self model selectedFromPackageGroupView: ann selection ]
	Arguments and temporary variables: 
		anArg: 	a MorphTreeSelectionChanged
	Receiver's instance variables: 
		outerContext: 	PackageWidget>>buildPackagesList
		startpc: 	262
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [ :ann | self model selectedFromPackageGroupView: ann selection ]
	Arguments and temporary variables: 
		firstArg: 	a MorphTreeSelectionChanged
		secondArg: 	an Announcer
	Receiver's instance variables: 
		outerContext: 	PackageWidget>>buildPackagesList
		startpc: 	262
		numArgs: 	1


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphTreeSelectionChanged
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphTreeSelectionChanged
		subscriber: 	a PackageWidget
		action: 	[ :ann | self model selectedFromPackageGroupView: ann selection ]


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphTreeSelectionChanged
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphTreeSelectionChanged
		subscriber: 	a PackageWidget
		action: 	[ :ann | self model selectedFromPackageGroupView: ann selection ]


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphTreeSelectionChanged
		subs: 	an Array(an AnnouncementSubscription)
		startIndex: 	1
		index: 	1
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphTreeSelectionChanged
		subs: 	an Array(an AnnouncementSubscription)
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	1
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphTreeSelectionChanged
		subs: 	an Array(an AnnouncementSubscription)
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()



--- The full stack ---
BlockClosure(Object)>>doesNotUnderstand: #sendsSelector:
[ :cm | cm sendsSelector: #subclassResponsibility ] in Pile class(Behavior)>>hasAbstractMethods
[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in Array(Collection)>>anySatisfy:
Array(SequenceableCollection)>>do:
Array(Collection)>>anySatisfy:
Pile class(Behavior)>>hasAbstractMethods
Pile class(Class)>>hasAbstractMethods
ClassWidget>>buildTabbedNameOf:
ClassWidget>>classWrapper:
FTPluggableIconListMorphAdaptorDataSource>>elementWrapped:
FTPluggableIconListMorphAdaptorDataSource>>cellColumn:row:
FTTableContainerMorph>>updateExposedRows
FTPluggableIconListMorphAdaptor(FTTableMorph)>>resetPosition
FTPluggableIconListMorphAdaptor>>updateList
FTPluggableIconListMorphAdaptor>>update:
[ :aDependent | aDependent update: aParameter ] in ClassWidget(Model)>>changed:
DependentsArray>>do:
ClassWidget(Model)>>changed:
ClassWidget(AbstractWidget)>>update:
[ :aDependent | aDependent update: aParameter ] in NautilusUI(Model)>>changed:
DependentsArray>>do:
NautilusUI(Model)>>changed:
NautilusUI(AbstractNautilusUI)>>changed:
NautilusUI(AbstractNautilusUI)>>updateClassView
NautilusUI>>selectedPackageWithoutChangingSelection:
[ :each | self selectedPackageWithoutChangingSelection: each ] in NautilusUI>>selectedFromPackageGroupView:
OrderedCollection>>do:
NautilusUI>>selectedFromPackageGroupView:
[ :ann | self model selectedFromPackageGroupView: ann selection ] in PackageWidget>>buildPackagesList
BlockClosure>>cull:
BlockClosure>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
SubscriptionRegistry>>deliver:
Announcer>>announce:
PackageTreeModel(MorphTreeModel)>>requestView:
PackageTreeModel(MorphTreeModel)>>selectionChanged
MorphTreeListManager>>updateSelectionFromModel
MorphTreeMorph>>updateSelectionFromModel
MorphTreeMorph(Object)>>perform:withEnoughArguments:
MorphTreeChangeRequest>>change:
MorphTreeMorph>>changeRequest:
MessageSend>>value:
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
PackageTreeModel(MorphTreeModel)>>requestView:
PackageTreeModel(MorphTreeModel)>>selection:
[ | selHolder |
selHolder := self newSelectionHolderWithNodePath: path.
self listModel selection: selHolder ] in MorphTreeListManager>>mouseUp:on:
BlockClosure>>ensure:
MorphTreeListManager>>selectionUpdateFromViewWhile:
MorphTreeListManager>>mouseUp:on:
MorphTreeMorph>>mouseUp:
MorphTreeMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
MorphTreeMorph(Morph)>>handleEvent:
MorphTreeMorph(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of BlockClosure did not understand #sendsSelector:
28 September 2018 11:34:17.904296 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

BlockClosure(Object)>>doesNotUnderstand: #sendsSelector:
	Receiver: [  ]
	Arguments and temporary variables: 
		aMessage: 	sendsSelector: #subclassResponsibility
		exception: 	MessageNotUnderstood: BlockClosure>>sendsSelector:
		resumeValue: 	nil
	Receiver's instance variables: 
		outerContext: 	IDM>>idmPile
		startpc: 	130
		numArgs: 	0


[ :cm | cm sendsSelector: #subclassResponsibility ] in Pile class(Behavior)>>hasAbstractMethods
	Receiver: Pile
	Arguments and temporary variables: 
		cm: 	[  ]
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#capacity->Pile>>#capacity #do:->Pile>>#do: #gro...etc...
		format: 	65539
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{PileTypee. PileGrossissante}
		name: 	#Pile
		classPool: 	a Dictionary(#tailleDefaut->5 )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#MetaProg
		traitComposition: 	{}
		localSelectors: 	nil


[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in Array(Collection)>>anySatisfy:
	Receiver: an Array(Pile>>#size Pile>>#push: [  ] Pile>>#isFull Pile>>#do: Pile>>#initialize: Pile>>#...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :cm | cm sendsSelector: #subclassResponsibility ]
		each: 	[  ]
	Receiver's instance variables: 
an Array(Pile>>#size Pile>>#push: [  ] Pile>>#isFull Pile>>#do: Pile>>#initialize: Pile>>#...etc...

Array(SequenceableCollection)>>do:
	Receiver: an Array(Pile>>#size Pile>>#push: [  ] Pile>>#isFull Pile>>#do: Pile>>#initialize: Pile>>#...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ]
		index: 	3
	Receiver's instance variables: 
an Array(Pile>>#size Pile>>#push: [  ] Pile>>#isFull Pile>>#do: Pile>>#initialize: Pile>>#...etc...

Array(Collection)>>anySatisfy:
	Receiver: an Array(Pile>>#size Pile>>#push: [  ] Pile>>#isFull Pile>>#do: Pile>>#initialize: Pile>>#...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :cm | cm sendsSelector: #subclassResponsibility ]
	Receiver's instance variables: 
an Array(Pile>>#size Pile>>#push: [  ] Pile>>#isFull Pile>>#do: Pile>>#initialize: Pile>>#...etc...

Pile class(Behavior)>>hasAbstractMethods
	Receiver: Pile
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#capacity->Pile>>#capacity #do:->Pile>>#do: #gro...etc...
		format: 	65539
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{PileTypee. PileGrossissante}
		name: 	#Pile
		classPool: 	a Dictionary(#tailleDefaut->5 )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#MetaProg
		traitComposition: 	{}
		localSelectors: 	nil


Pile class(Class)>>hasAbstractMethods
	Receiver: Pile
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#capacity->Pile>>#capacity #do:->Pile>>#do: #gro...etc...
		format: 	65539
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{PileTypee. PileGrossissante}
		name: 	#Pile
		classPool: 	a Dictionary(#tailleDefaut->5 )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#MetaProg
		traitComposition: 	{}
		localSelectors: 	nil


ClassWidget>>buildTabbedNameOf:
	Receiver: a ClassWidget
	Arguments and temporary variables: 
		anElement: 	Pile
		tab: 	'   '
		size: 	0
		stringMorph: 	a StringMorph(412418048)#Pile
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a FTPluggableIconListMorphAdaptor(943741440))
		announceur: 	nil
		model: 	a NautilusUI
		classesList: 	a FTPluggableIconListMorphAdaptor(943741440)
		classesSelection: 	a Dictionary()
		classesListElements: 	an OrderedCollection(IDM Pile PileGrossissante PileTypee T...etc...
		cachedHierarchy: 	a SortHierarchically
		showHierarchy: 	false


ClassWidget>>classWrapper:
	Receiver: a ClassWidget
	Arguments and temporary variables: 
		anElement: 	Pile
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a FTPluggableIconListMorphAdaptor(943741440))
		announceur: 	nil
		model: 	a NautilusUI
		classesList: 	a FTPluggableIconListMorphAdaptor(943741440)
		classesSelection: 	a Dictionary()
		classesListElements: 	an OrderedCollection(IDM Pile PileGrossissante PileTypee T...etc...
		cachedHierarchy: 	a SortHierarchically
		showHierarchy: 	false


FTPluggableIconListMorphAdaptorDataSource>>elementWrapped:
	Receiver: a FTPluggableIconListMorphAdaptorDataSource
	Arguments and temporary variables: 
		object: 	Pile
		selector: 	#classWrapper:
	Receiver's instance variables: 
		table: 	a FTPluggableIconListMorphAdaptor(943741440)
		model: 	a ClassWidget
		getListSelector: 	nil
		getListElementSelector: 	#getClassItem:
		wrapSelector: 	#classWrapper:
		getIconSelector: 	#classIconFor:
		getListSizeSelector: 	#classListSize
		getMenuSelector: 	#classesMenu:shifted:
		dropItemSelector: 	#dropInClass:inARow:
		wantsDropSelector: 	nil


FTPluggableIconListMorphAdaptorDataSource>>cellColumn:row:
	Receiver: a FTPluggableIconListMorphAdaptorDataSource
	Arguments and temporary variables: 
		column: 	a FTColumn
		rowIndex: 	2
		object: 	Pile
		text: 	nil
		icon: 	Form(16x16x32)
	Receiver's instance variables: 
		table: 	a FTPluggableIconListMorphAdaptor(943741440)
		model: 	a ClassWidget
		getListSelector: 	nil
		getListElementSelector: 	#getClassItem:
		wrapSelector: 	#classWrapper:
		getIconSelector: 	#classIconFor:
		getListSizeSelector: 	#classListSize
		getMenuSelector: 	#classesMenu:shifted:
		dropItemSelector: 	#dropInClass:inARow:
		wantsDropSelector: 	nil


FTTableContainerMorph>>updateExposedRows
	Receiver: a FTTableContainerMorph(402605312)
	Arguments and temporary variables: 
		visibleRows: 	11
		numberOfColumns: 	1
		columns: 	an Array(a FTColumn)
		columnWidths: 	#(230.0)
		startIndex: 	1
		rowIndex: 	2
		row: 	a FTTableRowMorph(510154496)
		columnIndex: 	1
		cell: 	nil
	Receiver's instance variables: 
		bounds: 	(195.0@466.0) corner: (425.0@687.0)
		owner: 	a FTPluggableIconListMorphAdaptor(943741440)
		submorphs: 	an Array(a FTTableRowMorph(341107456) a FTTableRowMorph(288910336) a...etc...
		fullBounds: 	(195@466) corner: (425@687)
		color: 	Color transparent
		extension: 	a MorphExtension (258446848) [other:  (kmDispatcher -> a KMDispatche...etc...
		needsRefreshExposedRows: 	true
		headerRow: 	nil
		exposedRows: 	a SmallDictionary(1->a FTTableRowMorph(433991936))


FTPluggableIconListMorphAdaptor(FTTableMorph)>>resetPosition
	Receiver: a FTPluggableIconListMorphAdaptor(943741440)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(195.0@466.0) corner: (425.0@687.0)
		owner: 	a PanelMorph(151115776)
		submorphs: 	an Array(a FTTableContainerMorph(402605312))
		fullBounds: 	(195@466) corner: (425@687)
		color: 	(Color r: 0.13 g: 0.13 b: 0.13 alpha: 1.0)
		extension: 	a MorphExtension (177215744) [other:  (announcer -> an Announcer) (k...etc...
		container: 	a FTTableContainerMorph(402605312)
		verticalScrollBar: 	a ScrollBar(208145664)
		selectionColor: 	nil
		showIndex: 	1
		dataSource: 	a FTPluggableIconListMorphAdaptorDataSource
		intercellSpacing: 	nil
		rowHeight: 	20.333333333333336
		selectedRowIndexes: 	#()
		highlightedRowIndexes: 	#()
		selectionStrategy: 	a FTMultipleSelection
		columns: 	an Array(a FTColumn)
		secondarySelectionColor: 	nil
		headerColor: 	nil
		showColumnHeaders: 	false
		allowsDeselection: 	true
		needToggleAtMouseUp: 	false
		function: 	a FTSearchFunction
		resizable: 	false
		setSelectionListSelector: 	#classSelectionAt:put:
		getSelectionListSelector: 	#classSelectionAt:
		setIndexSelector: 	#selectedClassIndex:
		getIndexSelector: 	#selectedClassIndex
		keystrokeSelector: 	#keyPressedOnList:shifted:
		resetListSelector: 	#resetClassSelection
		doubleClickSelector: 	#doubleClick:
		keystrokeActionSelector: 	nil


FTPluggableIconListMorphAdaptor>>updateList
	Receiver: a FTPluggableIconListMorphAdaptor(943741440)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(195.0@466.0) corner: (425.0@687.0)
		owner: 	a PanelMorph(151115776)
		submorphs: 	an Array(a FTTableContainerMorph(402605312))
		fullBounds: 	(195@466) corner: (425@687)
		color: 	(Color r: 0.13 g: 0.13 b: 0.13 alpha: 1.0)
		extension: 	a MorphExtension (177215744) [other:  (announcer -> an Announcer) (k...etc...
		container: 	a FTTableContainerMorph(402605312)
		verticalScrollBar: 	a ScrollBar(208145664)
		selectionColor: 	nil
		showIndex: 	1
		dataSource: 	a FTPluggableIconListMorphAdaptorDataSource
		intercellSpacing: 	nil
		rowHeight: 	20.333333333333336
		selectedRowIndexes: 	#()
		highlightedRowIndexes: 	#()
		selectionStrategy: 	a FTMultipleSelection
		columns: 	an Array(a FTColumn)
		secondarySelectionColor: 	nil
		headerColor: 	nil
		showColumnHeaders: 	false
		allowsDeselection: 	true
		needToggleAtMouseUp: 	false
		function: 	a FTSearchFunction
		resizable: 	false
		setSelectionListSelector: 	#classSelectionAt:put:
		getSelectionListSelector: 	#classSelectionAt:
		setIndexSelector: 	#selectedClassIndex:
		getIndexSelector: 	#selectedClassIndex
		keystrokeSelector: 	#keyPressedOnList:shifted:
		resetListSelector: 	#resetClassSelection
		doubleClickSelector: 	#doubleClick:
		keystrokeActionSelector: 	nil


FTPluggableIconListMorphAdaptor>>update:
	Receiver: a FTPluggableIconListMorphAdaptor(943741440)
	Arguments and temporary variables: 
		symbol: 	#getClassItem:
	Receiver's instance variables: 
		bounds: 	(195.0@466.0) corner: (425.0@687.0)
		owner: 	a PanelMorph(151115776)
		submorphs: 	an Array(a FTTableContainerMorph(402605312))
		fullBounds: 	(195@466) corner: (425@687)
		color: 	(Color r: 0.13 g: 0.13 b: 0.13 alpha: 1.0)
		extension: 	a MorphExtension (177215744) [other:  (announcer -> an Announcer) (k...etc...
		container: 	a FTTableContainerMorph(402605312)
		verticalScrollBar: 	a ScrollBar(208145664)
		selectionColor: 	nil
		showIndex: 	1
		dataSource: 	a FTPluggableIconListMorphAdaptorDataSource
		intercellSpacing: 	nil
		rowHeight: 	20.333333333333336
		selectedRowIndexes: 	#()
		highlightedRowIndexes: 	#()
		selectionStrategy: 	a FTMultipleSelection
		columns: 	an Array(a FTColumn)
		secondarySelectionColor: 	nil
		headerColor: 	nil
		showColumnHeaders: 	false
		allowsDeselection: 	true
		needToggleAtMouseUp: 	false
		function: 	a FTSearchFunction
		resizable: 	false
		setSelectionListSelector: 	#classSelectionAt:put:
		getSelectionListSelector: 	#classSelectionAt:
		setIndexSelector: 	#selectedClassIndex:
		getIndexSelector: 	#selectedClassIndex
		keystrokeSelector: 	#keyPressedOnList:shifted:
		resetListSelector: 	#resetClassSelection
		doubleClickSelector: 	#doubleClick:
		keystrokeActionSelector: 	nil


[ :aDependent | aDependent update: aParameter ] in ClassWidget(Model)>>changed:
	Receiver: a ClassWidget
	Arguments and temporary variables: 
		aParameter: 	#getClassItem:
		aDependent: 	a FTPluggableIconListMorphAdaptor(943741440)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a FTPluggableIconListMorphAdaptor(943741440))
		announceur: 	nil
		model: 	a NautilusUI
		classesList: 	a FTPluggableIconListMorphAdaptor(943741440)
		classesSelection: 	a Dictionary()
		classesListElements: 	an OrderedCollection(IDM Pile PileGrossissante PileTypee T...etc...
		cachedHierarchy: 	a SortHierarchically
		showHierarchy: 	false


DependentsArray>>do:
	Receiver: a DependentsArray(a FTPluggableIconListMorphAdaptor(943741440))
	Arguments and temporary variables: 
		aBlock: 	[ :aDependent | aDependent update: aParameter ]
		dep: 	a FTPluggableIconListMorphAdaptor(943741440)
		i: 	1
	Receiver's instance variables: 
a DependentsArray(a FTPluggableIconListMorphAdaptor(943741440))

ClassWidget(Model)>>changed:
	Receiver: a ClassWidget
	Arguments and temporary variables: 
		aParameter: 	#getClassItem:
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a FTPluggableIconListMorphAdaptor(943741440))
		announceur: 	nil
		model: 	a NautilusUI
		classesList: 	a FTPluggableIconListMorphAdaptor(943741440)
		classesSelection: 	a Dictionary()
		classesListElements: 	an OrderedCollection(IDM Pile PileGrossissante PileTypee T...etc...
		cachedHierarchy: 	a SortHierarchically
		showHierarchy: 	false


ClassWidget(AbstractWidget)>>update:
	Receiver: a ClassWidget
	Arguments and temporary variables: 
		aSymbol: 	#getClassItem:
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a FTPluggableIconListMorphAdaptor(943741440))
		announceur: 	nil
		model: 	a NautilusUI
		classesList: 	a FTPluggableIconListMorphAdaptor(943741440)
		classesSelection: 	a Dictionary()
		classesListElements: 	an OrderedCollection(IDM Pile PileGrossissante PileTypee T...etc...
		cachedHierarchy: 	a SortHierarchically
		showHierarchy: 	false


[ :aDependent | aDependent update: aParameter ] in NautilusUI(Model)>>changed:
	Receiver: a NautilusUI
	Arguments and temporary variables: 
		aParameter: 	#getClassItem:
		aDependent: 	a ClassWidget
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		announceur: 	nil
		model: 	a Nautilus
		window: 	a NautilusWindow(901653248)
		sourceCodePanel: 	a PanelMorph(558378496)
		fullDisplayedComment: 	false
		sourceCodeContainer: 	a PanelMorph(166798336)
		shouldUpdateTitle: 	true
		contentSelection: 	a Text for ''
		acceptor: 	a ClassDefinitionAcceptor
		commentWidget: 	a RubScrolledTextMorph(597394432)
		sourceTextWidget: 	a RubScrolledTextMorph(954945792)
		sourceCodeSelectionInterval: 	(1 to: 0)
		sourceTextModel: 	a RubScrolledTextModel
		methodClassifier: 	nil
		commentTextModel: 	a RubScrolledTextModel
		instanceButtonWidget: 	a PluggableToggleButtonMorph(452645888)
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageWidget
		packagePatternString: 	'MetaProg'
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(367625472)


DependentsArray>>do:
	Receiver: a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a PackageWidget a Nautilus...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :aDependent | aDependent update: aParameter ]
		dep: 	a ClassWidget
		i: 	3
	Receiver's instance variables: 
a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a PackageWidget a Nautilus...etc...

NautilusUI(Model)>>changed:
	Receiver: a NautilusUI
	Arguments and temporary variables: 
		aParameter: 	#getClassItem:
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		announceur: 	nil
		model: 	a Nautilus
		window: 	a NautilusWindow(901653248)
		sourceCodePanel: 	a PanelMorph(558378496)
		fullDisplayedComment: 	false
		sourceCodeContainer: 	a PanelMorph(166798336)
		shouldUpdateTitle: 	true
		contentSelection: 	a Text for ''
		acceptor: 	a ClassDefinitionAcceptor
		commentWidget: 	a RubScrolledTextMorph(597394432)
		sourceTextWidget: 	a RubScrolledTextMorph(954945792)
		sourceCodeSelectionInterval: 	(1 to: 0)
		sourceTextModel: 	a RubScrolledTextModel
		methodClassifier: 	nil
		commentTextModel: 	a RubScrolledTextModel
		instanceButtonWidget: 	a PluggableToggleButtonMorph(452645888)
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageWidget
		packagePatternString: 	'MetaProg'
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(367625472)


NautilusUI(AbstractNautilusUI)>>changed:
	Receiver: a NautilusUI
	Arguments and temporary variables: 
		aSymbol: 	#getClassItem:
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		announceur: 	nil
		model: 	a Nautilus
		window: 	a NautilusWindow(901653248)
		sourceCodePanel: 	a PanelMorph(558378496)
		fullDisplayedComment: 	false
		sourceCodeContainer: 	a PanelMorph(166798336)
		shouldUpdateTitle: 	true
		contentSelection: 	a Text for ''
		acceptor: 	a ClassDefinitionAcceptor
		commentWidget: 	a RubScrolledTextMorph(597394432)
		sourceTextWidget: 	a RubScrolledTextMorph(954945792)
		sourceCodeSelectionInterval: 	(1 to: 0)
		sourceTextModel: 	a RubScrolledTextModel
		methodClassifier: 	nil
		commentTextModel: 	a RubScrolledTextModel
		instanceButtonWidget: 	a PluggableToggleButtonMorph(452645888)
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageWidget
		packagePatternString: 	'MetaProg'
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(367625472)


NautilusUI(AbstractNautilusUI)>>updateClassView
	Receiver: a NautilusUI
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		announceur: 	nil
		model: 	a Nautilus
		window: 	a NautilusWindow(901653248)
		sourceCodePanel: 	a PanelMorph(558378496)
		fullDisplayedComment: 	false
		sourceCodeContainer: 	a PanelMorph(166798336)
		shouldUpdateTitle: 	true
		contentSelection: 	a Text for ''
		acceptor: 	a ClassDefinitionAcceptor
		commentWidget: 	a RubScrolledTextMorph(597394432)
		sourceTextWidget: 	a RubScrolledTextMorph(954945792)
		sourceCodeSelectionInterval: 	(1 to: 0)
		sourceTextModel: 	a RubScrolledTextModel
		methodClassifier: 	nil
		commentTextModel: 	a RubScrolledTextModel
		instanceButtonWidget: 	a PluggableToggleButtonMorph(452645888)
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageWidget
		packagePatternString: 	'MetaProg'
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(367625472)


NautilusUI>>selectedPackageWithoutChangingSelection:
	Receiver: a NautilusUI
	Arguments and temporary variables: 
		aSelection: 	a PackageTreePackageSelection
		class: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		announceur: 	nil
		model: 	a Nautilus
		window: 	a NautilusWindow(901653248)
		sourceCodePanel: 	a PanelMorph(558378496)
		fullDisplayedComment: 	false
		sourceCodeContainer: 	a PanelMorph(166798336)
		shouldUpdateTitle: 	true
		contentSelection: 	a Text for ''
		acceptor: 	a ClassDefinitionAcceptor
		commentWidget: 	a RubScrolledTextMorph(597394432)
		sourceTextWidget: 	a RubScrolledTextMorph(954945792)
		sourceCodeSelectionInterval: 	(1 to: 0)
		sourceTextModel: 	a RubScrolledTextModel
		methodClassifier: 	nil
		commentTextModel: 	a RubScrolledTextModel
		instanceButtonWidget: 	a PluggableToggleButtonMorph(452645888)
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageWidget
		packagePatternString: 	'MetaProg'
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(367625472)


[ :each | self selectedPackageWithoutChangingSelection: each ] in NautilusUI>>selectedFromPackageGroupView:
	Receiver: a NautilusUI
	Arguments and temporary variables: 
		aNode: 	a MorphTreeMorphMultipleSelection
		selections: 	an OrderedCollection(a PackageTreePackageSelection)
		each: 	a PackageTreePackageSelection
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		announceur: 	nil
		model: 	a Nautilus
		window: 	a NautilusWindow(901653248)
		sourceCodePanel: 	a PanelMorph(558378496)
		fullDisplayedComment: 	false
		sourceCodeContainer: 	a PanelMorph(166798336)
		shouldUpdateTitle: 	true
		contentSelection: 	a Text for ''
		acceptor: 	a ClassDefinitionAcceptor
		commentWidget: 	a RubScrolledTextMorph(597394432)
		sourceTextWidget: 	a RubScrolledTextMorph(954945792)
		sourceCodeSelectionInterval: 	(1 to: 0)
		sourceTextModel: 	a RubScrolledTextModel
		methodClassifier: 	nil
		commentTextModel: 	a RubScrolledTextModel
		instanceButtonWidget: 	a PluggableToggleButtonMorph(452645888)
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageWidget
		packagePatternString: 	'MetaProg'
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(367625472)


OrderedCollection>>do:
	Receiver: an OrderedCollection(a PackageTreePackageSelection)
	Arguments and temporary variables: 
		aBlock: 	[ :each | self selectedPackageWithoutChangingSelection: each ]
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a PackageTreePackageSelection)
		firstIndex: 	1
		lastIndex: 	1


NautilusUI>>selectedFromPackageGroupView:
	Receiver: a NautilusUI
	Arguments and temporary variables: 
		aNode: 	a MorphTreeMorphMultipleSelection
		selections: 	an OrderedCollection(a PackageTreePackageSelection)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		announceur: 	nil
		model: 	a Nautilus
		window: 	a NautilusWindow(901653248)
		sourceCodePanel: 	a PanelMorph(558378496)
		fullDisplayedComment: 	false
		sourceCodeContainer: 	a PanelMorph(166798336)
		shouldUpdateTitle: 	true
		contentSelection: 	a Text for ''
		acceptor: 	a ClassDefinitionAcceptor
		commentWidget: 	a RubScrolledTextMorph(597394432)
		sourceTextWidget: 	a RubScrolledTextMorph(954945792)
		sourceCodeSelectionInterval: 	(1 to: 0)
		sourceTextModel: 	a RubScrolledTextModel
		methodClassifier: 	nil
		commentTextModel: 	a RubScrolledTextModel
		instanceButtonWidget: 	a PluggableToggleButtonMorph(452645888)
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageWidget
		packagePatternString: 	'MetaProg'
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(367625472)


[ :ann | self model selectedFromPackageGroupView: ann selection ] in PackageWidget>>buildPackagesList
	Receiver: a PackageWidget
	Arguments and temporary variables: 
		treeModel: 	nil
		ann: 	a MorphTreeSelectionChanged
	Receiver's instance variables: 
		dependents: 	nil
		announceur: 	nil
		model: 	a NautilusUI
		packagesList: 	a MorphTreeMorph(559059968)
		packagesSelection: 	a Dictionary(a RPackage(MetaProg)->true )
		groupsSelection: 	a Dictionary()


BlockClosure>>cull:
	Receiver: [ :ann | self model selectedFromPackageGroupView: ann selection ]
	Arguments and temporary variables: 
		anArg: 	a MorphTreeSelectionChanged
	Receiver's instance variables: 
		outerContext: 	PackageWidget>>buildPackagesList
		startpc: 	262
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [ :ann | self model selectedFromPackageGroupView: ann selection ]
	Arguments and temporary variables: 
		firstArg: 	a MorphTreeSelectionChanged
		secondArg: 	an Announcer
	Receiver's instance variables: 
		outerContext: 	PackageWidget>>buildPackagesList
		startpc: 	262
		numArgs: 	1


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphTreeSelectionChanged
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphTreeSelectionChanged
		subscriber: 	a PackageWidget
		action: 	[ :ann | self model selectedFromPackageGroupView: ann selection ]


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphTreeSelectionChanged
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphTreeSelectionChanged
		subscriber: 	a PackageWidget
		action: 	[ :ann | self model selectedFromPackageGroupView: ann selection ]


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphTreeSelectionChanged
		subs: 	an Array(an AnnouncementSubscription)
		startIndex: 	1
		index: 	1
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphTreeSelectionChanged
		subs: 	an Array(an AnnouncementSubscription)
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	1
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphTreeSelectionChanged
		subs: 	an Array(an AnnouncementSubscription)
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()



--- The full stack ---
BlockClosure(Object)>>doesNotUnderstand: #sendsSelector:
[ :cm | cm sendsSelector: #subclassResponsibility ] in Pile class(Behavior)>>hasAbstractMethods
[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in Array(Collection)>>anySatisfy:
Array(SequenceableCollection)>>do:
Array(Collection)>>anySatisfy:
Pile class(Behavior)>>hasAbstractMethods
Pile class(Class)>>hasAbstractMethods
ClassWidget>>buildTabbedNameOf:
ClassWidget>>classWrapper:
FTPluggableIconListMorphAdaptorDataSource>>elementWrapped:
FTPluggableIconListMorphAdaptorDataSource>>cellColumn:row:
FTTableContainerMorph>>updateExposedRows
FTPluggableIconListMorphAdaptor(FTTableMorph)>>resetPosition
FTPluggableIconListMorphAdaptor>>updateList
FTPluggableIconListMorphAdaptor>>update:
[ :aDependent | aDependent update: aParameter ] in ClassWidget(Model)>>changed:
DependentsArray>>do:
ClassWidget(Model)>>changed:
ClassWidget(AbstractWidget)>>update:
[ :aDependent | aDependent update: aParameter ] in NautilusUI(Model)>>changed:
DependentsArray>>do:
NautilusUI(Model)>>changed:
NautilusUI(AbstractNautilusUI)>>changed:
NautilusUI(AbstractNautilusUI)>>updateClassView
NautilusUI>>selectedPackageWithoutChangingSelection:
[ :each | self selectedPackageWithoutChangingSelection: each ] in NautilusUI>>selectedFromPackageGroupView:
OrderedCollection>>do:
NautilusUI>>selectedFromPackageGroupView:
[ :ann | self model selectedFromPackageGroupView: ann selection ] in PackageWidget>>buildPackagesList
BlockClosure>>cull:
BlockClosure>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
SubscriptionRegistry>>deliver:
Announcer>>announce:
PackageTreeModel(MorphTreeModel)>>requestView:
PackageTreeModel(MorphTreeModel)>>selectionChanged
MorphTreeListManager>>updateSelectionFromModel
MorphTreeMorph>>updateSelectionFromModel
MorphTreeMorph(Object)>>perform:withEnoughArguments:
MorphTreeChangeRequest>>change:
MorphTreeMorph>>changeRequest:
MessageSend>>value:
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
PackageTreeModel(MorphTreeModel)>>requestView:
PackageTreeModel(MorphTreeModel)>>selection:
[ | selHolder |
selHolder := self newSelectionHolderWithNodePath: path.
self listModel selection: selHolder ] in MorphTreeListManager>>mouseUp:on:
BlockClosure>>ensure:
MorphTreeListManager>>selectionUpdateFromViewWhile:
MorphTreeListManager>>mouseUp:on:
MorphTreeMorph>>mouseUp:
MorphTreeMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
MorphTreeMorph(Morph)>>handleEvent:
MorphTreeMorph(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

28 September 2018 11:35:08.580454 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a GLMRubricSmalltalkTextModel
		menuMorph: 	nil
		editor: 	a RubSmalltalkEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $]->$[ $}->${ )
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a GLMRubricSmalltalkTextModel
		menuMorph: 	nil
		editor: 	a RubSmalltalkEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $]->$[ $}->${ )
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	1
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	1
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(1049222656)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@31)
		owner: 	a TransformWithLayoutMorph(225623808)
		submorphs: 	an Array(a RubPrimarySelectionMorph(298558208) a RubCursor(919034624...etc...
		fullBounds: 	(0@0) corner: (580@31)
		color: 	Color transparent
		extension: 	a MorphExtension (441745152) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(680994048)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(919034624)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	(37@32)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(1049222656)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@31)
		owner: 	a TransformWithLayoutMorph(225623808)
		submorphs: 	an Array(a RubPrimarySelectionMorph(298558208) a RubCursor(919034624...etc...
		fullBounds: 	(0@0) corner: (580@31)
		color: 	Color transparent
		extension: 	a MorphExtension (441745152) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(680994048)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(919034624)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	(37@32)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(1049222656)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@31)
		owner: 	a TransformWithLayoutMorph(225623808)
		submorphs: 	an Array(a RubPrimarySelectionMorph(298558208) a RubCursor(919034624...etc...
		fullBounds: 	(0@0) corner: (580@31)
		color: 	Color transparent
		extension: 	a MorphExtension (441745152) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(680994048)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(919034624)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	(37@32)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(1049222656)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@31)
		owner: 	a TransformWithLayoutMorph(225623808)
		submorphs: 	an Array(a RubPrimarySelectionMorph(298558208) a RubCursor(919034624...etc...
		fullBounds: 	(0@0) corner: (580@31)
		color: 	Color transparent
		extension: 	a MorphExtension (441745152) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(680994048)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(919034624)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	(37@32)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(1049222656)
	Receiver's instance variables: 
		bounds: 	(211@101) corner: (227@117)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (1002097664)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(211@101) mouseOver 50709 nil]
		targetOffset: 	(25.0@17.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 50709 211 101 0 0 0 1)
		lastKeyScanCode: 	51
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(211@101) corner: (227@117)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (1002097664)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(211@101) mouseOver 50709 nil]
		targetOffset: 	(25.0@17.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 50709 211 101 0 0 0 1)
		lastKeyScanCode: 	51
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1848@962)
		hand: 	a HandMorph(58125568)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1848@962)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) an ImageMorph(342771456))
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (303216896) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1848@962)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	49022
		lastStepMessage: 	nil
		lastCycleTime: 	50711
		alarms: 	a Heap()
		lastAlarmTime: 	50711
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>viewBox:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1848@962)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1848@962)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) an ImageMorph(342771456))
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (303216896) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1848@962)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) an ImageMorph(342771456))
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (303216896) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	true
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	true
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	true
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2018-09-28T11:35:08.280896+02:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2018-09-28T11:35:08.280896+02:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2018-09-28T11:35:08.280896+02:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	49
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2018-09-28T11:35:08.280896+02:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	true
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2018-09-28T11:35:08.280896+02:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	true
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2018-09-28T11:35:08.280896+02:00


SessionManager>>snapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	true
		isImageStarting: 	true
		snapshotResult: 	true
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>snapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ ^ SessionManager default snapshot: save andQuit: quit ] in SmalltalkImage>>snapshot:andQuit:
CurrentExecutionEnvironment class>>activate:for:
DefaultExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment class>>beActiveDuring:
SmalltalkImage>>snapshot:andQuit:
WorldState class>>quitSession
WorldMorph(PasteUpMorph)>>windowEvent:
WorldMorph(Morph)>>handleWindowEvent:
WindowEvent>>sentTo:
WorldMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchWindowEvent:with:
MorphicEventDispatcher>>handleWindowEvent:
WindowEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
WorldMorph(Morph)>>processEvent:using:
WorldMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendEvent:focus:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
#idmPile was sent to nil
28 September 2018 11:44:55.083985 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

UndefinedObject(Object)>>doesNotUnderstand: #idmPile
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	idmPile
		exception: 	MessageNotUnderstood: receiver of "idmPile" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	a ReadStream
		itsSelection: 	a Text for ''
		itsSelectionString: 	''
	Receiver's instance variables: 
		ast: 	DoIt
	^ i idmPile
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(801021696)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(801021696)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(503682304)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(801021696)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@50)
		owner: 	a TransformWithLayoutMorph(200151040)
		submorphs: 	an Array(a RubPrimarySelectionMorph(429549824) a RubCursor(680567040...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (795827712) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(982094336)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(680567040)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(951153664))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(79.0@136.0)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(503682304)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1848@962)
		canvas: 	a FormCanvas on: DisplayScreen(1848x962x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(81252096))(a SearchMorph...etc...
		lastStepTime: 	587236
		lastStepMessage: 	nil
		lastCycleTime: 	587257
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(680567040)))
		lastAlarmTime: 	587236
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1848@962)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(763588864) a Na...etc...
		fullBounds: 	(0@0) corner: (1848@962)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (303216896) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1848@962)
		canvas: 	a FormCanvas on: DisplayScreen(1848x962x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(81252096))(a SearchMorph...etc...
		lastStepTime: 	587236
		lastStepMessage: 	nil
		lastCycleTime: 	587257
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(680567040)))
		lastAlarmTime: 	587236
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1848@962)
		canvas: 	a FormCanvas on: DisplayScreen(1848x962x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(81252096))(a SearchMorph...etc...
		lastStepTime: 	587236
		lastStepMessage: 	nil
		lastCycleTime: 	587257
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(680567040)))
		lastAlarmTime: 	587236
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1848@962)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(763588864) a Na...etc...
		fullBounds: 	(0@0) corner: (1848@962)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (303216896) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #idmPile
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
#idmPile was sent to nil
28 September 2018 11:45:56.209916 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

UndefinedObject(Object)>>doesNotUnderstand: #idmPile
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	idmPile
		exception: 	MessageNotUnderstood: receiver of "idmPile" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	a ReadStream
		itsSelection: 	a Text for ''
		itsSelectionString: 	''
	Receiver's instance variables: 
		ast: 	DoIt
	^ i idmPile
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(801021696)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(801021696)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(503682304)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(801021696)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@50)
		owner: 	a TransformWithLayoutMorph(200151040)
		submorphs: 	an Array(a RubPrimarySelectionMorph(429549824) a RubCursor(680567040...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (795827712) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(982094336)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(680567040)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(971457792))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(151.0@57.0)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(503682304)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1848@962)
		canvas: 	a FormCanvas on: DisplayScreen(1848x962x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(758458112))(a DropList...etc...
		lastStepTime: 	648379
		lastStepMessage: 	nil
		lastCycleTime: 	648400
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(680567040)))
		lastAlarmTime: 	648379
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1848@962)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(763588864) a Na...etc...
		fullBounds: 	(0@0) corner: (1848@962)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (303216896) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1848@962)
		canvas: 	a FormCanvas on: DisplayScreen(1848x962x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(758458112))(a DropList...etc...
		lastStepTime: 	648379
		lastStepMessage: 	nil
		lastCycleTime: 	648400
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(680567040)))
		lastAlarmTime: 	648379
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1848@962)
		canvas: 	a FormCanvas on: DisplayScreen(1848x962x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(758458112))(a DropList...etc...
		lastStepTime: 	648379
		lastStepMessage: 	nil
		lastCycleTime: 	648400
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(680567040)))
		lastAlarmTime: 	648379
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1848@962)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(763588864) a Na...etc...
		fullBounds: 	(0@0) corner: (1848@962)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (303216896) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #idmPile
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
#idmPile was sent to nil
28 September 2018 11:46:01.172595 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

UndefinedObject(Object)>>doesNotUnderstand: #idmPile
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	idmPile
		exception: 	MessageNotUnderstood: receiver of "idmPile" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	a ReadStream
		itsSelection: 	a Text for ''
		itsSelectionString: 	''
	Receiver's instance variables: 
		ast: 	DoIt
	^ i idmPile
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(801021696)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(801021696)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(503682304)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(801021696)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@50)
		owner: 	a TransformWithLayoutMorph(200151040)
		submorphs: 	an Array(a RubPrimarySelectionMorph(429549824) a RubCursor(680567040...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (795827712) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(982094336)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(680567040)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(1045555712))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(503682304)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1848@962)
		canvas: 	a FormCanvas on: DisplayScreen(1848x962x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(81252096))(a SearchMorph...etc...
		lastStepTime: 	653343
		lastStepMessage: 	nil
		lastCycleTime: 	653365
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(680567040)))
		lastAlarmTime: 	653343
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1848@962)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(763588864) a Na...etc...
		fullBounds: 	(0@0) corner: (1848@962)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (303216896) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1848@962)
		canvas: 	a FormCanvas on: DisplayScreen(1848x962x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(81252096))(a SearchMorph...etc...
		lastStepTime: 	653343
		lastStepMessage: 	nil
		lastCycleTime: 	653365
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(680567040)))
		lastAlarmTime: 	653343
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1848@962)
		canvas: 	a FormCanvas on: DisplayScreen(1848x962x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(81252096))(a SearchMorph...etc...
		lastStepTime: 	653343
		lastStepMessage: 	nil
		lastCycleTime: 	653365
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(680567040)))
		lastAlarmTime: 	653343
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1848@962)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(763588864) a Na...etc...
		fullBounds: 	(0@0) corner: (1848@962)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (303216896) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #idmPile
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
#idmPile was sent to nil
28 September 2018 11:46:57.799441 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

UndefinedObject(Object)>>doesNotUnderstand: #idmPile
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	idmPile
		exception: 	MessageNotUnderstood: receiver of "idmPile" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	a ReadStream
		itsSelection: 	a Text for ''
		itsSelectionString: 	''
	Receiver's instance variables: 
		ast: 	DoIt
	^ i idmPile
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(801021696)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(801021696)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(503682304)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(801021696)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@50)
		owner: 	a TransformWithLayoutMorph(200151040)
		submorphs: 	an Array(a RubPrimarySelectionMorph(429549824) a RubCursor(680567040...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (795827712) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(982094336)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(680567040)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(922795776))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(503682304)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1848@962)
		canvas: 	a FormCanvas on: DisplayScreen(1848x962x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(758458112))(a DropList...etc...
		lastStepTime: 	709947
		lastStepMessage: 	nil
		lastCycleTime: 	709969
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(680567040)))
		lastAlarmTime: 	709947
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1848@962)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(763588864) a Na...etc...
		fullBounds: 	(0@0) corner: (1848@962)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (303216896) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1848@962)
		canvas: 	a FormCanvas on: DisplayScreen(1848x962x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(758458112))(a DropList...etc...
		lastStepTime: 	709947
		lastStepMessage: 	nil
		lastCycleTime: 	709969
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(680567040)))
		lastAlarmTime: 	709947
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1848@962)
		canvas: 	a FormCanvas on: DisplayScreen(1848x962x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(758458112))(a DropList...etc...
		lastStepTime: 	709947
		lastStepMessage: 	nil
		lastCycleTime: 	709969
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(680567040)))
		lastAlarmTime: 	709947
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1848@962)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(763588864) a Na...etc...
		fullBounds: 	(0@0) corner: (1848@962)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (303216896) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #idmPile
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
KeyNotFound: key #PileGrossissante not found in SystemDictionary
28 September 2018 11:55:19.099845 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

SystemDictionary(Dictionary)>>errorKeyNotFound:
	Receiver: a SystemDictionary(lots of globals)
	Arguments and temporary variables: 
		aKey: 	#PileGrossissante
	Receiver's instance variables: 
		tally: 	6620
		array: 	an Array(#UTF8InvalidText->UTF8InvalidText #GTSpotterDebuggingExceptionH...etc...
		cachedClassNames: 	nil
		cachedNonClassNames: 	nil


[ self errorKeyNotFound: key ] in SystemDictionary(Dictionary)>>at:
	Receiver: a SystemDictionary(lots of globals)
	Arguments and temporary variables: 
		key: 	#PileGrossissante
	Receiver's instance variables: 
		tally: 	6620
		array: 	an Array(#UTF8InvalidText->UTF8InvalidText #GTSpotterDebuggingExceptionH...etc...
		cachedClassNames: 	nil
		cachedNonClassNames: 	nil


SystemDictionary(Dictionary)>>at:ifAbsent:
	Receiver: a SystemDictionary(lots of globals)
	Arguments and temporary variables: 
		key: 	#PileGrossissante
		aBlock: 	[ self errorKeyNotFound: key ]
	Receiver's instance variables: 
		tally: 	6620
		array: 	an Array(#UTF8InvalidText->UTF8InvalidText #GTSpotterDebuggingExceptionH...etc...
		cachedClassNames: 	nil
		cachedNonClassNames: 	nil


SystemDictionary(Dictionary)>>at:
	Receiver: a SystemDictionary(lots of globals)
	Arguments and temporary variables: 
		key: 	#PileGrossissante
	Receiver's instance variables: 
		tally: 	6620
		array: 	an Array(#UTF8InvalidText->UTF8InvalidText #GTSpotterDebuggingExceptionH...etc...
		cachedClassNames: 	nil
		cachedNonClassNames: 	nil


SmalltalkImage>>at:
	Receiver: Smalltalk
	Arguments and temporary variables: 
		aKey: 	#PileGrossissante
	Receiver's instance variables: 
		globals: 	a SystemDictionary(lots of globals)
		deferredStartupActions: 	an OrderedCollection()
		specialObjectsArray: 	an Array(nil false true #Processor->Processor Bitmap Small...etc...
		session: 	an Object
		vm: 	a VirtualMachine


IDM>>idmPile
	Receiver: une Pile, de taille: 5 contenant: 0 objets : (nil nil nil nil nil )
	Arguments and temporary variables: 

	Receiver's instance variables: 
		contenu: 	#(nil nil nil nil nil)
		index: 	0
		capacite: 	5


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	a ReadStream
		itsSelection: 	a Text for ''
		itsSelectionString: 	''
	Receiver's instance variables: 
		ast: 	DoIt
	^ i idmPile
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(801021696)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(801021696)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(503682304)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(801021696)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@50)
		owner: 	a TransformWithLayoutMorph(200151040)
		submorphs: 	an Array(a RubPrimarySelectionMorph(429549824) a RubCursor(680567040...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (795827712) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(982094336)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(680567040)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(885614336))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(503682304)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1848@962)
		canvas: 	a FormCanvas on: DisplayScreen(1848x962x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(758458112))(a DropList...etc...
		lastStepTime: 	1211267
		lastStepMessage: 	nil
		lastCycleTime: 	1211288
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(680567040)))
		lastAlarmTime: 	1211267
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1848@962)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(763588864) a Na...etc...
		fullBounds: 	(0@0) corner: (1848@962)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (303216896) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1848@962)
		canvas: 	a FormCanvas on: DisplayScreen(1848x962x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(758458112))(a DropList...etc...
		lastStepTime: 	1211267
		lastStepMessage: 	nil
		lastCycleTime: 	1211288
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(680567040)))
		lastAlarmTime: 	1211267
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1848@962)
		canvas: 	a FormCanvas on: DisplayScreen(1848x962x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(758458112))(a DropList...etc...
		lastStepTime: 	1211267
		lastStepMessage: 	nil
		lastCycleTime: 	1211288
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(680567040)))
		lastAlarmTime: 	1211267
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1848@962)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(763588864) a Na...etc...
		fullBounds: 	(0@0) corner: (1848@962)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (303216896) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
SystemDictionary(Dictionary)>>errorKeyNotFound:
[ self errorKeyNotFound: key ] in SystemDictionary(Dictionary)>>at:
SystemDictionary(Dictionary)>>at:ifAbsent:
SystemDictionary(Dictionary)>>at:
SmalltalkImage>>at:
IDM>>idmPile
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
KeyNotFound: key #grow not found in MethodDictionary
28 September 2018 11:56:11.216181 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

MethodDictionary(Dictionary)>>errorKeyNotFound:
	Receiver: a MethodDictionary(#capacity->Pile>>#capacity #do:->Pile>>#do: #initialize:->Pile>>#initia...etc...
	Arguments and temporary variables: 
		aKey: 	#grow
	Receiver's instance variables: 
		tally: 	10
		array: 	{Pile>>#isEmpty. nil. nil. Pile>>#push:. nil. nil. nil. nil. nil. Pile>>...etc...


[ self errorKeyNotFound: key ] in MethodDictionary(Dictionary)>>at:
	Receiver: a MethodDictionary(#capacity->Pile>>#capacity #do:->Pile>>#do: #initialize:->Pile>>#initia...etc...
	Arguments and temporary variables: 
		key: 	#grow
	Receiver's instance variables: 
		tally: 	10
		array: 	{Pile>>#isEmpty. nil. nil. Pile>>#push:. nil. nil. nil. nil. nil. Pile>>...etc...


MethodDictionary>>at:ifAbsent:
	Receiver: a MethodDictionary(#capacity->Pile>>#capacity #do:->Pile>>#do: #initialize:->Pile>>#initia...etc...
	Arguments and temporary variables: 
		key: 	#grow
		aBlock: 	[ self errorKeyNotFound: key ]
		index: 	6
	Receiver's instance variables: 
		tally: 	10
		array: 	{Pile>>#isEmpty. nil. nil. Pile>>#push:. nil. nil. nil. nil. nil. Pile>>...etc...


MethodDictionary(Dictionary)>>at:
	Receiver: a MethodDictionary(#capacity->Pile>>#capacity #do:->Pile>>#do: #initialize:->Pile>>#initia...etc...
	Arguments and temporary variables: 
		key: 	#grow
	Receiver's instance variables: 
		tally: 	10
		array: 	{Pile>>#isEmpty. nil. nil. Pile>>#push:. nil. nil. nil. nil. nil. Pile>>...etc...


Pile class(Behavior)>>compiledMethodAt:
	Receiver: Pile
	Arguments and temporary variables: 
		selector: 	#grow
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#capacity->Pile>>#capacity #do:->Pile>>#do: #ini...etc...
		format: 	65539
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{PileTypee. IDM. PileGrossissante}
		name: 	#Pile
		classPool: 	a Dictionary(#tailleDefaut->5 )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#MetaProg
		traitComposition: 	{}
		localSelectors: 	nil


[ Pile
	subclass: #PileGrossissante
	instanceVariableNames: ''
	classVariableNames: ''
	package: 'MetaProg'.
(Smalltalk at: #PileGrossissante)
	addSelector: #grow
	withMethod: (Pile compiledMethodAt: #grow).
Pile removeSelector: #grow ] in IDM>>idmPile
	Receiver: une Pile, de taille: 5 contenant: 0 objets : (nil nil nil nil nil )
	Arguments and temporary variables: 

	Receiver's instance variables: 
		contenu: 	#(nil nil nil nil nil)
		index: 	0
		capacite: 	5


BlockClosure>>cull:
	Receiver: [ Pile
	subclass: #PileGrossissante
	instanceVariableNames: ''
	classVariableNames: ''
	pa...etc...
	Arguments and temporary variables: 
		anArg: 	KeyNotFound: key #PileGrossissante not found in SystemDictionary
	Receiver's instance variables: 
		outerContext: 	IDM>>idmPile
		startpc: 	134
		numArgs: 	0


Context>>evaluateSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	KeyNotFound: key #PileGrossissante not found in SystemDictionary
		value: 	nil
	Receiver's instance variables: 
		sender: 	IDM>>idmPile
		pc: 	30
		stackp: 	2
		method: 	BlockClosure>>#on:do:
		closureOrNil: 	nil
		receiver: 	[ Smalltalk at: #PileGrossissante ]


Context>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	KeyNotFound: key #PileGrossissante not found in SystemDictionary
	Receiver's instance variables: 
		sender: 	IDM>>idmPile
		pc: 	30
		stackp: 	2
		method: 	BlockClosure>>#on:do:
		closureOrNil: 	nil
		receiver: 	[ Smalltalk at: #PileGrossissante ]


KeyNotFound(Exception)>>signal
	Receiver: KeyNotFound: key #PileGrossissante not found in SystemDictionary
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	'key #PileGrossissante not found in SystemDictionary'
		tag: 	nil
		signaler: 	a SystemDictionary(lots of globals)
		signalContext: 	KeyNotFound(Exception)>>signal
		handlerContext: 	BlockClosure>>on:do:
		outerContext: 	nil
		object: 	#PileGrossissante


KeyNotFound class(NotFound class)>>signalFor:
	Receiver: KeyNotFound
	Arguments and temporary variables: 
		anObject: 	#PileGrossissante
	Receiver's instance variables: 
		superclass: 	NotFound
		methodDict: 	a MethodDictionary(#key->KeyNotFound>>#key #key:->KeyNotFound>>#key...etc...
		format: 	65543
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#KeyNotFound
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Collections-Unordered'
		traitComposition: 	{}
		localSelectors: 	nil


SystemDictionary(Dictionary)>>errorKeyNotFound:
	Receiver: a SystemDictionary(lots of globals)
	Arguments and temporary variables: 
		aKey: 	#PileGrossissante
	Receiver's instance variables: 
		tally: 	6621
		array: 	an Array(#UTF8InvalidText->UTF8InvalidText #GTSpotterDebuggingExceptionH...etc...
		cachedClassNames: 	nil
		cachedNonClassNames: 	nil


[ self errorKeyNotFound: key ] in SystemDictionary(Dictionary)>>at:
	Receiver: a SystemDictionary(lots of globals)
	Arguments and temporary variables: 
		key: 	#PileGrossissante
	Receiver's instance variables: 
		tally: 	6621
		array: 	an Array(#UTF8InvalidText->UTF8InvalidText #GTSpotterDebuggingExceptionH...etc...
		cachedClassNames: 	nil
		cachedNonClassNames: 	nil


SystemDictionary(Dictionary)>>at:ifAbsent:
	Receiver: a SystemDictionary(lots of globals)
	Arguments and temporary variables: 
		key: 	#PileGrossissante
		aBlock: 	[ self errorKeyNotFound: key ]
	Receiver's instance variables: 
		tally: 	6621
		array: 	an Array(#UTF8InvalidText->UTF8InvalidText #GTSpotterDebuggingExceptionH...etc...
		cachedClassNames: 	nil
		cachedNonClassNames: 	nil


SystemDictionary(Dictionary)>>at:
	Receiver: a SystemDictionary(lots of globals)
	Arguments and temporary variables: 
		key: 	#PileGrossissante
	Receiver's instance variables: 
		tally: 	6621
		array: 	an Array(#UTF8InvalidText->UTF8InvalidText #GTSpotterDebuggingExceptionH...etc...
		cachedClassNames: 	nil
		cachedNonClassNames: 	nil


SmalltalkImage>>at:
	Receiver: Smalltalk
	Arguments and temporary variables: 
		aKey: 	#PileGrossissante
	Receiver's instance variables: 
		globals: 	a SystemDictionary(lots of globals)
		deferredStartupActions: 	an OrderedCollection()
		specialObjectsArray: 	an Array(nil false true #Processor->Processor Bitmap Small...etc...
		session: 	an Object
		vm: 	a VirtualMachine


[ Smalltalk at: #PileGrossissante ] in IDM>>idmPile
	Receiver: une Pile, de taille: 5 contenant: 0 objets : (nil nil nil nil nil )
	Arguments and temporary variables: 

	Receiver's instance variables: 
		contenu: 	#(nil nil nil nil nil)
		index: 	0
		capacite: 	5


BlockClosure>>on:do:
	Receiver: [ Smalltalk at: #PileGrossissante ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ Pile
	subclass: #PileGrossissante
	instanceVariableNames: ''
	...etc...
	Receiver's instance variables: 
		outerContext: 	IDM>>idmPile
		startpc: 	125
		numArgs: 	0


IDM>>idmPile
	Receiver: une Pile, de taille: 5 contenant: 0 objets : (nil nil nil nil nil )
	Arguments and temporary variables: 

	Receiver's instance variables: 
		contenu: 	#(nil nil nil nil nil)
		index: 	0
		capacite: 	5


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	a ReadStream
		itsSelection: 	a Text for ''
		itsSelectionString: 	''
	Receiver's instance variables: 
		ast: 	DoIt
	^ i idmPile
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(801021696)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(801021696)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(503682304)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(801021696)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@50)
		owner: 	a TransformWithLayoutMorph(200151040)
		submorphs: 	an Array(a RubPrimarySelectionMorph(429549824) a RubCursor(680567040...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (795827712) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(982094336)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(680567040)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(285566208))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(503682304)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1848@962)
		canvas: 	a FormCanvas on: DisplayScreen(1848x962x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(81252096))(a SearchMorph...etc...
		lastStepTime: 	1263358
		lastStepMessage: 	nil
		lastCycleTime: 	1263379
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(680567040)))
		lastAlarmTime: 	1263358
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1848@962)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(763588864) a Na...etc...
		fullBounds: 	(0@0) corner: (1848@962)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (303216896) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1848@962)
		canvas: 	a FormCanvas on: DisplayScreen(1848x962x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(81252096))(a SearchMorph...etc...
		lastStepTime: 	1263358
		lastStepMessage: 	nil
		lastCycleTime: 	1263379
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(680567040)))
		lastAlarmTime: 	1263358
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1848@962)
		canvas: 	a FormCanvas on: DisplayScreen(1848x962x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(81252096))(a SearchMorph...etc...
		lastStepTime: 	1263358
		lastStepMessage: 	nil
		lastCycleTime: 	1263379
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(680567040)))
		lastAlarmTime: 	1263358
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1848@962)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(763588864) a Na...etc...
		fullBounds: 	(0@0) corner: (1848@962)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (303216896) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
MethodDictionary(Dictionary)>>errorKeyNotFound:
[ self errorKeyNotFound: key ] in MethodDictionary(Dictionary)>>at:
MethodDictionary>>at:ifAbsent:
MethodDictionary(Dictionary)>>at:
Pile class(Behavior)>>compiledMethodAt:
[ Pile
	subclass: #PileGrossissante
	instanceVariableNames: ''
	classVariableNames: ''
	package: 'MetaProg'.
(Smalltalk at: #PileGrossissante)
	addSelector: #grow
	withMethod: (Pile compiledMethodAt: #grow).
Pile removeSelector: #grow ] in IDM>>idmPile
BlockClosure>>cull:
Context>>evaluateSignal:
Context>>handleSignal:
KeyNotFound(Exception)>>signal
KeyNotFound class(NotFound class)>>signalFor:
SystemDictionary(Dictionary)>>errorKeyNotFound:
[ self errorKeyNotFound: key ] in SystemDictionary(Dictionary)>>at:
SystemDictionary(Dictionary)>>at:ifAbsent:
SystemDictionary(Dictionary)>>at:
SmalltalkImage>>at:
[ Smalltalk at: #PileGrossissante ] in IDM>>idmPile
BlockClosure>>on:do:
IDM>>idmPile
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
KeyNotFound: key #grow not found in MethodDictionary
28 September 2018 12:03:22.399472 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

MethodDictionary(Dictionary)>>errorKeyNotFound:
	Receiver: a MethodDictionary()
	Arguments and temporary variables: 
		aKey: 	#grow
	Receiver's instance variables: 
		tally: 	0
		array: 	#(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil ni...etc...


[ self errorKeyNotFound: key ] in MethodDictionary(Dictionary)>>at:
	Receiver: a MethodDictionary()
	Arguments and temporary variables: 
		key: 	#grow
	Receiver's instance variables: 
		tally: 	0
		array: 	#(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil ni...etc...


MethodDictionary>>at:ifAbsent:
	Receiver: a MethodDictionary()
	Arguments and temporary variables: 
		key: 	#grow
		aBlock: 	[ self errorKeyNotFound: key ]
		index: 	6
	Receiver's instance variables: 
		tally: 	0
		array: 	#(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil ni...etc...


MethodDictionary(Dictionary)>>at:
	Receiver: a MethodDictionary()
	Arguments and temporary variables: 
		key: 	#grow
	Receiver's instance variables: 
		tally: 	0
		array: 	#(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil ni...etc...


PileGrossissante class(Behavior)>>compiledMethodAt:
	Receiver: PileGrossissante
	Arguments and temporary variables: 
		selector: 	#grow
	Receiver's instance variables: 
		superclass: 	Pile
		methodDict: 	a MethodDictionary()
		format: 	65539
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#PileGrossissante
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#MetaProg
		traitComposition: 	{}
		localSelectors: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	a ReadStream
		itsSelection: 	a Text for ''
		itsSelectionString: 	''
	Receiver's instance variables: 
		ast: 	DoIt
	^ Pile
		addSelector: #grow
		withMethod: (PileGrossissante compiled...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(1045771264)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(1045771264)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(986945536)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(1045771264)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@50)
		owner: 	a TransformWithLayoutMorph(201212672)
		submorphs: 	an Array(a RubPrimarySelectionMorph(124202496) a RubCursor(120740096...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (983445760) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(571332352)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(120740096)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(668487168))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(256@133)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(986945536)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1848@962)
		canvas: 	a FormCanvas on: DisplayScreen(1848x962x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(758458112))(a DropList...etc...
		lastStepTime: 	1694571
		lastStepMessage: 	nil
		lastCycleTime: 	1694592
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(120740096)))
		lastAlarmTime: 	1694571
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1848@962)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(755884544) a Sy...etc...
		fullBounds: 	(0@0) corner: (1848@962)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (303216896) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1848@962)
		canvas: 	a FormCanvas on: DisplayScreen(1848x962x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(758458112))(a DropList...etc...
		lastStepTime: 	1694571
		lastStepMessage: 	nil
		lastCycleTime: 	1694592
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(120740096)))
		lastAlarmTime: 	1694571
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1848@962)
		canvas: 	a FormCanvas on: DisplayScreen(1848x962x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(758458112))(a DropList...etc...
		lastStepTime: 	1694571
		lastStepMessage: 	nil
		lastCycleTime: 	1694592
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(120740096)))
		lastAlarmTime: 	1694571
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1848@962)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(755884544) a Sy...etc...
		fullBounds: 	(0@0) corner: (1848@962)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (303216896) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
MethodDictionary(Dictionary)>>errorKeyNotFound:
[ self errorKeyNotFound: key ] in MethodDictionary(Dictionary)>>at:
MethodDictionary>>at:ifAbsent:
MethodDictionary(Dictionary)>>at:
PileGrossissante class(Behavior)>>compiledMethodAt:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of BlockClosure did not understand #readStream
28 September 2018 12:04:28.828968 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

BlockClosure(Object)>>doesNotUnderstand: #readStream
	Receiver: [ ^ 1 ]
	Arguments and temporary variables: 
		aMessage: 	readStream
		exception: 	MessageNotUnderstood: BlockClosure>>readStream
		resumeValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ Pile
	subclass: #PileGrossissante
	instanceVariableNames: ''
	c...etc...
		startpc: 	176
		numArgs: 	0


OpalCompiler>>source:
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		aString: 	[ ^ 1 ]
	Receiver's instance variables: 
		ast: 	nil
		source: 	nil
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


Compiler class(ClassDescription)>>compile:classified:withStamp:notifying:logSource:
	Receiver: Compiler
	Arguments and temporary variables: 
		text: 	[ ^ 1 ]
		category: 	#'as yet unclassified'
		changeStamp: 	'pm 9/28/2018 12:04'
		requestor: 	nil
		logSource: 	true
		method: 	nil
		selector: 	nil
	Receiver's instance variables: 
		superclass: 	AbstractCompiler
		methodDict: 	a MethodDictionary(#class:->Compiler>>#class: #compilationContext->...etc...
		format: 	65545
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#Compiler
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Compiler-Kernel'
		traitComposition: 	{}
		localSelectors: 	nil
		CompileWithErrors: 	nil


Compiler class(ClassDescription)>>compile:classified:withStamp:notifying:
	Receiver: Compiler
	Arguments and temporary variables: 
		text: 	[ ^ 1 ]
		category: 	#'as yet unclassified'
		changeStamp: 	'pm 9/28/2018 12:04'
		requestor: 	nil
	Receiver's instance variables: 
		superclass: 	AbstractCompiler
		methodDict: 	a MethodDictionary(#class:->Compiler>>#class: #compilationContext->...etc...
		format: 	65545
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#Compiler
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Compiler-Kernel'
		traitComposition: 	{}
		localSelectors: 	nil
		CompileWithErrors: 	nil


Compiler class(ClassDescription)>>compile:classified:notifying:
	Receiver: Compiler
	Arguments and temporary variables: 
		text: 	[ ^ 1 ]
		category: 	#'as yet unclassified'
		requestor: 	nil
		stamp: 	'pm 9/28/2018 12:04'
	Receiver's instance variables: 
		superclass: 	AbstractCompiler
		methodDict: 	a MethodDictionary(#class:->Compiler>>#class: #compilationContext->...etc...
		format: 	65545
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#Compiler
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Compiler-Kernel'
		traitComposition: 	{}
		localSelectors: 	nil
		CompileWithErrors: 	nil


Compiler class(ClassDescription)>>compile:notifying:
	Receiver: Compiler
	Arguments and temporary variables: 
		code: 	[ ^ 1 ]
		requestor: 	nil
	Receiver's instance variables: 
		superclass: 	AbstractCompiler
		methodDict: 	a MethodDictionary(#class:->Compiler>>#class: #compilationContext->...etc...
		format: 	65545
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#Compiler
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Compiler-Kernel'
		traitComposition: 	{}
		localSelectors: 	nil
		CompileWithErrors: 	nil


Compiler class(Behavior)>>compile:
	Receiver: Compiler
	Arguments and temporary variables: 
		code: 	[ ^ 1 ]
	Receiver's instance variables: 
		superclass: 	AbstractCompiler
		methodDict: 	a MethodDictionary(#class:->Compiler>>#class: #compilationContext->...etc...
		format: 	65545
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#Compiler
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Compiler-Kernel'
		traitComposition: 	{}
		localSelectors: 	nil
		CompileWithErrors: 	nil


[ Pile
	subclass: #PileGrossissante
	instanceVariableNames: ''
	classVariableNames: ''
	package: 'MetaProg'.
(Smalltalk at: #PileGrossissante)
	addSelector: #grow
	withMethod: (Pile compiledMethodAt: #grow).
"Pile removeSelector: #grow."
(Smalltalk at: #PileGrossissante)
	addSelector: #push
	withMethod: (Compiler compile: [ ^ 1 ]) ] in IDM>>idmPile
	Receiver: une Pile, de taille: 5 contenant: 0 objets : (nil nil nil nil nil )
	Arguments and temporary variables: 

	Receiver's instance variables: 
		contenu: 	#(nil nil nil nil nil)
		index: 	0
		capacite: 	5


BlockClosure>>cull:
	Receiver: [ Pile
	subclass: #PileGrossissante
	instanceVariableNames: ''
	classVariableNames: ''
	pa...etc...
	Arguments and temporary variables: 
		anArg: 	KeyNotFound: key #PileGrossissante not found in SystemDictionary
	Receiver's instance variables: 
		outerContext: 	IDM>>idmPile
		startpc: 	150
		numArgs: 	0


Context>>evaluateSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	KeyNotFound: key #PileGrossissante not found in SystemDictionary
		value: 	nil
	Receiver's instance variables: 
		sender: 	IDM>>idmPile
		pc: 	30
		stackp: 	2
		method: 	BlockClosure>>#on:do:
		closureOrNil: 	nil
		receiver: 	[ Smalltalk at: #PileGrossissante ]


Context>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	KeyNotFound: key #PileGrossissante not found in SystemDictionary
	Receiver's instance variables: 
		sender: 	IDM>>idmPile
		pc: 	30
		stackp: 	2
		method: 	BlockClosure>>#on:do:
		closureOrNil: 	nil
		receiver: 	[ Smalltalk at: #PileGrossissante ]


KeyNotFound(Exception)>>signal
	Receiver: KeyNotFound: key #PileGrossissante not found in SystemDictionary
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	'key #PileGrossissante not found in SystemDictionary'
		tag: 	nil
		signaler: 	a SystemDictionary(lots of globals)
		signalContext: 	KeyNotFound(Exception)>>signal
		handlerContext: 	BlockClosure>>on:do:
		outerContext: 	nil
		object: 	#PileGrossissante


KeyNotFound class(NotFound class)>>signalFor:
	Receiver: KeyNotFound
	Arguments and temporary variables: 
		anObject: 	#PileGrossissante
	Receiver's instance variables: 
		superclass: 	NotFound
		methodDict: 	a MethodDictionary(#key->KeyNotFound>>#key #key:->KeyNotFound>>#key...etc...
		format: 	65543
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#KeyNotFound
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Collections-Unordered'
		traitComposition: 	{}
		localSelectors: 	nil


SystemDictionary(Dictionary)>>errorKeyNotFound:
	Receiver: a SystemDictionary(lots of globals)
	Arguments and temporary variables: 
		aKey: 	#PileGrossissante
	Receiver's instance variables: 
		tally: 	6621
		array: 	an Array(#UTF8InvalidText->UTF8InvalidText #GTSpotterDebuggingExceptionH...etc...
		cachedClassNames: 	nil
		cachedNonClassNames: 	nil


[ self errorKeyNotFound: key ] in SystemDictionary(Dictionary)>>at:
	Receiver: a SystemDictionary(lots of globals)
	Arguments and temporary variables: 
		key: 	#PileGrossissante
	Receiver's instance variables: 
		tally: 	6621
		array: 	an Array(#UTF8InvalidText->UTF8InvalidText #GTSpotterDebuggingExceptionH...etc...
		cachedClassNames: 	nil
		cachedNonClassNames: 	nil


SystemDictionary(Dictionary)>>at:ifAbsent:
	Receiver: a SystemDictionary(lots of globals)
	Arguments and temporary variables: 
		key: 	#PileGrossissante
		aBlock: 	[ self errorKeyNotFound: key ]
	Receiver's instance variables: 
		tally: 	6621
		array: 	an Array(#UTF8InvalidText->UTF8InvalidText #GTSpotterDebuggingExceptionH...etc...
		cachedClassNames: 	nil
		cachedNonClassNames: 	nil


SystemDictionary(Dictionary)>>at:
	Receiver: a SystemDictionary(lots of globals)
	Arguments and temporary variables: 
		key: 	#PileGrossissante
	Receiver's instance variables: 
		tally: 	6621
		array: 	an Array(#UTF8InvalidText->UTF8InvalidText #GTSpotterDebuggingExceptionH...etc...
		cachedClassNames: 	nil
		cachedNonClassNames: 	nil


SmalltalkImage>>at:
	Receiver: Smalltalk
	Arguments and temporary variables: 
		aKey: 	#PileGrossissante
	Receiver's instance variables: 
		globals: 	a SystemDictionary(lots of globals)
		deferredStartupActions: 	an OrderedCollection()
		specialObjectsArray: 	an Array(nil false true #Processor->Processor Bitmap Small...etc...
		session: 	an Object
		vm: 	a VirtualMachine


[ Smalltalk at: #PileGrossissante ] in IDM>>idmPile
	Receiver: une Pile, de taille: 5 contenant: 0 objets : (nil nil nil nil nil )
	Arguments and temporary variables: 

	Receiver's instance variables: 
		contenu: 	#(nil nil nil nil nil)
		index: 	0
		capacite: 	5


BlockClosure>>on:do:
	Receiver: [ Smalltalk at: #PileGrossissante ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ Pile
	subclass: #PileGrossissante
	instanceVariableNames: ''
	...etc...
	Receiver's instance variables: 
		outerContext: 	IDM>>idmPile
		startpc: 	141
		numArgs: 	0


IDM>>idmPile
	Receiver: une Pile, de taille: 5 contenant: 0 objets : (nil nil nil nil nil )
	Arguments and temporary variables: 

	Receiver's instance variables: 
		contenu: 	#(nil nil nil nil nil)
		index: 	0
		capacite: 	5


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'i:=IDM new.
i idmPile.'
		itsSelection: 	a Text for 'i:=IDM new.
i idmPile.'
		itsSelectionString: 	'i:=IDM new.
i idmPile.'
	Receiver's instance variables: 
		ast: 	DoIt
	i := IDM new.
	^ i idmPile
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(801021696)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(801021696)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(503682304)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(801021696)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@50)
		owner: 	a TransformWithLayoutMorph(200151040)
		submorphs: 	an Array(a RubPrimarySelectionMorph(429549824) a RubCursor(680567040...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (795827712) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(982094336)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(680567040)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(643657216))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(371.0@205.0)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(503682304)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1848@962)
		canvas: 	a FormCanvas on: DisplayScreen(1848x962x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(910336))(a DropListMor...etc...
		lastStepTime: 	1760987
		lastStepMessage: 	nil
		lastCycleTime: 	1761010
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(680567040)))
		lastAlarmTime: 	1760987
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1848@962)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(763588864) a GL...etc...
		fullBounds: 	(0@0) corner: (1848@962)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (303216896) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1848@962)
		canvas: 	a FormCanvas on: DisplayScreen(1848x962x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(910336))(a DropListMor...etc...
		lastStepTime: 	1760987
		lastStepMessage: 	nil
		lastCycleTime: 	1761010
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(680567040)))
		lastAlarmTime: 	1760987
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1848@962)
		canvas: 	a FormCanvas on: DisplayScreen(1848x962x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(910336))(a DropListMor...etc...
		lastStepTime: 	1760987
		lastStepMessage: 	nil
		lastCycleTime: 	1761010
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(680567040)))
		lastAlarmTime: 	1760987
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1848@962)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(763588864) a GL...etc...
		fullBounds: 	(0@0) corner: (1848@962)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (303216896) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
BlockClosure(Object)>>doesNotUnderstand: #readStream
OpalCompiler>>source:
Compiler class(ClassDescription)>>compile:classified:withStamp:notifying:logSource:
Compiler class(ClassDescription)>>compile:classified:withStamp:notifying:
Compiler class(ClassDescription)>>compile:classified:notifying:
Compiler class(ClassDescription)>>compile:notifying:
Compiler class(Behavior)>>compile:
[ Pile
	subclass: #PileGrossissante
	instanceVariableNames: ''
	classVariableNames: ''
	package: 'MetaProg'.
(Smalltalk at: #PileGrossissante)
	addSelector: #grow
	withMethod: (Pile compiledMethodAt: #grow).
"Pile removeSelector: #grow."
(Smalltalk at: #PileGrossissante)
	addSelector: #push
	withMethod: (Compiler compile: [ ^ 1 ]) ] in IDM>>idmPile
BlockClosure>>cull:
Context>>evaluateSignal:
Context>>handleSignal:
KeyNotFound(Exception)>>signal
KeyNotFound class(NotFound class)>>signalFor:
SystemDictionary(Dictionary)>>errorKeyNotFound:
[ self errorKeyNotFound: key ] in SystemDictionary(Dictionary)>>at:
SystemDictionary(Dictionary)>>at:ifAbsent:
SystemDictionary(Dictionary)>>at:
SmalltalkImage>>at:
[ Smalltalk at: #PileGrossissante ] in IDM>>idmPile
BlockClosure>>on:do:
IDM>>idmPile
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

