OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-11T22:52:45.067203+02:00' ],		#prior : OmReference [ 'Pharo.au49irz5gowb63zmh0vuoqw9l', '18' ],		#self : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Symbol,				#isMetaSide : false			},			#name : #'returnToCatchWith:',			#protocol : #'*ExosPharo-catchThrow',			#sourceCode : 'returnToCatchWith: aValue \r        "Look down the stack for a catch, the mark of which is self,\r        when found, transfer control (non local branch)."\r        | catchMethod currentContext |\r        currentContext := thisContext.\r        catchMethod := Symbol compiledMethodAt: #catch:.\r        [currentContext method == catchMethod and: [currentContext receiver == self]]\r                whileFalse: [currentContext := currentContext sender].\r        currentContext return: aValue.\r        ^aValue',			#stamp : 'cd 4/11/2018 17:55',			#package : #ExosPharo-catchThrow		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-10-11T22:52:45.069575+02:00' ],		#prior : OmReference [ '1' ],		#self : OmReference [ '2' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Symbol,				#isMetaSide : false			},			#name : #'catch:',			#protocol : #'*ExosPharo-catchThrow',			#sourceCode : 'catch: aBlock\r    "execute aBlock with a throw possibility"\r\t"throw using the same symbol will resume execution at the instruction following catch"\r    aBlock value.\r',			#stamp : 'cd 4/11/2018 17:07',			#package : #ExosPharo-catchThrow		}	}}