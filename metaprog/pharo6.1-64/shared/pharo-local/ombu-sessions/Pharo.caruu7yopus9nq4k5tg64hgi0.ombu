OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-02T16:39:16.473328+01:00' ],		#prior : OmReference [ 'Pharo.2c5o23xa0xi7x1yho2bnekolk', '7' ],		#self : OmReference [ '1' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #'send:withArguments:',			#protocol : #'method lookup',			#sourceCode : 'send: arg1 withArguments: arg2\r\t"or is it?"\r\t"^self basicSend: arg1 withArguments: arg2 from: (self objClass)."',			#stamp : 'pm 11/2/2018 16:08',			#package : #ObjVSkeleton		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #'send:withArguments:',			#protocol : #'method lookup',			#sourceCode : 'send: arg1 withArguments: arg2\r\t"or is it?"\r\tself halt.\r\t"^self basicSend: arg1 withArguments: arg2 from: (self objClass)."',			#stamp : 'pm 11/2/2018 16:39',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-02T16:40:10.105675+01:00' ],		#prior : OmReference [ '1' ],		#self : OmReference [ '2' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #'send:withArguments:',			#protocol : #'method lookup',			#sourceCode : 'send: arg1 withArguments: arg2\r\t"or is it?"\r\tself halt.\r\t"^self basicSend: arg1 withArguments: arg2 from: (self objClass)."',			#stamp : 'pm 11/2/2018 16:39',			#package : #ObjVSkeleton		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #'send:withArguments:',			#protocol : #'method lookup',			#sourceCode : 'send: arg1 withArguments: arg2\r\t"or is it?"\r\t\r\t"^self basicSend: arg1 withArguments: arg2 from: (self objClass)."',			#stamp : 'pm 11/2/2018 16:40',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-02T16:40:24.263841+01:00' ],		#prior : OmReference [ '2' ],		#self : OmReference [ '3' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #'send:withArguments:',			#protocol : #'method lookup',			#sourceCode : 'send: arg1 withArguments: arg2\r\t"or is it?"\r\t\r\t"^self basicSend: arg1 withArguments: arg2 from: (self objClass)."',			#stamp : 'pm 11/2/2018 16:40',			#package : #ObjVSkeleton		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #'send:withArguments:',			#protocol : #'method lookup',			#sourceCode : 'send: arg1 withArguments: arg2\r\t"or is it?"\r\t\r\t^self basicSend: arg1 withArguments: arg2 from: (self objClass).',			#stamp : 'pm 11/2/2018 16:40',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-02T16:41:21.547261+01:00' ],		#prior : OmReference [ '3' ],		#self : OmReference [ '4' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #'lookup:',			#protocol : #'method lookup',			#sourceCode : 'lookup: arg1\r\t"question, do we have to search in metaclass aswell?\r\tanswer might be later in the tutorial"\r\r\t| Method Super|\r\tMethod:=self bodyOfMethod:arg1.\r\tMethod isNil\r\tifFalse:[\r\t\t^Method."we found a corresponding selector"\r\t\t].\r\t"else"\r\t"we do the lookup in the superclass."\r\tSuper:=self objSuperclass.\r\tSuper isNil\r\tifTrue:[\r\t\t^Super lookup:arg1.\r\t\t]\r\tifFalse:[\r\t\t^nil\r\t\t].\r\t\t\r\r',			#stamp : 'pm 11/2/2018 16:08',			#package : #ObjVSkeleton		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #'lookup:',			#protocol : #'method lookup',			#sourceCode : 'lookup: arg1\r\t"question, do we have to search in metaclass aswell?\r\tanswer might be later in the tutorial"\r\r\t| Method Super|\r\tself halt.\r\tMethod:=self bodyOfMethod:arg1.\r\tMethod isNil\r\tifFalse:[\r\t\t^Method."we found a corresponding selector"\r\t\t].\r\t"else"\r\t"we do the lookup in the superclass."\r\tSuper:=self objSuperclass.\r\tSuper isNil\r\tifTrue:[\r\t\t^Super lookup:arg1.\r\t\t]\r\tifFalse:[\r\t\t^nil\r\t\t].\r\t\t\r\r',			#stamp : 'pm 11/2/2018 16:41',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-02T16:43:56.235585+01:00' ],		#prior : OmReference [ '4' ],		#self : OmReference [ '5' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #'send:withArguments:',			#protocol : #'method lookup',			#sourceCode : 'send: arg1 withArguments: arg2\r\t"or is it?"\r\t\r\t^self basicSend: arg1 withArguments: arg2 from: (self objClass).',			#stamp : 'pm 11/2/2018 16:40',			#package : #ObjVSkeleton		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #'send:withArguments:',			#protocol : #'message passing',			#sourceCode : 'send: arg1 withArguments: arg2\r\t"or is it?"\r\t\r\t^self basicSend: arg1 withArguments: arg2 from: (self objClass).',			#stamp : 'pm 11/2/2018 16:40',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-02T16:44:43.484461+01:00' ],		#prior : OmReference [ '5' ],		#self : OmReference [ '6' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #'lookup:',			#protocol : #'method lookup',			#sourceCode : 'lookup: arg1\r\t"question, do we have to search in metaclass aswell?\r\tanswer might be later in the tutorial"\r\r\t| Method Super|\r\tself halt.\r\tMethod:=self bodyOfMethod:arg1.\r\tMethod isNil\r\tifFalse:[\r\t\t^Method."we found a corresponding selector"\r\t\t].\r\t"else"\r\t"we do the lookup in the superclass."\r\tSuper:=self objSuperclass.\r\tSuper isNil\r\tifTrue:[\r\t\t^Super lookup:arg1.\r\t\t]\r\tifFalse:[\r\t\t^nil\r\t\t].\r\t\t\r\r',			#stamp : 'pm 11/2/2018 16:41',			#package : #ObjVSkeleton		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #'lookup:',			#protocol : #'method lookup',			#sourceCode : 'lookup: arg1\r\t"question, do we have to search in metaclass aswell?\r\tanswer might be later in the tutorial"\r\r\t| Method Super|\r\tself halt.\r\tMethod:=self bodyOfMethod:arg1.\r\tMethod isNil\r\tifFalse:[\r\t\t^Method."we found a corresponding selector"\r\t\t].\r\t"else"\r\t"we do the lookup in the superclass."\r\tSuper:=self objSuperclass.\r\tSuper ~= self \r\tifTrue:[\r\t\t^Super lookup:arg1.\r\t\t]\r\tifFalse:[\r\t\t^nil\r\t\t].\r\t\t\r\r',			#stamp : 'pm 11/2/2018 16:44',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-02T16:45:24.571298+01:00' ],		#prior : OmReference [ '6' ],		#self : OmReference [ '7' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #'lookup:',			#protocol : #'method lookup',			#sourceCode : 'lookup: arg1\r\t"question, do we have to search in metaclass aswell?\r\tanswer might be later in the tutorial"\r\r\t| Method Super|\r\tself halt.\r\tMethod:=self bodyOfMethod:arg1.\r\tMethod isNil\r\tifFalse:[\r\t\t^Method."we found a corresponding selector"\r\t\t].\r\t"else"\r\t"we do the lookup in the superclass."\r\tSuper:=self objSuperclass.\r\tSuper ~= self \r\tifTrue:[\r\t\t^Super lookup:arg1.\r\t\t]\r\tifFalse:[\r\t\t^nil\r\t\t].\r\t\t\r\r',			#stamp : 'pm 11/2/2018 16:44',			#package : #ObjVSkeleton		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #'lookup:',			#protocol : #'method lookup',			#sourceCode : 'lookup: arg1\r\t"question, do we have to search in metaclass aswell?\r\tanswer might be later in the tutorial"\r\r\t| Method Super|\r\r\tMethod:=self bodyOfMethod:arg1.\r\tMethod isNil\r\tifFalse:[\r\t\t^Method."we found a corresponding selector"\r\t\t].\r\t"else"\r\t"we do the lookup in the superclass."\r\tSuper:=self objSuperclass.\r\tSuper ~= self \r\tifTrue:[\r\t\t^Super lookup:arg1.\r\t\t]\r\tifFalse:[\r\t\t^nil\r\t\t].\r\t\t\r\r',			#stamp : 'pm 11/2/2018 16:45',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-02T16:49:42.726037+01:00' ],		#prior : OmReference [ '7' ],		#self : OmReference [ '8' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #'lookup:',			#protocol : #'method lookup',			#sourceCode : 'lookup: arg1\r\t"question, do we have to search in metaclass aswell?\r\tanswer might be later in the tutorial"\r\r\t| Method Super|\r\r\tMethod:=self bodyOfMethod:arg1.\r\tMethod isNil\r\tifFalse:[\r\t\t^Method."we found a corresponding selector"\r\t\t].\r\t"else"\r\t"we do the lookup in the superclass."\r\tSuper:=self objSuperclass.\r\tSuper ~= self \r\tifTrue:[\r\t\t^Super lookup:arg1.\r\t\t]\r\tifFalse:[\r\t\t^nil\r\t\t].\r\t\t\r\r',			#stamp : 'pm 11/2/2018 16:45',			#package : #ObjVSkeleton		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #'lookup:',			#protocol : #'method lookup',			#sourceCode : 'lookup: arg1\r\t"question, do we have to search in metaclass aswell?\r\tanswer might be later in the tutorial"\r\r\t| Method Super|\r\r\tMethod:=self bodyOfMethod:arg1.\r\tMethod isNil\r\tifFalse:[\r\t\t^Method."we found a corresponding selector"\r\t\t].\r\t"else"\r\t"we do the lookup in the superclass."\r\tSuper:=self objSuperclass.\r\t((Super isNil) or:[Super == self])\r\tifTrue:[\r\t\t^nil\r\t\t]\r\tifFalse:[\r\t\t^Super lookup:arg1.\r\t\t].\r\t\t\r\r',			#stamp : 'pm 11/2/2018 16:49',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-02T16:51:46.032576+01:00' ],		#prior : OmReference [ '8' ],		#self : OmReference [ '9' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #'lookup:',			#protocol : #'method lookup',			#sourceCode : 'lookup: arg1\r\t"question, do we have to search in metaclass aswell?\r\tanswer might be later in the tutorial"\r\r\t| Method Super|\r\r\tMethod:=self bodyOfMethod:arg1.\r\tMethod isNil\r\tifFalse:[\r\t\t^Method."we found a corresponding selector"\r\t\t].\r\t"else"\r\t"we do the lookup in the superclass."\r\tSuper:=self objSuperclass.\r\t((Super isNil) or:[Super == self])\r\tifTrue:[\r\t\t^nil\r\t\t]\r\tifFalse:[\r\t\t^Super lookup:arg1.\r\t\t].\r\t\t\r\r',			#stamp : 'pm 11/2/2018 16:49',			#package : #ObjVSkeleton		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #'lookup:',			#protocol : #'method lookup',			#sourceCode : 'lookup: arg1\r\t"question, do we have to search in metaclass aswell?\r\tanswer might be later in the tutorial"\r\r\t| Method Super|\r\r\tMethod:=self bodyOfMethod:arg1.\r\tMethod isNil\r\tifFalse:[\r\t\t^Method."we found a corresponding selector"\r\t\t].\r\t"else"\r\t"we do the lookup in the superclass."\r\t((self objSuperclassId) isNil)\r\tifTrue:[\r\t\t^nil.\r\t\t].\r\tSuper:=self objSuperclass.\r\tSuper == self\r\tifTrue:[\r\t\t^nil\r\t\t]\r\tifFalse:[\r\t\t^Super lookup:arg1.\r\t\t].\r\t\t\r\r',			#stamp : 'pm 11/2/2018 16:51',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-02T16:59:39.350489+01:00' ],		#prior : OmReference [ '9' ],		#self : OmReference [ '10' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #'lookup:',			#protocol : #'method lookup',			#sourceCode : 'lookup: arg1\r\t"question, do we have to search in metaclass aswell?\r\tanswer might be later in the tutorial"\r\r\t| Method Super|\r\r\tMethod:=self bodyOfMethod:arg1.\r\tMethod isNil\r\tifFalse:[\r\t\t^Method."we found a corresponding selector"\r\t\t].\r\t"else"\r\t"we do the lookup in the superclass."\r\t((self objSuperclassId) isNil)\r\tifTrue:[\r\t\t^nil.\r\t\t].\r\tSuper:=self objSuperclass.\r\tSuper == self\r\tifTrue:[\r\t\t^nil\r\t\t]\r\tifFalse:[\r\t\t^Super lookup:arg1.\r\t\t].\r\t\t\r\r',			#stamp : 'pm 11/2/2018 16:51',			#package : #ObjVSkeleton		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #'lookup:',			#protocol : #'method lookup',			#sourceCode : 'lookup: arg1\r\t"question, do we have to search in metaclass aswell?\r\tanswer might be later in the tutorial"\r\r\t| Method Super|\r\r\tMethod:=self bodyOfMethod:arg1.\r\tMethod isNil\r\tifFalse:[\r\t\t^Method."we found a corresponding selector"\r\t\t].\r\t"else"\r\t"we do the lookup in the superclass."\r\t(((self objSuperclassId) isNil) or:[\tSuper == self])"if we don\'t have a super class, or we\'re reflexive, we fail."\r\tifTrue:[\r\t\t^nil.\r\t\t].\r\r\tSuper:=self objSuperclass.\r\t^Super lookup:arg1.\r\t\t\r\r',			#stamp : 'pm 11/2/2018 16:59',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-02T17:01:25.740354+01:00' ],		#prior : OmReference [ '10' ],		#self : OmReference [ '11' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #'lookup:',			#protocol : #'method lookup',			#sourceCode : 'lookup: arg1\r\t"question, do we have to search in metaclass aswell?\r\tanswer might be later in the tutorial"\r\r\t| Method Super|\r\r\tMethod:=self bodyOfMethod:arg1.\r\tMethod isNil\r\tifFalse:[\r\t\t^Method."we found a corresponding selector"\r\t\t].\r\t"else"\r\t"we do the lookup in the superclass."\r\t(((self objSuperclassId) isNil) or:[\tSuper == self])"if we don\'t have a super class, or we\'re reflexive, we fail."\r\tifTrue:[\r\t\t^nil.\r\t\t].\r\r\tSuper:=self objSuperclass.\r\t^Super lookup:arg1.\r\t\t\r\r',			#stamp : 'pm 11/2/2018 16:59',			#package : #ObjVSkeleton		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #'lookup:',			#protocol : #'method lookup',			#sourceCode : 'lookup: arg1\r\t"question, do we have to search in metaclass aswell?\r\tanswer might be later in the tutorial"\r\r\t| Method Super|\r\r\tMethod:=self bodyOfMethod:arg1.\r\tMethod isNil\r\tifFalse:[\r\t\t^Method."we found a corresponding selector"\r\t\t].\r\t"else"\r\t"we do the lookup in the superclass."\r\t((self objSuperclassId) isNil) "if we don\'t have a super class, we fail."\r\tifTrue:[\r\t\t^nil.\r\t\t].\r\r\tSuper:=self objSuperclass.\r\tSuper==self\r\tifTrue:[\r\t\t^nil\r\t\t].\r\t^Super lookup:arg1.\r\t\t\r\r',			#stamp : 'pm 11/2/2018 17:01',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-02T17:09:52.217731+01:00' ],		#prior : OmReference [ '11' ],		#self : OmReference [ '12' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #'send:withArguments:',			#protocol : #'message passing',			#sourceCode : 'send: arg1 withArguments: arg2\r\t"or is it?"\r\t\r\t^self basicSend: arg1 withArguments: arg2 from: (self objClass).',			#stamp : 'pm 11/2/2018 16:40',			#package : #ObjVSkeleton		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #'send:withArguments:',			#protocol : #'message passing',			#sourceCode : 'send: arg1 withArguments: arg2\r\t"or is it?"\r\tTranscript show:arg1.\r\t^self basicSend: arg1 withArguments: arg2 from: (self objClass).',			#stamp : 'pm 11/2/2018 17:09',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-02T17:09:55.822934+01:00' ],		#prior : OmReference [ '12' ],		#self : OmReference [ '13' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #'send:withArguments:',			#protocol : #'message passing',			#sourceCode : 'send: arg1 withArguments: arg2\r\t"or is it?"\r\tTranscript show:arg1.\r\t^self basicSend: arg1 withArguments: arg2 from: (self objClass).',			#stamp : 'pm 11/2/2018 17:09',			#package : #ObjVSkeleton		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #'send:withArguments:',			#protocol : #'message passing',			#sourceCode : 'send: arg1 withArguments: arg2\r\t"or is it?"\r\tTranscript show:arg1;cr.\r\t^self basicSend: arg1 withArguments: arg2 from: (self objClass).',			#stamp : 'pm 11/2/2018 17:09',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-02T17:10:26.782325+01:00' ],		#prior : OmReference [ '13' ],		#self : OmReference [ '14' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #'send:withArguments:',			#protocol : #'message passing',			#sourceCode : 'send: arg1 withArguments: arg2\r\t"or is it?"\r\tTranscript show:arg1;cr.\r\t^self basicSend: arg1 withArguments: arg2 from: (self objClass).',			#stamp : 'pm 11/2/2018 17:09',			#package : #ObjVSkeleton		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #'send:withArguments:',			#protocol : #'message passing',			#sourceCode : 'send: arg1 withArguments: arg2\r\t"or is it?"\r\t^self basicSend: arg1 withArguments: arg2 from: (self objClass).',			#stamp : 'pm 11/2/2018 17:10',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-02T17:11:46.136374+01:00' ],		#prior : OmReference [ '14' ],		#self : OmReference [ '15' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #'basicSend:withArguments:from:',			#protocol : #'message passing',			#sourceCode : 'basicSend: arg1 withArguments: arg2 from: arg3\r\t| tmp1 |\r\ttmp1 := arg3 lookup: arg1.\r\t^ tmp1\r\t\tifNil: [ self sendError: arg1 withArgs: arg2 ]\r\t\tifNotNil: [ tmp1 valueWithArguments: (Array with: self) , arg2 ]',			#stamp : '',			#package : #ObjVSkeleton		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #'basicSend:withArguments:from:',			#protocol : #'message passing',			#sourceCode : 'basicSend: arg1 withArguments: arg2 from: arg3\r\t| tmp1 |\r\ttmp1 := arg3 lookup: arg1.\r\tTranscript show:tmp1;cr.\r\t^ tmp1\r\t\tifNil: [ self sendError: arg1 withArgs: arg2 ]\r\t\tifNotNil: [ tmp1 valueWithArguments: (Array with: self) , arg2 ]',			#stamp : 'pm 11/2/2018 17:11',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-02T17:14:02.39555+01:00' ],		#prior : OmReference [ '15' ],		#self : OmReference [ '16' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #'basicSend:withArguments:from:',			#protocol : #'message passing',			#sourceCode : 'basicSend: arg1 withArguments: arg2 from: arg3\r\t| tmp1 |\r\ttmp1 := arg3 lookup: arg1.\r\tTranscript show:tmp1;cr.\r\t^ tmp1\r\t\tifNil: [ self sendError: arg1 withArgs: arg2 ]\r\t\tifNotNil: [ tmp1 valueWithArguments: (Array with: self) , arg2 ]',			#stamp : 'pm 11/2/2018 17:11',			#package : #ObjVSkeleton		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #'basicSend:withArguments:from:',			#protocol : #'message passing',			#sourceCode : 'basicSend: arg1 withArguments: arg2 from: arg3\r\t| tmp1 |\r\ttmp1 := arg3 lookup: arg1.\r\t^ tmp1\r\t\tifNil: [ self sendError: arg1 withArgs: arg2 ]\r\t\tifNotNil: [ tmp1 valueWithArguments: (Array with: self) , arg2 ]',			#stamp : 'pm 11/2/2018 17:14',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-02T17:15:05.529505+01:00' ],		#prior : OmReference [ '16' ],		#self : OmReference [ '17' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #'sendError:withArgs:',			#protocol : #'message passing',			#sourceCode : 'sendError: arg1 withArgs: arg2\r\t^ self send: #error withArguments: {(arg2 copyWithFirst: arg1)}',			#stamp : '',			#package : #ObjVSkeleton		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #'sendError:withArgs:',			#protocol : #'message passing',			#sourceCode : 'sendError: arg1 withArgs: arg2\r\tTranscript show:arg1;cr.\r\t\r\t^ self send: #error withArguments: {(arg2 copyWithFirst: arg1)}',			#stamp : 'pm 11/2/2018 17:15',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-02T17:32:43.887964+01:00' ],		#prior : OmReference [ '17' ],		#self : OmReference [ '18' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #'sendError:withArgs:',			#protocol : #'message passing',			#sourceCode : 'sendError: arg1 withArgs: arg2\r\tTranscript show:arg1;cr.\r\t\r\t^ self send: #error withArguments: {(arg2 copyWithFirst: arg1)}',			#stamp : 'pm 11/2/2018 17:15',			#package : #ObjVSkeleton		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #'sendError:withArgs:',			#protocol : #'message passing',			#sourceCode : 'sendError: arg1 withArgs: arg2\r\r\t^ self send: #error withArguments: {(arg2 copyWithFirst: arg1)}',			#stamp : 'pm 11/2/2018 17:32',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-03T11:26:38.901457+01:00' ],		#prior : OmReference [ '18' ],		#self : OmReference [ '19' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #'sendError:withArgs:',			#protocol : #'message passing',			#sourceCode : 'sendError: arg1 withArgs: arg2\r\r\t^ self send: #error withArguments: {(arg2 copyWithFirst: arg1)}',			#stamp : 'pm 11/2/2018 17:32',			#package : #ObjVSkeleton		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #'sendError:withArgs:',			#protocol : #'message passing',			#sourceCode : 'sendError: arg1 withArgs: arg2\r\t^ self send: #error withArguments: {(arg2 copyWithFirst: arg1)}',			#stamp : 'pm 11/3/2018 11:26',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-03T11:28:50.051479+01:00' ],		#prior : OmReference [ '19' ],		#self : OmReference [ '20' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #'basicSend:withArguments:from:',			#protocol : #'message passing',			#sourceCode : 'basicSend: arg1 withArguments: arg2 from: arg3\r\t| tmp1 |\r\ttmp1 := arg3 lookup: arg1.\r\t^ tmp1\r\t\tifNil: [ self sendError: arg1 withArgs: arg2 ]\r\t\tifNotNil: [ tmp1 valueWithArguments: (Array with: self) , arg2 ]',			#stamp : 'pm 11/2/2018 17:14',			#package : #ObjVSkeleton		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #'basicSend:withArguments:from:',			#protocol : #'message passing',			#sourceCode : 'basicSend: arg1 withArguments: arg2 from: arg3\r\t| tmp1 |\r\ttmp1 := arg3 lookup: arg1.\r\t^ tmp1\r\t\tifNil: [ self sendError: arg1 withArgs: arg2 ]\r\t\tifNotNil: [ self halt.tmp1 valueWithArguments: (Array with: self) , arg2 ]',			#stamp : 'pm 11/3/2018 11:28',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-03T11:32:24.839204+01:00' ],		#prior : OmReference [ '20' ],		#self : OmReference [ '21' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #'basicSend:withArguments:from:',			#protocol : #'message passing',			#sourceCode : 'basicSend: arg1 withArguments: arg2 from: arg3\r\t| tmp1 |\r\ttmp1 := arg3 lookup: arg1.\r\t^ tmp1\r\t\tifNil: [ self sendError: arg1 withArgs: arg2 ]\r\t\tifNotNil: [ self halt.tmp1 valueWithArguments: (Array with: self) , arg2 ]',			#stamp : 'pm 11/3/2018 11:28',			#package : #ObjVSkeleton		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #'basicSend:withArguments:from:',			#protocol : #'message passing',			#sourceCode : 'basicSend: arg1 withArguments: arg2 from: arg3\r\t| tmp1 |\r\ttmp1 := arg3 lookup: arg1.\r\t^ tmp1\r\t\tifNil: [ self sendError: arg1 withArgs: arg2 ]\r\t\tifNotNil: [ Transcript show:tmp1;cr.tmp1 valueWithArguments: (Array with: self) , arg2 ]',			#stamp : 'pm 11/3/2018 11:32',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-03T11:34:36.123197+01:00' ],		#prior : OmReference [ '21' ],		#self : OmReference [ '22' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #'basicSend:withArguments:from:',			#protocol : #'message passing',			#sourceCode : 'basicSend: arg1 withArguments: arg2 from: arg3\r\t| tmp1 |\r\ttmp1 := arg3 lookup: arg1.\r\t^ tmp1\r\t\tifNil: [ self sendError: arg1 withArgs: arg2 ]\r\t\tifNotNil: [ Transcript show:tmp1;cr.tmp1 valueWithArguments: (Array with: self) , arg2 ]',			#stamp : 'pm 11/3/2018 11:32',			#package : #ObjVSkeleton		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #'basicSend:withArguments:from:',			#protocol : #'message passing',			#sourceCode : 'basicSend: arg1 withArguments: arg2 from: arg3\r\t| tmp1 |\r\ttmp1 := arg3 lookup: arg1.\r\t^ tmp1\r\t\tifNil: [ self sendError: arg1 withArgs: arg2 ]\r\t\tifNotNil: [ tmp1 valueWithArguments: (Array with: self) , arg2 ]',			#stamp : 'pm 11/3/2018 11:34',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-03T11:34:55.840673+01:00' ],		#prior : OmReference [ '22' ],		#self : OmReference [ '23' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #'send:withArguments:',			#protocol : #'message passing',			#sourceCode : 'send: arg1 withArguments: arg2\r\t"or is it?"\r\t^self basicSend: arg1 withArguments: arg2 from: (self objClass).',			#stamp : 'pm 11/2/2018 17:10',			#package : #ObjVSkeleton		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #'send:withArguments:',			#protocol : #'message passing',			#sourceCode : 'send: arg1 withArguments: arg2\r\t"or is it?"\r\tself halt.\r\t^self basicSend: arg1 withArguments: arg2 from: (self objClass).',			#stamp : 'pm 11/3/2018 11:34',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-03T18:55:33.079546+01:00' ],		#prior : OmReference [ '23' ],		#self : OmReference [ '24' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #'send:withArguments:',			#protocol : #'message passing',			#sourceCode : 'send: arg1 withArguments: arg2\r\t"or is it?"\r\tself halt.\r\t^self basicSend: arg1 withArguments: arg2 from: (self objClass).',			#stamp : 'pm 11/3/2018 11:34',			#package : #ObjVSkeleton		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #'send:withArguments:',			#protocol : #'message passing',			#sourceCode : 'send: arg1 withArguments: arg2\r\t"or is it?"\r\t^self basicSend: arg1 withArguments: arg2 from: (self objClass).',			#stamp : 'pm 11/3/2018 18:55',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-03T18:56:06.752597+01:00' ],		#prior : OmReference [ '24' ],		#self : OmReference [ '25' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #allocateAnInstance,			#protocol : #'instance allocation',			#sourceCode : 'allocateAnInstance\r\t| tmp1 tmp2 |\r\ttmp1 := self class new: self numberOfIVs.\r\ttmp1 at: 1 put: self objName.\r\ttmp2 := self numberOfIVs.\r\t2 to: tmp2 do: [ :tmp3 | tmp1 at: tmp3 put: nil ].\r\t^ tmp1',			#stamp : '',			#package : #ObjVSkeleton		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #allocateAnInstance,			#protocol : #'instance allocation',			#sourceCode : 'allocateAnInstance\r\t| tmp1 tmp2 |\r\ttmp1 := self class new: self numberOfIVs.\r\ttmp1 at: (self offsetForName) put: self objName.\r\ttmp2 := self numberOfIVs.\r\t2 to: tmp2 do: [ :tmp3 | tmp1 at: tmp3 put: nil ].\r\t^ tmp1',			#stamp : 'pm 11/3/2018 18:56',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-03T18:58:34.010626+01:00' ],		#prior : OmReference [ '25' ],		#self : OmReference [ '26' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #allocateAnInstance,			#protocol : #'instance allocation',			#sourceCode : 'allocateAnInstance\r\t| tmp1 tmp2 |\r\ttmp1 := self class new: self numberOfIVs.\r\ttmp1 at: (self offsetForName) put: self objName.\r\ttmp2 := self numberOfIVs.\r\t2 to: tmp2 do: [ :tmp3 | tmp1 at: tmp3 put: nil ].\r\t^ tmp1',			#stamp : 'pm 11/3/2018 18:56',			#package : #ObjVSkeleton		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #allocateAnInstance,			#protocol : #'instance allocation',			#sourceCode : 'allocateAnInstance\r\t| tmp1 tmp2 |\r\ttmp1 := (self class) new: self numberOfIVs.\r\ttmp1 at: (self offsetForName) put: (self objName).\r\ttmp2 := self numberOfIVs.\r\t2 to: tmp2 do: [ :tmp3 | tmp1 at: tmp3 put: nil ].\r\t^ tmp1',			#stamp : 'pm 11/3/2018 18:58',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-03T19:01:01.340743+01:00' ],		#prior : OmReference [ '26' ],		#self : OmReference [ '27' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #'sendError:withArgs:',			#protocol : #'message passing',			#sourceCode : 'sendError: arg1 withArgs: arg2\r\t^ self send: #error withArguments: {(arg2 copyWithFirst: arg1)}',			#stamp : 'pm 11/3/2018 11:26',			#package : #ObjVSkeleton		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #'sendError:withArgs:',			#protocol : #'message passing',			#sourceCode : 'sendError: arg1 withArgs: arg2\r\tself halt.\r\t^ self send: #error withArguments: {(arg2 copyWithFirst: arg1)}',			#stamp : 'pm 11/3/2018 19:01',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-03T19:01:21.441862+01:00' ],		#prior : OmReference [ '27' ],		#self : OmReference [ '28' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #'sendError:withArgs:',			#protocol : #'message passing',			#sourceCode : 'sendError: arg1 withArgs: arg2\r\tself halt.\r\t^ self send: #error withArguments: {(arg2 copyWithFirst: arg1)}',			#stamp : 'pm 11/3/2018 19:01',			#package : #ObjVSkeleton		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #'sendError:withArgs:',			#protocol : #'message passing',			#sourceCode : 'sendError: arg1 withArgs: arg2\r\t^ self send: #error withArguments: {(arg2 copyWithFirst: arg1)}',			#stamp : 'pm 11/3/2018 19:01',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-03T19:01:52.159707+01:00' ],		#prior : OmReference [ '28' ],		#self : OmReference [ '29' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #allocateAnInstance,			#protocol : #'instance allocation',			#sourceCode : 'allocateAnInstance\r\t| tmp1 tmp2 |\r\ttmp1 := (self class) new: self numberOfIVs.\r\ttmp1 at: (self offsetForName) put: (self objName).\r\ttmp2 := self numberOfIVs.\r\t2 to: tmp2 do: [ :tmp3 | tmp1 at: tmp3 put: nil ].\r\t^ tmp1',			#stamp : 'pm 11/3/2018 18:58',			#package : #ObjVSkeleton		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #allocateAnInstance,			#protocol : #'instance allocation',			#sourceCode : 'allocateAnInstance\r\t| tmp1 tmp2 |\r\ttmp1 := (self class) new: self numberOfIVs.\r\ttmp1 at: 1 put: (self objName).\r\ttmp2 := self numberOfIVs.\r\t2 to: tmp2 do: [ :tmp3 | tmp1 at: tmp3 put: nil ].\r\t^ tmp1',			#stamp : 'pm 11/3/2018 19:01',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-03T19:04:43.833227+01:00' ],		#prior : OmReference [ '29' ],		#self : OmReference [ '30' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #allocateAnInstance,			#protocol : #'instance allocation',			#sourceCode : 'allocateAnInstance\r\t| tmp1 tmp2 |\r\ttmp1 := (self class) new: self numberOfIVs.\r\ttmp1 at: 1 put: (self objName).\r\ttmp2 := self numberOfIVs.\r\t2 to: tmp2 do: [ :tmp3 | tmp1 at: tmp3 put: nil ].\r\t^ tmp1',			#stamp : 'pm 11/3/2018 19:01',			#package : #ObjVSkeleton		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #allocateAnInstance,			#protocol : #'instance allocation',			#sourceCode : 'allocateAnInstance\r\t| tmp1 tmp2 |\r\ttmp1 := (self class) new: self numberOfIVs.\r\ttmp1 at: 1 put: (self objName).\r\ttmp2 := self numberOfIVs.\r\t2 to: tmp2 do: [ :tmp3 | tmp1 at: tmp3 put: nil ].\r\tself halt.\r\t^ tmp1',			#stamp : 'pm 11/3/2018 19:04',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-03T19:08:18.794061+01:00' ],		#prior : OmReference [ '30' ],		#self : OmReference [ '31' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #allocateAnInstance,			#protocol : #'instance allocation',			#sourceCode : 'allocateAnInstance\r\t| tmp1 tmp2 |\r\ttmp1 := (self class) new: self numberOfIVs.\r\ttmp1 at: 1 put: (self objName).\r\ttmp2 := self numberOfIVs.\r\t2 to: tmp2 do: [ :tmp3 | tmp1 at: tmp3 put: nil ].\r\tself halt.\r\t^ tmp1',			#stamp : 'pm 11/3/2018 19:04',			#package : #ObjVSkeleton		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #allocateAnInstance,			#protocol : #'instance allocation',			#sourceCode : 'allocateAnInstance\r\t| tmp1 size |\r\tsize := self numberOfIVs.\r\ttmp1 := (self class) new: size.\r\ttmp1 at: 1 put: (self objName).\r\t2 to: size do: [ :tmp3 | tmp1 at: tmp3 put: nil ].\r\t^ tmp1',			#stamp : 'pm 11/3/2018 19:08',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-03T19:24:32.550839+01:00' ],		#prior : OmReference [ '31' ],		#self : OmReference [ '32' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #'send:withArguments:',			#protocol : #'message passing',			#sourceCode : 'send: arg1 withArguments: arg2\r\t"or is it?"\r\t^self basicSend: arg1 withArguments: arg2 from: (self objClass).',			#stamp : 'pm 11/3/2018 18:55',			#package : #ObjVSkeleton		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #'send:withArguments:',			#protocol : #'message passing',			#sourceCode : 'send: arg1 withArguments: arg2\r\t"or is it?"\r\t^self basicSend: arg1 withArguments: arg2 from: self.',			#stamp : 'pm 11/3/2018 19:24',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-03T19:26:04.431627+01:00' ],		#prior : OmReference [ '32' ],		#self : OmReference [ '33' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #'basicSend:withArguments:from:',			#protocol : #'message passing',			#sourceCode : 'basicSend: arg1 withArguments: arg2 from: arg3\r\t| tmp1 |\r\ttmp1 := arg3 lookup: arg1.\r\t^ tmp1\r\t\tifNil: [ self sendError: arg1 withArgs: arg2 ]\r\t\tifNotNil: [ tmp1 valueWithArguments: (Array with: self) , arg2 ]',			#stamp : 'pm 11/3/2018 11:34',			#package : #ObjVSkeleton		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #'basicSend:withArguments:from:',			#protocol : #'message passing',			#sourceCode : 'basicSend: arg1 withArguments: arg2 from: arg3\r\t| tmp1 |\r\ttmp1 := arg3 lookup: arg1.\r\t^tmp1\r\t\tifNil: [ self sendError: arg1 withArgs: arg2 ]\r\t\tifNotNil: [ tmp1 valueWithArguments: (Array with: self) , arg2 ]',			#stamp : 'pm 11/3/2018 19:26',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-03T19:26:13.876084+01:00' ],		#prior : OmReference [ '33' ],		#self : OmReference [ '34' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #'send:withArguments:',			#protocol : #'message passing',			#sourceCode : 'send: arg1 withArguments: arg2\r\t"or is it?"\r\t^self basicSend: arg1 withArguments: arg2 from: self.',			#stamp : 'pm 11/3/2018 19:24',			#package : #ObjVSkeleton		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #'send:withArguments:',			#protocol : #'message passing',			#sourceCode : 'send: arg1 withArguments: arg2\r\t"or is it?"\r\t^self basicSend: arg1 withArguments: arg2 from: (self objClass).',			#stamp : 'pm 11/3/2018 19:26',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-03T19:27:20.946066+01:00' ],		#prior : OmReference [ '34' ],		#self : OmReference [ '35' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #'super:withArguments:from:',			#protocol : #'message passing',			#sourceCode : 'super: arg1 withArguments: arg2 from: arg3\r\t',			#stamp : '',			#package : #ObjVSkeleton		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #'super:withArguments:from:',			#protocol : #'message passing',			#sourceCode : 'super: arg1 withArguments: arg2 from: arg3\r\tself halt.',			#stamp : 'pm 11/3/2018 19:27',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-03T19:27:24.178278+01:00' ],		#prior : OmReference [ '35' ],		#self : OmReference [ '36' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #'super:withArguments:from:',			#protocol : #'message passing',			#sourceCode : 'super: arg1 withArguments: arg2 from: arg3\r\tself halt.',			#stamp : 'pm 11/3/2018 19:27',			#package : #ObjVSkeleton		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #'super:withArguments:from:',			#protocol : #'message passing',			#sourceCode : 'super: arg1 withArguments: arg2 from: arg3\r\tself halt.\r\t^self',			#stamp : 'pm 11/3/2018 19:27',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-03T19:28:50.382189+01:00' ],		#prior : OmReference [ '36' ],		#self : OmReference [ '37' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #'super:withArguments:from:',			#protocol : #'message passing',			#sourceCode : 'super: arg1 withArguments: arg2 from: arg3\r\tself halt.\r\t^self',			#stamp : 'pm 11/3/2018 19:27',			#package : #ObjVSkeleton		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #'super:withArguments:from:',			#protocol : #'message passing',			#sourceCode : 'super: arg1 withArguments: arg2 from: arg3\r\r\t^self',			#stamp : 'pm 11/3/2018 19:28',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-03T19:31:31.50634+01:00' ],		#prior : OmReference [ '37' ],		#self : OmReference [ '38' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #'sendError:withArgs:',			#protocol : #'message passing',			#sourceCode : 'sendError: arg1 withArgs: arg2\r\t^ self send: #error withArguments: {(arg2 copyWithFirst: arg1)}',			#stamp : 'pm 11/3/2018 19:01',			#package : #ObjVSkeleton		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #'sendError:withArgs:',			#protocol : #'message passing',			#sourceCode : 'sendError: arg1 withArgs: arg2\r\tself halt.\r\t^ self send: #error withArguments: {(arg2 copyWithFirst: arg1)}',			#stamp : 'pm 11/3/2018 19:31',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-03T19:37:10.42572+01:00' ],		#prior : OmReference [ '38' ],		#self : OmReference [ '39' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #'lookup:',			#protocol : #'method lookup',			#sourceCode : 'lookup: arg1\r\t"question, do we have to search in metaclass aswell?\r\tanswer might be later in the tutorial"\r\r\t| Method Super|\r\r\tMethod:=self bodyOfMethod:arg1.\r\tMethod isNil\r\tifFalse:[\r\t\t^Method."we found a corresponding selector"\r\t\t].\r\t"else"\r\t"we do the lookup in the superclass."\r\t((self objSuperclassId) isNil) "if we don\'t have a super class, we fail."\r\tifTrue:[\r\t\t^nil.\r\t\t].\r\r\tSuper:=self objSuperclass.\r\tSuper==self\r\tifTrue:[\r\t\t^nil\r\t\t].\r\t^Super lookup:arg1.\r\t\t\r\r',			#stamp : 'pm 11/3/2018 19:36',			#package : #ObjVSkeleton		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #'lookup:',			#protocol : #'method lookup',			#sourceCode : 'lookup: arg1\r\t"question, do we have to search in metaclass aswell?\r\tanswer might be later in the tutorial"\r\r\t| Method Super|\r\r\tMethod:=self bodyOfMethod:arg1.\r\tMethod isNil\r\tifFalse:[\r\t\t^Method."we found a corresponding selector"\r\t\t].\r\t"else"\r\t"we do the lookup in the superclass."\r\tSuper:=self objSuperclass.\r\t(Super isNil) "if we don\'t have a super class, we fail."\r\tifTrue:[\r\t\t^nil.\r\t\t].\r\r\r\tSuper==self\r\tifTrue:[\r\t\t^nil\r\t\t].\r\t^Super lookup:arg1.\r\t\t\r\r',			#stamp : 'pm 11/3/2018 19:37',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-03T19:37:12.718225+01:00' ],		#prior : OmReference [ '39' ],		#self : OmReference [ '40' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #'lookup:',			#protocol : #'method lookup',			#sourceCode : 'lookup: arg1\r\t"question, do we have to search in metaclass aswell?\r\tanswer might be later in the tutorial"\r\r\t| Method Super|\r\r\tMethod:=self bodyOfMethod:arg1.\r\tMethod isNil\r\tifFalse:[\r\t\t^Method."we found a corresponding selector"\r\t\t].\r\t"else"\r\t"we do the lookup in the superclass."\r\tSuper:=self objSuperclass.\r\t(Super isNil) "if we don\'t have a super class, we fail."\r\tifTrue:[\r\t\t^nil.\r\t\t].\r\r\r\tSuper==self\r\tifTrue:[\r\t\t^nil\r\t\t].\r\t^Super lookup:arg1.\r\t\t\r\r',			#stamp : 'pm 11/3/2018 19:37',			#package : #ObjVSkeleton		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #'lookup:',			#protocol : #'method lookup',			#sourceCode : 'lookup: arg1\r\t"question, do we have to search in metaclass aswell?\r\tanswer might be later in the tutorial"\r\r\t| Method Super|\r\r\tMethod:=self bodyOfMethod:arg1.\r\tMethod isNil\r\tifFalse:[\r\t\t^Method."we found a corresponding selector"\r\t\t].\r\t"else"\r\t"we do the lookup in the superclass."\r\tSuper:=self objSuperclass.\r\t(Super isNil) "if we don\'t have a super class, we fail."\r\tifTrue:[\r\t\t^nil.\r\t\t].\r\r\tSuper==self\r\tifTrue:[\r\t\t^nil\r\t\t].\r\t^Super lookup:arg1.\r\t\t\r\r',			#stamp : 'pm 11/3/2018 19:37',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-03T19:39:50.920821+01:00' ],		#prior : OmReference [ '40' ],		#self : OmReference [ '41' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #'lookup:',			#protocol : #'method lookup',			#sourceCode : 'lookup: arg1\r\t"question, do we have to search in metaclass aswell?\r\tanswer might be later in the tutorial"\r\r\t| Method Super|\r\r\tMethod:=self bodyOfMethod:arg1.\r\tMethod isNil\r\tifFalse:[\r\t\t^Method."we found a corresponding selector"\r\t\t].\r\t"else"\r\t"we do the lookup in the superclass."\r\tSuper:=self objSuperclass.\r\t(Super isNil) "if we don\'t have a super class, we fail."\r\tifTrue:[\r\t\t^nil.\r\t\t].\r\r\tSuper==self\r\tifTrue:[\r\t\t^nil\r\t\t].\r\t^Super lookup:arg1.\r\t\t\r\r',			#stamp : 'pm 11/3/2018 19:37',			#package : #ObjVSkeleton		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #'lookup:',			#protocol : #'method lookup',			#sourceCode : 'lookup: arg1\r\t"question, do we have to search in metaclass aswell?\r\tanswer might be later in the tutorial"\r\r\t| Method Super|\r\r\tMethod:=self bodyOfMethod:arg1.\r\tMethod isNil\r\tifFalse:[\r\t\t^Method."we found a corresponding selector"\r\t\t].\r\t"else"\r\t"we do the lookup in the superclass."\r\tSuper:=self objSuperclass.\r\t(self objSuperclass isNil or:[Super==self]) "if we don\'t have a super class, we fail."\r\tifTrue:[\r\t\t^nil.\r\t\t].\r\t^Super lookup:arg1.\r\t\t\r\r',			#stamp : 'pm 11/3/2018 19:39',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-03T19:39:53.720646+01:00' ],		#prior : OmReference [ '41' ],		#self : OmReference [ '42' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #'lookup:',			#protocol : #'method lookup',			#sourceCode : 'lookup: arg1\r\t"question, do we have to search in metaclass aswell?\r\tanswer might be later in the tutorial"\r\r\t| Method Super|\r\r\tMethod:=self bodyOfMethod:arg1.\r\tMethod isNil\r\tifFalse:[\r\t\t^Method."we found a corresponding selector"\r\t\t].\r\t"else"\r\t"we do the lookup in the superclass."\r\tSuper:=self objSuperclass.\r\t(self objSuperclass isNil or:[Super==self]) "if we don\'t have a super class, we fail."\r\tifTrue:[\r\t\t^nil.\r\t\t].\r\t^Super lookup:arg1.\r\t\t\r\r',			#stamp : 'pm 11/3/2018 19:39',			#package : #ObjVSkeleton		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #'lookup:',			#protocol : #'method lookup',			#sourceCode : 'lookup: arg1\r\t"question, do we have to search in metaclass aswell?\r\tanswer might be later in the tutorial"\r\r\t| Method Super|\r\r\tMethod:=self bodyOfMethod:arg1.\r\tMethod isNil\r\tifFalse:[\r\t\t^Method."we found a corresponding selector"\r\t\t].\r\t"else"\r\t"we do the lookup in the superclass."\r\tSuper:=self objSuperclass.\r\t(self objSuperclass isNil or:[Super==self]) "if we don\'t have a super class, we fail."\r\tifTrue:[\r\t\t^nil.\r\t\t].\r\t\r\t^Super lookup:arg1.\r\t\t\r\r',			#stamp : 'pm 11/3/2018 19:39',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-03T19:41:50.612899+01:00' ],		#prior : OmReference [ '42' ],		#self : OmReference [ '43' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #'lookup:',			#protocol : #'method lookup',			#sourceCode : 'lookup: arg1\r\t"question, do we have to search in metaclass aswell?\r\tanswer might be later in the tutorial"\r\r\t| Method Super|\r\r\tMethod:=self bodyOfMethod:arg1.\r\tMethod isNil\r\tifFalse:[\r\t\t^Method."we found a corresponding selector"\r\t\t].\r\t"else"\r\t"we do the lookup in the superclass."\r\tSuper:=self objSuperclass.\r\t(self objSuperclass isNil or:[Super==self]) "if we don\'t have a super class, we fail."\r\tifTrue:[\r\t\t^nil.\r\t\t].\r\t\r\t^Super lookup:arg1.\r\t\t\r\r',			#stamp : 'pm 11/3/2018 19:39',			#package : #ObjVSkeleton		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #'lookup:',			#protocol : #'method lookup',			#sourceCode : 'lookup: arg1\r\t"question, do we have to search in metaclass aswell?\r\tanswer might be later in the tutorial"\r\r\t| Method Super|\r\r\tMethod:=self bodyOfMethod:arg1.\r\tMethod isNil\r\tifFalse:[\r\t\t^Method."we found a corresponding selector"\r\t\t].\r\t"else"\r\t"we do the lookup in the superclass."\r\tSuper:=self objSuperclassId.\r\t(Super~=nil or:[Super==self]) "if we don\'t have a super class, we fail."\r\tifTrue:[\r\t\t^nil.\r\t\t].\r\t^Super lookup:arg1.\r\t\t\r\r',			#stamp : 'pm 11/3/2018 19:41',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-03T19:42:00.410644+01:00' ],		#prior : OmReference [ '43' ],		#self : OmReference [ '44' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #'lookup:',			#protocol : #'method lookup',			#sourceCode : 'lookup: arg1\r\t"question, do we have to search in metaclass aswell?\r\tanswer might be later in the tutorial"\r\r\t| Method Super|\r\r\tMethod:=self bodyOfMethod:arg1.\r\tMethod isNil\r\tifFalse:[\r\t\t^Method."we found a corresponding selector"\r\t\t].\r\t"else"\r\t"we do the lookup in the superclass."\r\tSuper:=self objSuperclassId.\r\t(Super~=nil or:[Super==self]) "if we don\'t have a super class, we fail."\r\tifTrue:[\r\t\t^nil.\r\t\t].\r\t^Super lookup:arg1.\r\t\t\r\r',			#stamp : 'pm 11/3/2018 19:41',			#package : #ObjVSkeleton		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #'lookup:',			#protocol : #'method lookup',			#sourceCode : 'lookup: arg1\r\t"question, do we have to search in metaclass aswell?\r\tanswer might be later in the tutorial"\r\r\t| Method Super|\r\r\tMethod:=self bodyOfMethod:arg1.\r\tMethod isNil\r\tifFalse:[\r\t\t^Method."we found a corresponding selector"\r\t\t].\r\t"else"\r\t"we do the lookup in the superclass."\r\tSuper:=self objSuperclassId.\r\t(Super~=#nil or:[Super==self]) "if we don\'t have a super class, we fail."\r\tifTrue:[\r\t\t^nil.\r\t\t].\r\t^Super lookup:arg1.\r\t\t\r\r',			#stamp : 'pm 11/3/2018 19:42',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-03T19:42:44.232554+01:00' ],		#prior : OmReference [ '44' ],		#self : OmReference [ '45' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #'sendError:withArgs:',			#protocol : #'message passing',			#sourceCode : 'sendError: arg1 withArgs: arg2\r\tself halt.\r\t^ self send: #error withArguments: {(arg2 copyWithFirst: arg1)}',			#stamp : 'pm 11/3/2018 19:31',			#package : #ObjVSkeleton		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #'sendError:withArgs:',			#protocol : #'message passing',			#sourceCode : 'sendError: arg1 withArgs: arg2\r\t^ self send: #error withArguments: {(arg2 copyWithFirst: arg1)}',			#stamp : 'pm 11/3/2018 19:42',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-03T19:43:30.980671+01:00' ],		#prior : OmReference [ '45' ],		#self : OmReference [ '46' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #'lookup:',			#protocol : #'method lookup',			#sourceCode : 'lookup: arg1\r\t"question, do we have to search in metaclass aswell?\r\tanswer might be later in the tutorial"\r\r\t| Method Super|\r\r\tMethod:=self bodyOfMethod:arg1.\r\tMethod isNil\r\tifFalse:[\r\t\t^Method."we found a corresponding selector"\r\t\t].\r\t"else"\r\t"we do the lookup in the superclass."\r\tSuper:=self objSuperclassId.\r\t(Super~=#nil or:[Super==self]) "if we don\'t have a super class, we fail."\r\tifTrue:[\r\t\t^nil.\r\t\t].\r\t^Super lookup:arg1.\r\t\t\r\r',			#stamp : 'pm 11/3/2018 19:42',			#package : #ObjVSkeleton		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #'lookup:',			#protocol : #'method lookup',			#sourceCode : 'lookup: arg1\r\t"question, do we have to search in metaclass aswell?\r\tanswer might be later in the tutorial"\r\r\t| Method Super|\r\r\tMethod:=self bodyOfMethod:arg1.\r\tMethod isNil\r\tifFalse:[\r\t\t^Method."we found a corresponding selector"\r\t\t].\r\t"else"\r\t"we do the lookup in the superclass."\r\tSuper:=self objSuperclassId.\r\t(Super~=#nil or:[self objSuperclassId==self]) "if we don\'t have a super class, we fail."\r\tifTrue:[\r\t\t^nil.\r\t\t].\r\t^Super lookup:arg1.\r\t\t\r\r',			#stamp : 'pm 11/3/2018 19:43',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-03T19:55:20.415698+01:00' ],		#prior : OmReference [ '46' ],		#self : OmReference [ '47' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #'lookup:',			#protocol : #'method lookup',			#sourceCode : 'lookup: arg1\r\t"question, do we have to search in metaclass aswell?\r\tanswer might be later in the tutorial"\r\r\t| Method Super|\r\r\tMethod:=self bodyOfMethod:arg1.\r\tMethod isNil\r\tifFalse:[\r\t\t^Method."we found a corresponding selector"\r\t\t].\r\t"else"\r\t"we do the lookup in the superclass."\r\tSuper:=self objSuperclassId.\r\t(Super~=#nil or:[self objSuperclassId==self]) "if we don\'t have a super class, we fail."\r\tifTrue:[\r\t\t^nil.\r\t\t].\r\t^Super lookup:arg1.\r\t\t\r\r',			#stamp : 'pm 11/3/2018 19:43',			#package : #ObjVSkeleton		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #'lookup:',			#protocol : #'method lookup',			#sourceCode : 'lookup: arg1\r\t"question, do we have to search in metaclass aswell?\r\tanswer might be later in the tutorial"\r\r\t| Method Super|\r\r\tMethod:=self bodyOfMethod:arg1.\r\tMethod isNil\r\tifFalse:[\r\t\t^Method."we found a corresponding selector"\r\t\t].\r\t"else"\r\t"we do the lookup in the superclass."\r\tSuper:=self objSuperclassId.\r\tTranscript show: Super.\r\tself halt.\r\t(Super~=#nil or:[self objSuperclassId==self]) "if we don\'t have a super class, we fail."\r\tifTrue:[\r\t\t^nil.\r\t\t].\r\t^Super lookup:arg1.\r\t\t\r\r',			#stamp : 'pm 11/3/2018 19:55',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-03T19:56:19.726051+01:00' ],		#prior : OmReference [ '47' ],		#self : OmReference [ '48' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #'lookup:',			#protocol : #'method lookup',			#sourceCode : 'lookup: arg1\r\t"question, do we have to search in metaclass aswell?\r\tanswer might be later in the tutorial"\r\r\t| Method Super|\r\r\tMethod:=self bodyOfMethod:arg1.\r\tMethod isNil\r\tifFalse:[\r\t\t^Method."we found a corresponding selector"\r\t\t].\r\t"else"\r\t"we do the lookup in the superclass."\r\tSuper:=self objSuperclassId.\r\tTranscript show: Super.\r\tself halt.\r\t(Super~=#nil or:[self objSuperclassId==self]) "if we don\'t have a super class, we fail."\r\tifTrue:[\r\t\t^nil.\r\t\t].\r\t^Super lookup:arg1.\r\t\t\r\r',			#stamp : 'pm 11/3/2018 19:55',			#package : #ObjVSkeleton		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #'lookup:',			#protocol : #'method lookup',			#sourceCode : 'lookup: arg1\r\t"question, do we have to search in metaclass aswell?\r\tanswer might be later in the tutorial"\r\r\t| Method Super|\r\r\tMethod:=self bodyOfMethod:arg1.\r\tMethod isNil\r\tifFalse:[\r\t\t^Method."we found a corresponding selector"\r\t\t].\r\t"else"\r\t"we do the lookup in the superclass."\r\tSuper:=self objSuperclassId.\r\tTranscript show: Super.\r\tself halt.\r\t(Super~=#nil or:[self objSuperclass==self]) "if we don\'t have a super class, we fail."\r\tifTrue:[\r\t\t^nil.\r\t\t].\r\t^Super lookup:arg1.\r\t\t\r\r',			#stamp : 'pm 11/3/2018 19:56',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-03T20:07:57.530638+01:00' ],		#prior : OmReference [ '48' ],		#self : OmReference [ '49' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #'lookup:',			#protocol : #'method lookup',			#sourceCode : 'lookup: arg1\r\t"question, do we have to search in metaclass aswell?\r\tanswer might be later in the tutorial"\r\r\t| Method Super|\r\r\tMethod:=self bodyOfMethod:arg1.\r\tMethod isNil\r\tifFalse:[\r\t\t^Method."we found a corresponding selector"\r\t\t].\r\t"else"\r\t"we do the lookup in the superclass."\r\tSuper:=self objSuperclassId.\r\tTranscript show: Super.\r\tself halt.\r\t(Super~=#nil or:[self objSuperclass==self]) "if we don\'t have a super class, we fail."\r\tifTrue:[\r\t\t^nil.\r\t\t].\r\t^Super lookup:arg1.\r\t\t\r\r',			#stamp : 'pm 11/3/2018 19:56',			#package : #ObjVSkeleton		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #'lookup:',			#protocol : #'method lookup',			#sourceCode : 'lookup: arg1\r\t"question, do we have to search in metaclass aswell?\r\tanswer might be later in the tutorial"\r\r\t| Method Super|\r\r\tMethod:=self bodyOfMethod:arg1.\r\tMethod isNil\r\tifFalse:[\r\t\t^Method."we found a corresponding selector"\r\t\t].\r\t"else"\r\t"we do the lookup in the superclass."\r\tSuper:=self objSuperclassId.\r\tTranscript show: Super;cr.\r\tself halt.\r\t(Super~=#nil or:[self objSuperclass==self]) "if we don\'t have a super class, we fail."\r\tifTrue:[\r\t\t^nil.\r\t\t].\r\t^Super lookup:arg1.\r\t\t\r\r',			#stamp : 'pm 11/3/2018 20:07',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-03T20:08:41.446816+01:00' ],		#prior : OmReference [ '49' ],		#self : OmReference [ '50' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #'lookup:',			#protocol : #'method lookup',			#sourceCode : 'lookup: arg1\r\t"question, do we have to search in metaclass aswell?\r\tanswer might be later in the tutorial"\r\r\t| Method Super|\r\r\tMethod:=self bodyOfMethod:arg1.\r\tMethod isNil\r\tifFalse:[\r\t\t^Method."we found a corresponding selector"\r\t\t].\r\t"else"\r\t"we do the lookup in the superclass."\r\tSuper:=self objSuperclassId.\r\tTranscript show: Super;cr.\r\tself halt.\r\t(Super~=#nil or:[self objSuperclass==self]) "if we don\'t have a super class, we fail."\r\tifTrue:[\r\t\t^nil.\r\t\t].\r\t^Super lookup:arg1.\r\t\t\r\r',			#stamp : 'pm 11/3/2018 20:07',			#package : #ObjVSkeleton		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #'lookup:',			#protocol : #'method lookup',			#sourceCode : 'lookup: arg1\r\t"question, do we have to search in metaclass aswell?\r\tanswer might be later in the tutorial"\r\r\t| Method Super|\r\r\tMethod:=self bodyOfMethod:arg1.\r\tMethod isNil\r\tifFalse:[\r\t\t^Method."we found a corresponding selector"\r\t\t].\r\t"else"\r\t"we do the lookup in the superclass."\r\tSuper:=self objSuperclass.\r\tTranscript show: Super;cr.\r\tself halt.\r\t(Super~=nil or:[self objSuperclass==self]) "if we don\'t have a super class, we fail."\r\tifTrue:[\r\t\t^nil.\r\t\t].\r\t^Super lookup:arg1.\r\t\t\r\r',			#stamp : 'pm 11/3/2018 20:08',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-03T20:12:00.788101+01:00' ],		#prior : OmReference [ '50' ],		#self : OmReference [ '51' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #'lookup:',			#protocol : #'method lookup',			#sourceCode : 'lookup: arg1\r\t"question, do we have to search in metaclass aswell?\r\tanswer might be later in the tutorial"\r\r\t| Method Super|\r\r\tMethod:=self bodyOfMethod:arg1.\r\tMethod isNil\r\tifFalse:[\r\t\t^Method."we found a corresponding selector"\r\t\t].\r\t"else"\r\t"we do the lookup in the superclass."\r\tSuper:=self objSuperclass.\r\tTranscript show: Super;cr.\r\tself halt.\r\t(Super~=nil or:[self objSuperclass==self]) "if we don\'t have a super class, we fail."\r\tifTrue:[\r\t\t^nil.\r\t\t].\r\t^Super lookup:arg1.\r\t\t\r\r',			#stamp : 'pm 11/3/2018 20:08',			#package : #ObjVSkeleton		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #'lookup:',			#protocol : #'method lookup',			#sourceCode : 'lookup: arg1\r\t"question, do we have to search in metaclass aswell?\r\tanswer might be later in the tutorial"\r\r\t| Method Super|\r\r\tMethod:=self bodyOfMethod:arg1.\r\tMethod isNil\r\tifFalse:[\r\t\t^Method."we found a corresponding selector"\r\t\t].\r\t"else"\r\t"we do the lookup in the superclass."\r\tSuper:=self objSuperclass.\r\tTranscript show: Super;cr;cr.\r\tself halt.\r\t(Super~=nil or:[self objSuperclass==self]) "if we don\'t have a super class, we fail."\r\tifTrue:[\r\t\t^nil.\r\t\t].\r\t^Super lookup:arg1.\r\t\t\r\r',			#stamp : 'pm 11/3/2018 20:12',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-03T20:12:30.7521+01:00' ],		#prior : OmReference [ '51' ],		#self : OmReference [ '52' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #'lookup:',			#protocol : #'method lookup',			#sourceCode : 'lookup: arg1\r\t"question, do we have to search in metaclass aswell?\r\tanswer might be later in the tutorial"\r\r\t| Method Super|\r\r\tMethod:=self bodyOfMethod:arg1.\r\tMethod isNil\r\tifFalse:[\r\t\t^Method."we found a corresponding selector"\r\t\t].\r\t"else"\r\t"we do the lookup in the superclass."\r\tSuper:=self objSuperclass.\r\tTranscript show: Super;cr;cr.\r\tself halt.\r\t(Super~=nil or:[self objSuperclass==self]) "if we don\'t have a super class, we fail."\r\tifTrue:[\r\t\t^nil.\r\t\t].\r\t^Super lookup:arg1.\r\t\t\r\r',			#stamp : 'pm 11/3/2018 20:12',			#package : #ObjVSkeleton		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #'lookup:',			#protocol : #'method lookup',			#sourceCode : 'lookup: arg1\r\t"question, do we have to search in metaclass aswell?\r\tanswer might be later in the tutorial"\r\r\t| Method Super|\r\r\tMethod:=self bodyOfMethod:arg1.\r\tMethod isNil\r\tifFalse:[\r\t\t^Method."we found a corresponding selector"\r\t\t].\r\t"else"\r\t"we do the lookup in the superclass."\r\tSuper:=self objSuperclass.\r\tTranscript show: Super;cr;cr.\r\tself halt.\r\t(Super~=nil or:[Super==self]) "if we don\'t have a super class, we fail."\r\tifTrue:[\r\t\t^nil.\r\t\t].\r\t^Super lookup:arg1.\r\t\t\r\r',			#stamp : 'pm 11/3/2018 20:12',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-03T20:12:53.257133+01:00' ],		#prior : OmReference [ '52' ],		#self : OmReference [ '53' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #'lookup:',			#protocol : #'method lookup',			#sourceCode : 'lookup: arg1\r\t"question, do we have to search in metaclass aswell?\r\tanswer might be later in the tutorial"\r\r\t| Method Super|\r\r\tMethod:=self bodyOfMethod:arg1.\r\tMethod isNil\r\tifFalse:[\r\t\t^Method."we found a corresponding selector"\r\t\t].\r\t"else"\r\t"we do the lookup in the superclass."\r\tSuper:=self objSuperclass.\r\tTranscript show: Super;cr;cr.\r\tself halt.\r\t(Super~=nil or:[Super==self]) "if we don\'t have a super class, we fail."\r\tifTrue:[\r\t\t^nil.\r\t\t].\r\t^Super lookup:arg1.\r\t\t\r\r',			#stamp : 'pm 11/3/2018 20:12',			#package : #ObjVSkeleton		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #'lookup:',			#protocol : #'method lookup',			#sourceCode : 'lookup: arg1\r\t"question, do we have to search in metaclass aswell?\r\tanswer might be later in the tutorial"\r\r\t| Method Super|\r\r\tMethod:=self bodyOfMethod:arg1.\r\tMethod isNil\r\tifFalse:[\r\t\t^Method."we found a corresponding selector"\r\t\t].\r\t"else"\r\t"we do the lookup in the superclass."\r\tSuper:=self objSuperclass.\r\tTranscript show: Super;cr;cr.\r\tself halt.\r\t(Super isNil or:[Super==self]) "if we don\'t have a super class, we fail."\r\tifTrue:[\r\t\t^nil.\r\t\t].\r\t^Super lookup:arg1.\r\t\t\r\r',			#stamp : 'pm 11/3/2018 20:12',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-03T20:13:23.325366+01:00' ],		#prior : OmReference [ '53' ],		#self : OmReference [ '54' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #'lookup:',			#protocol : #'method lookup',			#sourceCode : 'lookup: arg1\r\t"question, do we have to search in metaclass aswell?\r\tanswer might be later in the tutorial"\r\r\t| Method Super|\r\r\tMethod:=self bodyOfMethod:arg1.\r\tMethod isNil\r\tifFalse:[\r\t\t^Method."we found a corresponding selector"\r\t\t].\r\t"else"\r\t"we do the lookup in the superclass."\r\tSuper:=self objSuperclass.\r\tTranscript show: Super;cr;cr.\r\tself halt.\r\t(Super isNil or:[Super==self]) "if we don\'t have a super class, we fail."\r\tifTrue:[\r\t\t^nil.\r\t\t].\r\t^Super lookup:arg1.\r\t\t\r\r',			#stamp : 'pm 11/3/2018 20:12',			#package : #ObjVSkeleton		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #'lookup:',			#protocol : #'method lookup',			#sourceCode : 'lookup: arg1\r\t"question, do we have to search in metaclass aswell?\r\tanswer might be later in the tutorial"\r\r\t| Method Super|\r\r\tMethod:=self bodyOfMethod:arg1.\r\tMethod isNil\r\tifFalse:[\r\t\t^Method."we found a corresponding selector"\r\t\t].\r\t"else"\r\t"we do the lookup in the superclass."\r\tSuper:=self objSuperclass.\r\tTranscript show: Super;cr;cr.\r\t(Super isNil or:[Super==self]) "if we don\'t have a super class, we fail."\r\tifTrue:[\r\t\t^nil.\r\t\t].\r\t^Super lookup:arg1.\r\t\t\r\r',			#stamp : 'pm 11/3/2018 20:13',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-03T20:19:10.667098+01:00' ],		#prior : OmReference [ '54' ],		#self : OmReference [ '55' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #'lookup:',			#protocol : #'method lookup',			#sourceCode : 'lookup: arg1\r\t"question, do we have to search in metaclass aswell?\r\tanswer might be later in the tutorial"\r\r\t| Method Super|\r\r\tMethod:=self bodyOfMethod:arg1.\r\tMethod isNil\r\tifFalse:[\r\t\t^Method."we found a corresponding selector"\r\t\t].\r\t"else"\r\t"we do the lookup in the superclass."\r\tSuper:=self objSuperclass.\r\tTranscript show: Super;cr;cr.\r\t(Super isNil or:[Super==self]) "if we don\'t have a super class, we fail."\r\tifTrue:[\r\t\t^nil.\r\t\t].\r\t^Super lookup:arg1.\r\t\t\r\r',			#stamp : 'pm 11/3/2018 20:13',			#package : #ObjVSkeleton		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #'lookup:',			#protocol : #'method lookup',			#sourceCode : 'lookup: arg1\r\t"question, do we have to search in metaclass aswell?\r\tanswer might be later in the tutorial"\r\r\t| Method Super|\r\r\tMethod:=self bodyOfMethod:arg1.\r\tMethod isNil\r\tifFalse:[\r\t\t^Method."we found a corresponding selector"\r\t\t].\r\t"else"\r\t"we do the lookup in the superclass."\r\tSuper:=self objSuperclass.\r\tTranscript show: Super getClass ;cr;cr.\r\t(Super isNil or:[Super==self]) "if we don\'t have a super class, we fail."\r\tifTrue:[\r\t\t^nil.\r\t\t].\r\t^Super lookup:arg1.\r\t\t\r\r',			#stamp : 'pm 11/3/2018 20:19',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-03T20:20:10.333712+01:00' ],		#prior : OmReference [ '55' ],		#self : OmReference [ '56' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #'lookup:',			#protocol : #'method lookup',			#sourceCode : 'lookup: arg1\r\t"question, do we have to search in metaclass aswell?\r\tanswer might be later in the tutorial"\r\r\t| Method Super|\r\r\tMethod:=self bodyOfMethod:arg1.\r\tMethod isNil\r\tifFalse:[\r\t\t^Method."we found a corresponding selector"\r\t\t].\r\t"else"\r\t"we do the lookup in the superclass."\r\tSuper:=self objSuperclass.\r\tTranscript show: Super getClass ;cr;cr.\r\t(Super isNil or:[Super==self]) "if we don\'t have a super class, we fail."\r\tifTrue:[\r\t\t^nil.\r\t\t].\r\t^Super lookup:arg1.\r\t\t\r\r',			#stamp : 'pm 11/3/2018 20:19',			#package : #ObjVSkeleton		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #'lookup:',			#protocol : #'method lookup',			#sourceCode : 'lookup: arg1\r\t"question, do we have to search in metaclass aswell?\r\tanswer might be later in the tutorial"\r\r\t| Method Super|\r\r\tMethod:=self bodyOfMethod:arg1.\r\tMethod isNil\r\tifFalse:[\r\t\t^Method."we found a corresponding selector"\r\t\t].\r\t"else"\r\t"we do the lookup in the superclass."\r\tSuper:=self objSuperclass.\r\tTranscript show: Super ;cr;cr.\r\t(Super isNil or:[Super==self]) "if we don\'t have a super class, we fail."\r\tifTrue:[\r\t\t^nil.\r\t\t].\r\t^Super lookup:arg1.\r\t\t\r\r',			#stamp : 'pm 11/3/2018 20:20',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-03T20:21:34.379744+01:00' ],		#prior : OmReference [ '56' ],		#self : OmReference [ '57' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #'lookup:',			#protocol : #'method lookup',			#sourceCode : 'lookup: arg1\r\t"question, do we have to search in metaclass aswell?\r\tanswer might be later in the tutorial"\r\r\t| Method Super|\r\r\tMethod:=self bodyOfMethod:arg1.\r\tMethod isNil\r\tifFalse:[\r\t\t^Method."we found a corresponding selector"\r\t\t].\r\t"else"\r\t"we do the lookup in the superclass."\r\tSuper:=self objSuperclass.\r\tTranscript show: Super ;cr;cr.\r\t(Super isNil or:[Super==self]) "if we don\'t have a super class, we fail."\r\tifTrue:[\r\t\t^nil.\r\t\t].\r\t^Super lookup:arg1.\r\t\t\r\r',			#stamp : 'pm 11/3/2018 20:20',			#package : #ObjVSkeleton		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #'lookup:',			#protocol : #'method lookup',			#sourceCode : 'lookup: arg1\r\t"question, do we have to search in metaclass aswell?\r\tanswer might be later in the tutorial"\r\r\t| Method Super|\r\r\tMethod:=self bodyOfMethod:arg1.\r\tMethod isNil\r\tifFalse:[\r\t\t^Method."we found a corresponding selector"\r\t\t].\r\t"else"\r\t"we do the lookup in the superclass."\r\r\tTranscript show: Super ;cr;cr.\r\t(self objSuperclassId isNil or:[\tSuper:=self objSuperclass.Super==self]) "if we don\'t have a super class, we fail."\r\tifTrue:[\r\t\t^nil.\r\t\t].\r\t^Super lookup:arg1.\r\t\t\r\r',			#stamp : 'pm 11/3/2018 20:21',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'pm',		#time : DateAndTime [ '2018-11-03T20:24:32.049776+01:00' ],		#prior : OmReference [ '57' ],		#self : OmReference [ '58' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #'lookup:',			#protocol : #'method lookup',			#sourceCode : 'lookup: arg1\r\t"question, do we have to search in metaclass aswell?\r\tanswer might be later in the tutorial"\r\r\t| Method Super|\r\r\tMethod:=self bodyOfMethod:arg1.\r\tMethod isNil\r\tifFalse:[\r\t\t^Method."we found a corresponding selector"\r\t\t].\r\t"else"\r\t"we do the lookup in the superclass."\r\r\tTranscript show: Super ;cr;cr.\r\t(self objSuperclassId isNil or:[\tSuper:=self objSuperclass.Super==self]) "if we don\'t have a super class, we fail."\r\tifTrue:[\r\t\t^nil.\r\t\t].\r\t^Super lookup:arg1.\r\t\t\r\r',			#stamp : 'pm 11/3/2018 20:21',			#package : #ObjVSkeleton		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #'lookup:',			#protocol : #'method lookup',			#sourceCode : 'lookup: arg1\r\t"question, do we have to search in metaclass aswell?\r\tanswer might be later in the tutorial"\r\r\t| Method Super|\r\r\tMethod:=self bodyOfMethod:arg1.\r\tMethod isNil\r\tifFalse:[\r\t\t^Method."we found a corresponding selector"\r\t\t].\r\t"else"\r\t"we do the lookup in the superclass."\r\r\t(self objSuperclass isNil \r\t\tor:[Super:=self objSuperclass.\r\t\t\tSuper==self]) "if we don\'t have a super class, we fail."\r\tifTrue:[\r\t\t^nil.\r\t\t].\r\t^Super lookup:arg1.\r\t\t\r\r',			#stamp : 'pm 11/3/2018 20:24',			#package : #ObjVSkeleton		}	}}