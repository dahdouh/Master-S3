/**
 * generated by Xtext 2.10.0
 */
package org.xtext.example.mydsl.mymix.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.example.mydsl.mymix.MymixPackage;
import org.xtext.example.mydsl.mymix.Put;
import org.xtext.example.mydsl.mymix.PutSome;
import org.xtext.example.mydsl.mymix.Wait;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Put Some</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.mymix.impl.PutSomeImpl#getWait <em>Wait</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.mymix.impl.PutSomeImpl#getPut <em>Put</em>}</li>
 * </ul>
 *
 * @generated
 */
public class PutSomeImpl extends MinimalEObjectImpl.Container implements PutSome
{
  /**
   * The cached value of the '{@link #getWait() <em>Wait</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getWait()
   * @generated
   * @ordered
   */
  protected EList<Wait> wait;

  /**
   * The cached value of the '{@link #getPut() <em>Put</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPut()
   * @generated
   * @ordered
   */
  protected EList<Put> put;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected PutSomeImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MymixPackage.Literals.PUT_SOME;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Wait> getWait()
  {
    if (wait == null)
    {
      wait = new EObjectContainmentEList<Wait>(Wait.class, this, MymixPackage.PUT_SOME__WAIT);
    }
    return wait;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Put> getPut()
  {
    if (put == null)
    {
      put = new EObjectContainmentEList<Put>(Put.class, this, MymixPackage.PUT_SOME__PUT);
    }
    return put;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MymixPackage.PUT_SOME__WAIT:
        return ((InternalEList<?>)getWait()).basicRemove(otherEnd, msgs);
      case MymixPackage.PUT_SOME__PUT:
        return ((InternalEList<?>)getPut()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MymixPackage.PUT_SOME__WAIT:
        return getWait();
      case MymixPackage.PUT_SOME__PUT:
        return getPut();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MymixPackage.PUT_SOME__WAIT:
        getWait().clear();
        getWait().addAll((Collection<? extends Wait>)newValue);
        return;
      case MymixPackage.PUT_SOME__PUT:
        getPut().clear();
        getPut().addAll((Collection<? extends Put>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MymixPackage.PUT_SOME__WAIT:
        getWait().clear();
        return;
      case MymixPackage.PUT_SOME__PUT:
        getPut().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MymixPackage.PUT_SOME__WAIT:
        return wait != null && !wait.isEmpty();
      case MymixPackage.PUT_SOME__PUT:
        return put != null && !put.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //PutSomeImpl
