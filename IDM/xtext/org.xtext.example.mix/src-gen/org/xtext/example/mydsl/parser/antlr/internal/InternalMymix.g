/*
 * generated by Xtext 2.10.0
 */
grammar InternalMymix;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.example.mydsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.mydsl.services.MymixGrammarAccess;

}

@parser::members {

 	private MymixGrammarAccess grammarAccess;

    public InternalMymixParser(TokenStream input, MymixGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Device";
   	}

   	@Override
   	protected MymixGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleDevice
entryRuleDevice returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDeviceRule()); }
	iv_ruleDevice=ruleDevice
	{ $current=$iv_ruleDevice.current; }
	EOF;

// Rule Device
ruleDevice returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getDeviceAccess().getProceduresProcedureParserRuleCall_0());
			}
			lv_procedures_0_0=ruleProcedure
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getDeviceRule());
				}
				add(
					$current,
					"procedures",
					lv_procedures_0_0,
					"org.xtext.example.mydsl.Mymix.Procedure");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleProcedure
entryRuleProcedure returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProcedureRule()); }
	iv_ruleProcedure=ruleProcedure
	{ $current=$iv_ruleProcedure.current; }
	EOF;

// Rule Procedure
ruleProcedure returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='procedure'
		{
			newLeafNode(otherlv_0, grammarAccess.getProcedureAccess().getProcedureKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getProcedureAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getProcedureRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getProcedureAccess().getBodyOperationParserRuleCall_2_0());
				}
				lv_body_2_0=ruleOperation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProcedureRule());
					}
					add(
						$current,
						"body",
						lv_body_2_0,
						"org.xtext.example.mydsl.Mymix.Operation");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		(
			(
				{
					newCompositeNode(grammarAccess.getProcedureAccess().getResultResultParserRuleCall_3_0());
				}
				lv_result_3_0=ruleResult
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProcedureRule());
					}
					set(
						$current,
						"result",
						lv_result_3_0,
						"org.xtext.example.mydsl.Mymix.Result");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleOperation
entryRuleOperation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOperationRule()); }
	iv_ruleOperation=ruleOperation
	{ $current=$iv_ruleOperation.current; }
	EOF;

// Rule Operation
ruleOperation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getOperationAccess().getCheckParserRuleCall_0());
		}
		this_Check_0=ruleCheck
		{
			$current = $this_Check_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getOperationAccess().getWaitParserRuleCall_1());
		}
		this_Wait_1=ruleWait
		{
			$current = $this_Wait_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getOperationAccess().getTakeStuffParserRuleCall_2());
		}
		this_TakeStuff_2=ruleTakeStuff
		{
			$current = $this_TakeStuff_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleTakeStuff
entryRuleTakeStuff returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTakeStuffRule()); }
	iv_ruleTakeStuff=ruleTakeStuff
	{ $current=$iv_ruleTakeStuff.current; }
	EOF;

// Rule TakeStuff
ruleTakeStuff returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getTakeStuffAccess().getOpTakeParserRuleCall_0_0());
				}
				lv_op_0_0=ruleTake
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTakeStuffRule());
					}
					set(
						$current,
						"op",
						lv_op_0_0,
						"org.xtext.example.mydsl.Mymix.Take");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getTakeStuffAccess().getBodyPutSomeParserRuleCall_1_0_0());
					}
					lv_body_1_0=rulePutSome
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTakeStuffRule());
						}
						set(
							$current,
							"body",
							lv_body_1_0,
							"org.xtext.example.mydsl.Mymix.PutSome");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getTakeStuffAccess().getBodyPutAllParserRuleCall_1_1_0());
					}
					lv_body_2_0=rulePutAll
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTakeStuffRule());
						}
						set(
							$current,
							"body",
							lv_body_2_0,
							"org.xtext.example.mydsl.Mymix.PutAll");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleTake
entryRuleTake returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTakeRule()); }
	iv_ruleTake=ruleTake
	{ $current=$iv_ruleTake.current; }
	EOF;

// Rule Take
ruleTake returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='take'
		{
			newLeafNode(otherlv_0, grammarAccess.getTakeAccess().getTakeKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTakeAccess().getQuantityQuantityParserRuleCall_1_0());
				}
				lv_quantity_1_0=ruleQuantity
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTakeRule());
					}
					set(
						$current,
						"quantity",
						lv_quantity_1_0,
						"org.xtext.example.mydsl.Mymix.Quantity");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='from'
		{
			newLeafNode(otherlv_2, grammarAccess.getTakeAccess().getFromKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTakeAccess().getCupCupParserRuleCall_3_0());
				}
				lv_cup_3_0=ruleCup
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTakeRule());
					}
					set(
						$current,
						"cup",
						lv_cup_3_0,
						"org.xtext.example.mydsl.Mymix.Cup");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_4='filter'
			{
				newLeafNode(otherlv_4, grammarAccess.getTakeAccess().getFilterKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getTakeAccess().getFilterFilterParserRuleCall_4_1_0());
					}
					lv_filter_5_0=ruleFilter
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTakeRule());
						}
						set(
							$current,
							"filter",
							lv_filter_5_0,
							"org.xtext.example.mydsl.Mymix.Filter");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRulePutSome
entryRulePutSome returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPutSomeRule()); }
	iv_rulePutSome=rulePutSome
	{ $current=$iv_rulePutSome.current; }
	EOF;

// Rule PutSome
rulePutSome returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getPutSomeAccess().getWaitWaitParserRuleCall_0_0());
				}
				lv_wait_0_0=ruleWait
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPutSomeRule());
					}
					add(
						$current,
						"wait",
						lv_wait_0_0,
						"org.xtext.example.mydsl.Mymix.Wait");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getPutSomeAccess().getPutPutParserRuleCall_1_0());
				}
				lv_put_1_0=rulePut
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPutSomeRule());
					}
					add(
						$current,
						"put",
						lv_put_1_0,
						"org.xtext.example.mydsl.Mymix.Put");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)+
;

// Entry rule entryRulePutAll
entryRulePutAll returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPutAllRule()); }
	iv_rulePutAll=rulePutAll
	{ $current=$iv_rulePutAll.current; }
	EOF;

// Rule PutAll
rulePutAll returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='to'
		{
			newLeafNode(otherlv_0, grammarAccess.getPutAllAccess().getToKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPutAllAccess().getCupCupParserRuleCall_1_0());
				}
				lv_cup_1_0=ruleCup
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPutAllRule());
					}
					set(
						$current,
						"cup",
						lv_cup_1_0,
						"org.xtext.example.mydsl.Mymix.Cup");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulePut
entryRulePut returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPutRule()); }
	iv_rulePut=rulePut
	{ $current=$iv_rulePut.current; }
	EOF;

// Rule Put
rulePut returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='put'
		{
			newLeafNode(otherlv_0, grammarAccess.getPutAccess().getPutKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPutAccess().getQuantityQuantityParserRuleCall_1_0());
				}
				lv_quantity_1_0=ruleQuantity
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPutRule());
					}
					set(
						$current,
						"quantity",
						lv_quantity_1_0,
						"org.xtext.example.mydsl.Mymix.Quantity");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='to'
		{
			newLeafNode(otherlv_2, grammarAccess.getPutAccess().getToKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPutAccess().getCupCupParserRuleCall_3_0());
				}
				lv_cup_3_0=ruleCup
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPutRule());
					}
					set(
						$current,
						"cup",
						lv_cup_3_0,
						"org.xtext.example.mydsl.Mymix.Cup");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_4='filter'
			{
				newLeafNode(otherlv_4, grammarAccess.getPutAccess().getFilterKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPutAccess().getFilterFilterParserRuleCall_4_1_0());
					}
					lv_filter_5_0=ruleFilter
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPutRule());
						}
						set(
							$current,
							"filter",
							lv_filter_5_0,
							"org.xtext.example.mydsl.Mymix.Filter");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleCheck
entryRuleCheck returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCheckRule()); }
	iv_ruleCheck=ruleCheck
	{ $current=$iv_ruleCheck.current; }
	EOF;

// Rule Check
ruleCheck returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='check'
		{
			newLeafNode(otherlv_0, grammarAccess.getCheckAccess().getCheckKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCheckAccess().getCupCupParserRuleCall_1_0());
				}
				lv_cup_1_0=ruleCup
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCheckRule());
					}
					set(
						$current,
						"cup",
						lv_cup_1_0,
						"org.xtext.example.mydsl.Mymix.Cup");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2='forQuantity'
			{
				newLeafNode(otherlv_2, grammarAccess.getCheckAccess().getForQuantityKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getCheckAccess().getQuantityQuantityParserRuleCall_2_1_0());
					}
					lv_quantity_3_0=ruleQuantity
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCheckRule());
						}
						set(
							$current,
							"quantity",
							lv_quantity_3_0,
							"org.xtext.example.mydsl.Mymix.Quantity");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleWait
entryRuleWait returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getWaitRule()); }
	iv_ruleWait=ruleWait
	{ $current=$iv_ruleWait.current; }
	EOF;

// Rule Wait
ruleWait returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='wait'
		{
			newLeafNode(otherlv_0, grammarAccess.getWaitAccess().getWaitKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getWaitAccess().getTimeTimeParserRuleCall_1_0());
				}
				lv_time_1_0=ruleTime
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWaitRule());
					}
					set(
						$current,
						"time",
						lv_time_1_0,
						"org.xtext.example.mydsl.Mymix.Time");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleResult
entryRuleResult returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getResultRule()); }
	iv_ruleResult=ruleResult
	{ $current=$iv_ruleResult.current; }
	EOF;

// Rule Result
ruleResult returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='result'
		{
			newLeafNode(otherlv_0, grammarAccess.getResultAccess().getResultKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getResultAccess().getCupCupParserRuleCall_1_0());
				}
				lv_cup_1_0=ruleCup
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getResultRule());
					}
					set(
						$current,
						"cup",
						lv_cup_1_0,
						"org.xtext.example.mydsl.Mymix.Cup");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleFilter
entryRuleFilter returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFilterRule()); }
	iv_ruleFilter=ruleFilter
	{ $current=$iv_ruleFilter.current; }
	EOF;

// Rule Filter
ruleFilter returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_filter_0_0='A'
				{
					newLeafNode(lv_filter_0_0, grammarAccess.getFilterAccess().getFilterAKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFilterRule());
					}
					setWithLastConsumed($current, "filter", lv_filter_0_0, "A");
				}
			)
		)
		    |
		(
			(
				lv_filter_1_0='B'
				{
					newLeafNode(lv_filter_1_0, grammarAccess.getFilterAccess().getFilterBKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFilterRule());
					}
					setWithLastConsumed($current, "filter", lv_filter_1_0, "B");
				}
			)
		)
	)
;

// Entry rule entryRuleCup
entryRuleCup returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCupRule()); }
	iv_ruleCup=ruleCup
	{ $current=$iv_ruleCup.current; }
	EOF;

// Rule Cup
ruleCup returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='cup'
			{
				newLeafNode(otherlv_0, grammarAccess.getCupAccess().getCupKeyword_0());
			}
		)?
		(
			(
				lv_cup_1_0=RULE_INT
				{
					newLeafNode(lv_cup_1_0, grammarAccess.getCupAccess().getCupINTTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCupRule());
					}
					setWithLastConsumed(
						$current,
						"cup",
						lv_cup_1_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
	)
;

// Entry rule entryRuleQuantity
entryRuleQuantity returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getQuantityRule()); }
	iv_ruleQuantity=ruleQuantity
	{ $current=$iv_ruleQuantity.current; }
	EOF;

// Rule Quantity
ruleQuantity returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_quantity_0_0=RULE_INT
				{
					newLeafNode(lv_quantity_0_0, grammarAccess.getQuantityAccess().getQuantityINTTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getQuantityRule());
					}
					setWithLastConsumed(
						$current,
						"quantity",
						lv_quantity_0_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		(
			otherlv_1='mL'
			{
				newLeafNode(otherlv_1, grammarAccess.getQuantityAccess().getMLKeyword_1());
			}
		)?
	)
;

// Entry rule entryRuleTime
entryRuleTime returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTimeRule()); }
	iv_ruleTime=ruleTime
	{ $current=$iv_ruleTime.current; }
	EOF;

// Rule Time
ruleTime returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_time_0_0=RULE_INT
				{
					newLeafNode(lv_time_0_0, grammarAccess.getTimeAccess().getTimeINTTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTimeRule());
					}
					setWithLastConsumed(
						$current,
						"time",
						lv_time_0_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		(
			otherlv_1='sec'
			{
				newLeafNode(otherlv_1, grammarAccess.getTimeAccess().getSecKeyword_1());
			}
		)?
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
