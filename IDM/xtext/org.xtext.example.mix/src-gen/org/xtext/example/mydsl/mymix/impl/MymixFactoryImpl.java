/**
 * generated by Xtext 2.10.0
 */
package org.xtext.example.mydsl.mymix.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.xtext.example.mydsl.mymix.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class MymixFactoryImpl extends EFactoryImpl implements MymixFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static MymixFactory init()
  {
    try
    {
      MymixFactory theMymixFactory = (MymixFactory)EPackage.Registry.INSTANCE.getEFactory(MymixPackage.eNS_URI);
      if (theMymixFactory != null)
      {
        return theMymixFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new MymixFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MymixFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case MymixPackage.DEVICE: return createDevice();
      case MymixPackage.PROCEDURE: return createProcedure();
      case MymixPackage.OPERATION: return createOperation();
      case MymixPackage.TAKE_STUFF: return createTakeStuff();
      case MymixPackage.TAKE: return createTake();
      case MymixPackage.PUT_SOME: return createPutSome();
      case MymixPackage.PUT_ALL: return createPutAll();
      case MymixPackage.PUT: return createPut();
      case MymixPackage.CHECK: return createCheck();
      case MymixPackage.WAIT: return createWait();
      case MymixPackage.RESULT: return createResult();
      case MymixPackage.FILTER: return createFilter();
      case MymixPackage.CUP: return createCup();
      case MymixPackage.QUANTITY: return createQuantity();
      case MymixPackage.TIME: return createTime();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Device createDevice()
  {
    DeviceImpl device = new DeviceImpl();
    return device;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Procedure createProcedure()
  {
    ProcedureImpl procedure = new ProcedureImpl();
    return procedure;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Operation createOperation()
  {
    OperationImpl operation = new OperationImpl();
    return operation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TakeStuff createTakeStuff()
  {
    TakeStuffImpl takeStuff = new TakeStuffImpl();
    return takeStuff;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Take createTake()
  {
    TakeImpl take = new TakeImpl();
    return take;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PutSome createPutSome()
  {
    PutSomeImpl putSome = new PutSomeImpl();
    return putSome;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PutAll createPutAll()
  {
    PutAllImpl putAll = new PutAllImpl();
    return putAll;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Put createPut()
  {
    PutImpl put = new PutImpl();
    return put;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Check createCheck()
  {
    CheckImpl check = new CheckImpl();
    return check;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Wait createWait()
  {
    WaitImpl wait = new WaitImpl();
    return wait;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Result createResult()
  {
    ResultImpl result = new ResultImpl();
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Filter createFilter()
  {
    FilterImpl filter = new FilterImpl();
    return filter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Cup createCup()
  {
    CupImpl cup = new CupImpl();
    return cup;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Quantity createQuantity()
  {
    QuantityImpl quantity = new QuantityImpl();
    return quantity;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Time createTime()
  {
    TimeImpl time = new TimeImpl();
    return time;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MymixPackage getMymixPackage()
  {
    return (MymixPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static MymixPackage getPackage()
  {
    return MymixPackage.eINSTANCE;
  }

} //MymixFactoryImpl
