/**
 * generated by Xtext 2.10.0
 */
package org.xtext.example.mydsl.mymix.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.example.mydsl.mymix.Cup;
import org.xtext.example.mydsl.mymix.MymixPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Cup</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.mymix.impl.CupImpl#getCup <em>Cup</em>}</li>
 * </ul>
 *
 * @generated
 */
public class CupImpl extends MinimalEObjectImpl.Container implements Cup
{
  /**
   * The default value of the '{@link #getCup() <em>Cup</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCup()
   * @generated
   * @ordered
   */
  protected static final int CUP_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getCup() <em>Cup</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCup()
   * @generated
   * @ordered
   */
  protected int cup = CUP_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CupImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MymixPackage.Literals.CUP;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public int getCup()
  {
    return cup;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setCup(int newCup)
  {
    int oldCup = cup;
    cup = newCup;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MymixPackage.CUP__CUP, oldCup, cup));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MymixPackage.CUP__CUP:
        return getCup();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MymixPackage.CUP__CUP:
        setCup((Integer)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MymixPackage.CUP__CUP:
        setCup(CUP_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MymixPackage.CUP__CUP:
        return cup != CUP_EDEFAULT;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (cup: ");
    result.append(cup);
    result.append(')');
    return result.toString();
  }

} //CupImpl
