/**
 * generated by Xtext 2.10.0
 */
package org.xtext.example.mydsl.generator;

import com.google.common.collect.Iterables;
import com.google.inject.Inject;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.naming.IQualifiedNameProvider;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.xtext.example.mydsl.mymix.Check;
import org.xtext.example.mydsl.mymix.Cup;
import org.xtext.example.mydsl.mymix.Device;
import org.xtext.example.mydsl.mymix.Operation;
import org.xtext.example.mydsl.mymix.Procedure;
import org.xtext.example.mydsl.mymix.Result;
import org.xtext.example.mydsl.mymix.TakeStuff;
import org.xtext.example.mydsl.mymix.Wait;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class MymixGenerator extends AbstractGenerator {
  @Inject
  @Extension
  private IQualifiedNameProvider _iQualifiedNameProvider;
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    TreeIterator<EObject> _allContents = resource.getAllContents();
    Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(_allContents);
    Iterable<Device> _filter = Iterables.<Device>filter(_iterable, Device.class);
    for (final Device e : _filter) {
      CharSequence _compile = this.compile(e);
      fsa.generateFile(
        "Device.java", _compile);
    }
  }
  
  public CharSequence compile(final Device d) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public class Device{");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("private final int washCup=4;");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("private final int dumpCup=5;");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("private final int resultCup=11;");
    _builder.newLine();
    _builder.append("    \t");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("private final int maxVolume;");
    _builder.newLine();
    _builder.append("    \t");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("private int position=dumpCup;");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("private int currentVolumeIn=0;");
    _builder.newLine();
    {
      EList<Procedure> _procedures = d.getProcedures();
      for(final Procedure p : _procedures) {
        _builder.append("    \t");
        CharSequence _compile = this.compile(p);
        _builder.append(_compile, "    \t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    _builder.append("//Seems correct");
    _builder.newLine();
    _builder.append("public int getRelativePos(Cup c){");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("position=position + (c - position);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("return (c-position);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("public void mixResult(int cup){");
    _builder.newLine();
    _builder.append("        \t");
    _builder.append("emptySeringe();");
    _builder.newLine();
    _builder.append("        \t");
    _builder.append("mixWash();");
    _builder.newLine();
    _builder.append("           \t");
    _builder.append("move(getRelativePos(cup));");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("suck(maxVolume);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("move(getRelativePos(resultCup));//move to last cup");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("blow(maxVolume);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("mixWash();");
    _builder.newLine();
    _builder.append("         ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("         ");
    _builder.newLine();
    _builder.append("         ");
    _builder.append("public void mixWash(){");
    _builder.newLine();
    _builder.append("         \t");
    _builder.append("emptySeringe();");
    _builder.newLine();
    _builder.append("         \t");
    _builder.append("filt(0);");
    _builder.newLine();
    _builder.append("         \t");
    _builder.append("move(getRelativePos(washCup));");
    _builder.newLine();
    _builder.append("         \t");
    _builder.append("suck(maxVolume);");
    _builder.newLine();
    _builder.append("         \t");
    _builder.append("move(getRelativePos(dumpCup));");
    _builder.newLine();
    _builder.append("         \t");
    _builder.append("blow(maxVolume);");
    _builder.newLine();
    _builder.append("         ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("         ");
    _builder.newLine();
    _builder.append("         ");
    _builder.append("public void mixWait(int time){");
    _builder.newLine();
    _builder.append("         \t");
    _builder.append("wait(time);");
    _builder.newLine();
    _builder.append("         ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("         ");
    _builder.newLine();
    _builder.append("         ");
    _builder.append("public void mixPutAll(int cup,int filter){");
    _builder.newLine();
    _builder.append("         \t");
    _builder.append("this.emptySeringe();");
    _builder.newLine();
    _builder.append("         \t");
    _builder.append("filt(filter);");
    _builder.newLine();
    _builder.append("        \t");
    _builder.append("move(this.getRelativePos(cup));");
    _builder.newLine();
    _builder.append("        \t");
    _builder.append("blow(this.currentVolumeIn);");
    _builder.newLine();
    _builder.append("        \t");
    _builder.append("this.currentVolumeIn=0;");
    _builder.newLine();
    _builder.append("        \t");
    _builder.append("mixWash();");
    _builder.newLine();
    _builder.append("         ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("         ");
    _builder.newLine();
    _builder.append("         ");
    _builder.append("public void mixPut(int cup, int quantity,int filter){");
    _builder.newLine();
    _builder.append("         \t");
    _builder.append("this.enoughVolumeInSeringe(quantity);");
    _builder.newLine();
    _builder.append("         \t");
    _builder.append("filt(filter);");
    _builder.newLine();
    _builder.append("         \t");
    _builder.append("move(this.getRelativePos(cup));");
    _builder.newLine();
    _builder.append("         \t");
    _builder.append("blow(quantity);");
    _builder.newLine();
    _builder.append("         \t");
    _builder.append("washIfEmpty();");
    _builder.newLine();
    _builder.append("         ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("         ");
    _builder.newLine();
    _builder.append("         ");
    _builder.append("public void mixTake(int cup, int quantity,int filter){");
    _builder.newLine();
    _builder.append("         \t");
    _builder.append("this.notEmptySeringe();");
    _builder.newLine();
    _builder.append("         \t");
    _builder.append("filt(filter);");
    _builder.newLine();
    _builder.append("         \t");
    _builder.append("move(this.getRelativePos(cup));");
    _builder.newLine();
    _builder.append("         \t");
    _builder.append("suck(quantity);");
    _builder.newLine();
    _builder.append("         \t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("         \t");
    _builder.newLine();
    _builder.append("         \t");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("public void washIfEmpty(){");
    _builder.newLine();
    _builder.append("        \t");
    _builder.append("if(this.currentVolumeIn==0){");
    _builder.newLine();
    _builder.append("        \t");
    _builder.append("mixWash();");
    _builder.newLine();
    _builder.append("        \t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        \t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("public void NotEmptySeringe(){");
    _builder.newLine();
    _builder.append("           \t");
    _builder.append("if(this.currentVolumeIn==0)");
    _builder.newLine();
    _builder.append("         \t\t");
    _builder.append("{ throw new NullPointerException();}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("} \t");
    _builder.newLine();
    _builder.append("public void emptySeringe(){");
    _builder.newLine();
    _builder.append("        \t");
    _builder.append("if(this.currentVolumeIn>0)");
    _builder.newLine();
    _builder.append("        \t\t");
    _builder.append("{ throw new NullPointerException();}");
    _builder.newLine();
    _builder.append("}\t");
    _builder.newLine();
    _builder.append("         ");
    _builder.newLine();
    _builder.append("         ");
    _builder.append("public void enoughVolumeInSeringe(int quantity){");
    _builder.newLine();
    _builder.append("         \t");
    _builder.append("if(this.currentVolumeIn<quantity)");
    _builder.newLine();
    _builder.append("         \t\t");
    _builder.append("{ throw new NullPointerException();}");
    _builder.newLine();
    _builder.append("         ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final Procedure p) {
    throw new Error("Unresolved compilation problems:"
      + "\nThe method compile(Operation) from the type MymixGenerator refers to the missing type Object");
  }
  
  public Object compile(final Operation o) {
    throw new Error("Unresolved compilation problems:"
      + "\nA1 cannot be resolved to a type."
      + "\nA1 cannot be resolved to a type."
      + "\nA2 cannot be resolved to a type."
      + "\nA2 cannot be resolved to a type."
      + "\nThe method or field a is undefined"
      + "\nThe method or field a is undefined"
      + "\nThe method or field a is undefined"
      + "\nThe method or field a is undefined"
      + "\nUnreachable code: The case can never match. It is already handled by a previous condition."
      + "\ncompile cannot be resolved"
      + "\ncompile cannot be resolved"
      + "\neClass cannot be resolved"
      + "\nname cannot be resolved");
  }
  
  public CharSequence compile(final Result r) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("result(");
    Cup _cup = r.getCup();
    _builder.append(_cup, "");
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence compile(final Wait o) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("    ");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final Check o) {
    StringConcatenation _builder = new StringConcatenation();
    return _builder;
  }
  
  public CharSequence compile(final TakeStuff ts) {
    StringConcatenation _builder = new StringConcatenation();
    return _builder;
  }
}
