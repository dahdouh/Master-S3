/*
 * generated by Xtext 2.10.0
 */
grammar InternalMymix;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.xtext.example.mydsl.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.example.mydsl.services.MymixGrammarAccess;

}
@parser::members {
	private MymixGrammarAccess grammarAccess;

	public void setGrammarAccess(MymixGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleDevice
entryRuleDevice
:
{ before(grammarAccess.getDeviceRule()); }
	 ruleDevice
{ after(grammarAccess.getDeviceRule()); } 
	 EOF 
;

// Rule Device
ruleDevice 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDeviceAccess().getProceduresAssignment()); }
		(rule__Device__ProceduresAssignment)*
		{ after(grammarAccess.getDeviceAccess().getProceduresAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleProcedure
entryRuleProcedure
:
{ before(grammarAccess.getProcedureRule()); }
	 ruleProcedure
{ after(grammarAccess.getProcedureRule()); } 
	 EOF 
;

// Rule Procedure
ruleProcedure 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getProcedureAccess().getGroup()); }
		(rule__Procedure__Group__0)
		{ after(grammarAccess.getProcedureAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOperation
entryRuleOperation
:
{ before(grammarAccess.getOperationRule()); }
	 ruleOperation
{ after(grammarAccess.getOperationRule()); } 
	 EOF 
;

// Rule Operation
ruleOperation 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOperationAccess().getAlternatives()); }
		(rule__Operation__Alternatives)
		{ after(grammarAccess.getOperationAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTakeStuff
entryRuleTakeStuff
:
{ before(grammarAccess.getTakeStuffRule()); }
	 ruleTakeStuff
{ after(grammarAccess.getTakeStuffRule()); } 
	 EOF 
;

// Rule TakeStuff
ruleTakeStuff 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTakeStuffAccess().getGroup()); }
		(rule__TakeStuff__Group__0)
		{ after(grammarAccess.getTakeStuffAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTake
entryRuleTake
:
{ before(grammarAccess.getTakeRule()); }
	 ruleTake
{ after(grammarAccess.getTakeRule()); } 
	 EOF 
;

// Rule Take
ruleTake 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTakeAccess().getGroup()); }
		(rule__Take__Group__0)
		{ after(grammarAccess.getTakeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePutSome
entryRulePutSome
:
{ before(grammarAccess.getPutSomeRule()); }
	 rulePutSome
{ after(grammarAccess.getPutSomeRule()); } 
	 EOF 
;

// Rule PutSome
rulePutSome 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		(
			{ before(grammarAccess.getPutSomeAccess().getGroup()); }
			(rule__PutSome__Group__0)
			{ after(grammarAccess.getPutSomeAccess().getGroup()); }
		)
		(
			{ before(grammarAccess.getPutSomeAccess().getGroup()); }
			(rule__PutSome__Group__0)*
			{ after(grammarAccess.getPutSomeAccess().getGroup()); }
		)
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePutAll
entryRulePutAll
:
{ before(grammarAccess.getPutAllRule()); }
	 rulePutAll
{ after(grammarAccess.getPutAllRule()); } 
	 EOF 
;

// Rule PutAll
rulePutAll 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPutAllAccess().getGroup()); }
		(rule__PutAll__Group__0)
		{ after(grammarAccess.getPutAllAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePut
entryRulePut
:
{ before(grammarAccess.getPutRule()); }
	 rulePut
{ after(grammarAccess.getPutRule()); } 
	 EOF 
;

// Rule Put
rulePut 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPutAccess().getGroup()); }
		(rule__Put__Group__0)
		{ after(grammarAccess.getPutAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCheck
entryRuleCheck
:
{ before(grammarAccess.getCheckRule()); }
	 ruleCheck
{ after(grammarAccess.getCheckRule()); } 
	 EOF 
;

// Rule Check
ruleCheck 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCheckAccess().getGroup()); }
		(rule__Check__Group__0)
		{ after(grammarAccess.getCheckAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleWait
entryRuleWait
:
{ before(grammarAccess.getWaitRule()); }
	 ruleWait
{ after(grammarAccess.getWaitRule()); } 
	 EOF 
;

// Rule Wait
ruleWait 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getWaitAccess().getGroup()); }
		(rule__Wait__Group__0)
		{ after(grammarAccess.getWaitAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleResult
entryRuleResult
:
{ before(grammarAccess.getResultRule()); }
	 ruleResult
{ after(grammarAccess.getResultRule()); } 
	 EOF 
;

// Rule Result
ruleResult 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getResultAccess().getGroup()); }
		(rule__Result__Group__0)
		{ after(grammarAccess.getResultAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFilter
entryRuleFilter
:
{ before(grammarAccess.getFilterRule()); }
	 ruleFilter
{ after(grammarAccess.getFilterRule()); } 
	 EOF 
;

// Rule Filter
ruleFilter 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFilterAccess().getAlternatives()); }
		(rule__Filter__Alternatives)
		{ after(grammarAccess.getFilterAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCup
entryRuleCup
:
{ before(grammarAccess.getCupRule()); }
	 ruleCup
{ after(grammarAccess.getCupRule()); } 
	 EOF 
;

// Rule Cup
ruleCup 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCupAccess().getGroup()); }
		(rule__Cup__Group__0)
		{ after(grammarAccess.getCupAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleQuantity
entryRuleQuantity
:
{ before(grammarAccess.getQuantityRule()); }
	 ruleQuantity
{ after(grammarAccess.getQuantityRule()); } 
	 EOF 
;

// Rule Quantity
ruleQuantity 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getQuantityAccess().getGroup()); }
		(rule__Quantity__Group__0)
		{ after(grammarAccess.getQuantityAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTime
entryRuleTime
:
{ before(grammarAccess.getTimeRule()); }
	 ruleTime
{ after(grammarAccess.getTimeRule()); } 
	 EOF 
;

// Rule Time
ruleTime 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTimeAccess().getGroup()); }
		(rule__Time__Group__0)
		{ after(grammarAccess.getTimeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOperationAccess().getCheckParserRuleCall_0()); }
		ruleCheck
		{ after(grammarAccess.getOperationAccess().getCheckParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getOperationAccess().getWaitParserRuleCall_1()); }
		ruleWait
		{ after(grammarAccess.getOperationAccess().getWaitParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getOperationAccess().getTakeStuffParserRuleCall_2()); }
		ruleTakeStuff
		{ after(grammarAccess.getOperationAccess().getTakeStuffParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TakeStuff__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTakeStuffAccess().getBodyAssignment_1_0()); }
		(rule__TakeStuff__BodyAssignment_1_0)
		{ after(grammarAccess.getTakeStuffAccess().getBodyAssignment_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getTakeStuffAccess().getBodyAssignment_1_1()); }
		(rule__TakeStuff__BodyAssignment_1_1)
		{ after(grammarAccess.getTakeStuffAccess().getBodyAssignment_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Filter__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFilterAccess().getFilterAssignment_0()); }
		(rule__Filter__FilterAssignment_0)
		{ after(grammarAccess.getFilterAccess().getFilterAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getFilterAccess().getFilterAssignment_1()); }
		(rule__Filter__FilterAssignment_1)
		{ after(grammarAccess.getFilterAccess().getFilterAssignment_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Procedure__Group__0__Impl
	rule__Procedure__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProcedureAccess().getProcedureKeyword_0()); }
	'procedure'
	{ after(grammarAccess.getProcedureAccess().getProcedureKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Procedure__Group__1__Impl
	rule__Procedure__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProcedureAccess().getNameAssignment_1()); }
	(rule__Procedure__NameAssignment_1)
	{ after(grammarAccess.getProcedureAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Procedure__Group__2__Impl
	rule__Procedure__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getProcedureAccess().getBodyAssignment_2()); }
		(rule__Procedure__BodyAssignment_2)
		{ after(grammarAccess.getProcedureAccess().getBodyAssignment_2()); }
	)
	(
		{ before(grammarAccess.getProcedureAccess().getBodyAssignment_2()); }
		(rule__Procedure__BodyAssignment_2)*
		{ after(grammarAccess.getProcedureAccess().getBodyAssignment_2()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Procedure__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProcedureAccess().getResultAssignment_3()); }
	(rule__Procedure__ResultAssignment_3)
	{ after(grammarAccess.getProcedureAccess().getResultAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TakeStuff__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TakeStuff__Group__0__Impl
	rule__TakeStuff__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TakeStuff__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTakeStuffAccess().getOpAssignment_0()); }
	(rule__TakeStuff__OpAssignment_0)
	{ after(grammarAccess.getTakeStuffAccess().getOpAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TakeStuff__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TakeStuff__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TakeStuff__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTakeStuffAccess().getAlternatives_1()); }
	(rule__TakeStuff__Alternatives_1)
	{ after(grammarAccess.getTakeStuffAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Take__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Take__Group__0__Impl
	rule__Take__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Take__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTakeAccess().getTakeKeyword_0()); }
	'take'
	{ after(grammarAccess.getTakeAccess().getTakeKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Take__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Take__Group__1__Impl
	rule__Take__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Take__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTakeAccess().getQuantityAssignment_1()); }
	(rule__Take__QuantityAssignment_1)
	{ after(grammarAccess.getTakeAccess().getQuantityAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Take__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Take__Group__2__Impl
	rule__Take__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Take__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTakeAccess().getFromKeyword_2()); }
	'from'
	{ after(grammarAccess.getTakeAccess().getFromKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Take__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Take__Group__3__Impl
	rule__Take__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Take__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTakeAccess().getCupAssignment_3()); }
	(rule__Take__CupAssignment_3)
	{ after(grammarAccess.getTakeAccess().getCupAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Take__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Take__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Take__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTakeAccess().getGroup_4()); }
	(rule__Take__Group_4__0)?
	{ after(grammarAccess.getTakeAccess().getGroup_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Take__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Take__Group_4__0__Impl
	rule__Take__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Take__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTakeAccess().getFilterKeyword_4_0()); }
	'filter'
	{ after(grammarAccess.getTakeAccess().getFilterKeyword_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Take__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Take__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Take__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTakeAccess().getFilterAssignment_4_1()); }
	(rule__Take__FilterAssignment_4_1)
	{ after(grammarAccess.getTakeAccess().getFilterAssignment_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PutSome__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PutSome__Group__0__Impl
	rule__PutSome__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PutSome__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPutSomeAccess().getWaitAssignment_0()); }
	(rule__PutSome__WaitAssignment_0)?
	{ after(grammarAccess.getPutSomeAccess().getWaitAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PutSome__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PutSome__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PutSome__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPutSomeAccess().getPutAssignment_1()); }
	(rule__PutSome__PutAssignment_1)
	{ after(grammarAccess.getPutSomeAccess().getPutAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PutAll__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PutAll__Group__0__Impl
	rule__PutAll__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PutAll__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPutAllAccess().getToKeyword_0()); }
	'to'
	{ after(grammarAccess.getPutAllAccess().getToKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PutAll__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PutAll__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PutAll__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPutAllAccess().getCupAssignment_1()); }
	(rule__PutAll__CupAssignment_1)
	{ after(grammarAccess.getPutAllAccess().getCupAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Put__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Put__Group__0__Impl
	rule__Put__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Put__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPutAccess().getPutKeyword_0()); }
	'put'
	{ after(grammarAccess.getPutAccess().getPutKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Put__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Put__Group__1__Impl
	rule__Put__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Put__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPutAccess().getQuantityAssignment_1()); }
	(rule__Put__QuantityAssignment_1)
	{ after(grammarAccess.getPutAccess().getQuantityAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Put__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Put__Group__2__Impl
	rule__Put__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Put__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPutAccess().getToKeyword_2()); }
	'to'
	{ after(grammarAccess.getPutAccess().getToKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Put__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Put__Group__3__Impl
	rule__Put__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Put__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPutAccess().getCupAssignment_3()); }
	(rule__Put__CupAssignment_3)
	{ after(grammarAccess.getPutAccess().getCupAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Put__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Put__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Put__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPutAccess().getGroup_4()); }
	(rule__Put__Group_4__0)?
	{ after(grammarAccess.getPutAccess().getGroup_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Put__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Put__Group_4__0__Impl
	rule__Put__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Put__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPutAccess().getFilterKeyword_4_0()); }
	'filter'
	{ after(grammarAccess.getPutAccess().getFilterKeyword_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Put__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Put__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Put__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPutAccess().getFilterAssignment_4_1()); }
	(rule__Put__FilterAssignment_4_1)
	{ after(grammarAccess.getPutAccess().getFilterAssignment_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Check__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Check__Group__0__Impl
	rule__Check__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Check__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCheckAccess().getCheckKeyword_0()); }
	'check'
	{ after(grammarAccess.getCheckAccess().getCheckKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Check__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Check__Group__1__Impl
	rule__Check__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Check__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCheckAccess().getCupAssignment_1()); }
	(rule__Check__CupAssignment_1)
	{ after(grammarAccess.getCheckAccess().getCupAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Check__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Check__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Check__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCheckAccess().getGroup_2()); }
	(rule__Check__Group_2__0)?
	{ after(grammarAccess.getCheckAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Check__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Check__Group_2__0__Impl
	rule__Check__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Check__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCheckAccess().getForQuantityKeyword_2_0()); }
	'forQuantity'
	{ after(grammarAccess.getCheckAccess().getForQuantityKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Check__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Check__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Check__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCheckAccess().getQuantityAssignment_2_1()); }
	(rule__Check__QuantityAssignment_2_1)
	{ after(grammarAccess.getCheckAccess().getQuantityAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Wait__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Wait__Group__0__Impl
	rule__Wait__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Wait__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWaitAccess().getWaitKeyword_0()); }
	'wait'
	{ after(grammarAccess.getWaitAccess().getWaitKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Wait__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Wait__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Wait__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWaitAccess().getTimeAssignment_1()); }
	(rule__Wait__TimeAssignment_1)
	{ after(grammarAccess.getWaitAccess().getTimeAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Result__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Result__Group__0__Impl
	rule__Result__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Result__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getResultAccess().getResultKeyword_0()); }
	'result'
	{ after(grammarAccess.getResultAccess().getResultKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Result__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Result__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Result__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getResultAccess().getCupAssignment_1()); }
	(rule__Result__CupAssignment_1)
	{ after(grammarAccess.getResultAccess().getCupAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Cup__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Cup__Group__0__Impl
	rule__Cup__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Cup__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCupAccess().getCupKeyword_0()); }
	('cup')?
	{ after(grammarAccess.getCupAccess().getCupKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Cup__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Cup__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Cup__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCupAccess().getCupAssignment_1()); }
	(rule__Cup__CupAssignment_1)
	{ after(grammarAccess.getCupAccess().getCupAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Quantity__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Quantity__Group__0__Impl
	rule__Quantity__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Quantity__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQuantityAccess().getQuantityAssignment_0()); }
	(rule__Quantity__QuantityAssignment_0)
	{ after(grammarAccess.getQuantityAccess().getQuantityAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Quantity__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Quantity__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Quantity__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQuantityAccess().getMLKeyword_1()); }
	('mL')?
	{ after(grammarAccess.getQuantityAccess().getMLKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Time__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Time__Group__0__Impl
	rule__Time__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Time__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTimeAccess().getTimeAssignment_0()); }
	(rule__Time__TimeAssignment_0)
	{ after(grammarAccess.getTimeAccess().getTimeAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Time__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Time__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Time__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTimeAccess().getSecKeyword_1()); }
	('sec')?
	{ after(grammarAccess.getTimeAccess().getSecKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Device__ProceduresAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDeviceAccess().getProceduresProcedureParserRuleCall_0()); }
		ruleProcedure
		{ after(grammarAccess.getDeviceAccess().getProceduresProcedureParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProcedureAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getProcedureAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__BodyAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProcedureAccess().getBodyOperationParserRuleCall_2_0()); }
		ruleOperation
		{ after(grammarAccess.getProcedureAccess().getBodyOperationParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__ResultAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProcedureAccess().getResultResultParserRuleCall_3_0()); }
		ruleResult
		{ after(grammarAccess.getProcedureAccess().getResultResultParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TakeStuff__OpAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTakeStuffAccess().getOpTakeParserRuleCall_0_0()); }
		ruleTake
		{ after(grammarAccess.getTakeStuffAccess().getOpTakeParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TakeStuff__BodyAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTakeStuffAccess().getBodyPutSomeParserRuleCall_1_0_0()); }
		rulePutSome
		{ after(grammarAccess.getTakeStuffAccess().getBodyPutSomeParserRuleCall_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TakeStuff__BodyAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTakeStuffAccess().getBodyPutAllParserRuleCall_1_1_0()); }
		rulePutAll
		{ after(grammarAccess.getTakeStuffAccess().getBodyPutAllParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Take__QuantityAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTakeAccess().getQuantityQuantityParserRuleCall_1_0()); }
		ruleQuantity
		{ after(grammarAccess.getTakeAccess().getQuantityQuantityParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Take__CupAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTakeAccess().getCupCupParserRuleCall_3_0()); }
		ruleCup
		{ after(grammarAccess.getTakeAccess().getCupCupParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Take__FilterAssignment_4_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTakeAccess().getFilterFilterParserRuleCall_4_1_0()); }
		ruleFilter
		{ after(grammarAccess.getTakeAccess().getFilterFilterParserRuleCall_4_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PutSome__WaitAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPutSomeAccess().getWaitWaitParserRuleCall_0_0()); }
		ruleWait
		{ after(grammarAccess.getPutSomeAccess().getWaitWaitParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PutSome__PutAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPutSomeAccess().getPutPutParserRuleCall_1_0()); }
		rulePut
		{ after(grammarAccess.getPutSomeAccess().getPutPutParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PutAll__CupAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPutAllAccess().getCupCupParserRuleCall_1_0()); }
		ruleCup
		{ after(grammarAccess.getPutAllAccess().getCupCupParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Put__QuantityAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPutAccess().getQuantityQuantityParserRuleCall_1_0()); }
		ruleQuantity
		{ after(grammarAccess.getPutAccess().getQuantityQuantityParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Put__CupAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPutAccess().getCupCupParserRuleCall_3_0()); }
		ruleCup
		{ after(grammarAccess.getPutAccess().getCupCupParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Put__FilterAssignment_4_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPutAccess().getFilterFilterParserRuleCall_4_1_0()); }
		ruleFilter
		{ after(grammarAccess.getPutAccess().getFilterFilterParserRuleCall_4_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Check__CupAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCheckAccess().getCupCupParserRuleCall_1_0()); }
		ruleCup
		{ after(grammarAccess.getCheckAccess().getCupCupParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Check__QuantityAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCheckAccess().getQuantityQuantityParserRuleCall_2_1_0()); }
		ruleQuantity
		{ after(grammarAccess.getCheckAccess().getQuantityQuantityParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Wait__TimeAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWaitAccess().getTimeTimeParserRuleCall_1_0()); }
		ruleTime
		{ after(grammarAccess.getWaitAccess().getTimeTimeParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Result__CupAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getResultAccess().getCupCupParserRuleCall_1_0()); }
		ruleCup
		{ after(grammarAccess.getResultAccess().getCupCupParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Filter__FilterAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFilterAccess().getFilterAKeyword_0_0()); }
		(
			{ before(grammarAccess.getFilterAccess().getFilterAKeyword_0_0()); }
			'A'
			{ after(grammarAccess.getFilterAccess().getFilterAKeyword_0_0()); }
		)
		{ after(grammarAccess.getFilterAccess().getFilterAKeyword_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Filter__FilterAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFilterAccess().getFilterBKeyword_1_0()); }
		(
			{ before(grammarAccess.getFilterAccess().getFilterBKeyword_1_0()); }
			'B'
			{ after(grammarAccess.getFilterAccess().getFilterBKeyword_1_0()); }
		)
		{ after(grammarAccess.getFilterAccess().getFilterBKeyword_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Cup__CupAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCupAccess().getCupINTTerminalRuleCall_1_0()); }
		RULE_INT
		{ after(grammarAccess.getCupAccess().getCupINTTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Quantity__QuantityAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getQuantityAccess().getQuantityINTTerminalRuleCall_0_0()); }
		RULE_INT
		{ after(grammarAccess.getQuantityAccess().getQuantityINTTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Time__TimeAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTimeAccess().getTimeINTTerminalRuleCall_0_0()); }
		RULE_INT
		{ after(grammarAccess.getTimeAccess().getTimeINTTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
