/*
 * generated by Xtext 2.10.0
 */
package org.xtext.example.mydsl.generator

import org.eclipse.emf.ecore.resource.Resource

import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.eclipse.xtext.naming.IQualifiedNameProvider
import com.google.inject.Inject
import org.xtext.example.mydsl.mymix.*;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class MymixGenerator extends AbstractGenerator {

    @Inject extension IQualifiedNameProvider	
	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
    	for (e : resource.allContents.toIterable.filter(Device)) {
    			fsa.generateFile(
    	        "Device.java",
       			     e.compile)
       			     
    	}
}
    
    
    
    def compile(Device d)'''

    public class Device{
    	private int position;
    	«FOR p:d.procedures»
    		«p.compile»
    	«ENDFOR»

        }

    '''

	def compile(Procedure p)'''
		public void «p.name» (){
			«FOR o :p.body»
			    «o.compile»
			«ENDFOR»	
			
			
			}
	'''
    
    
    def compile(Operation e) '''
    «IF e.eContainer.fullyQualifiedName !== null»
        package «e.eContainer.fullyQualifiedName»;
    «ENDIF»
        
    public class «e.name» «IF e.superType !== null
            »extends «e.superType.fullyQualifiedName» «ENDIF»{
    }
        }
    '''
//		fsa.generateFile('greetings.txt', 'People to greet: ' + 
//			resource.allContents
//				.filter(typeof(Greeting))
//				.map[name]
//				.join(', '))
	}

